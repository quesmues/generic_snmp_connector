#
# PySNMP MIB module BEA-WEBLOGIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://.\BEA-WEBLOGIC-MIB
# Produced by pysmi-0.3.4 at Tue Apr 16 14:38:13 2019
# On host ? platform ? version ? by user ?
# Using Python version 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, TimeTicks, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Unsigned32, Gauge32, NotificationType, Counter32, ModuleIdentity, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Unsigned32", "Gauge32", "NotificationType", "Counter32", "ModuleIdentity", "Counter64", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wls = ModuleIdentity((1, 3, 6, 1, 4, 1, 140, 625))
if mibBuilder.loadTexts: wls.setLastUpdated('201008161102Z')
if mibBuilder.loadTexts: wls.setOrganization('BEA Systems Inc.')
bea = MibIdentifier((1, 3, 6, 1, 4, 1, 140))
experimental = MibIdentifier((1, 3, 6, 1, 4, 1, 140, 625, 10))
trapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 140, 625, 100))
alsb = MibIdentifier((1, 3, 6, 1, 4, 1, 140, 800))
alsbTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 140, 800, 100))
mibObjectName = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mibObjectName.setStatus('current')
mibObjectOid = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 10, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibObjectOid.setStatus('current')
trapTime = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTime.setStatus('current')
trapServerName = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapServerName.setStatus('current')
trapMachineName = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMachineName.setStatus('current')
trapLogThreadId = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogThreadId.setStatus('current')
trapLogTransactionId = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogTransactionId.setStatus('current')
trapLogUserId = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogUserId.setStatus('current')
trapLogSubsystem = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogSubsystem.setStatus('current')
trapLogMsgId = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogMsgId.setStatus('current')
trapLogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogSeverity.setStatus('current')
trapLogMessage = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogMessage.setStatus('current')
trapMonitorType = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMonitorType.setStatus('current')
trapMonitorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMonitorThreshold.setStatus('current')
trapMonitorValue = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMonitorValue.setStatus('current')
trapMBeanName = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMBeanName.setStatus('current')
trapMBeanType = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMBeanType.setStatus('current')
trapAttributeName = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAttributeName.setStatus('current')
trapAttributeType = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAttributeType.setStatus('current')
trapAttributeChangeType = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAttributeChangeType.setStatus('current')
trapAttributeOldVal = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAttributeOldVal.setStatus('current')
trapAttributeNewVal = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAttributeNewVal.setStatus('current')
trapWatchName = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 105), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapWatchName.setStatus('current')
trapWatchRuleType = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapWatchRuleType.setStatus('current')
trapWatchRule = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 115), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapWatchRule.setStatus('current')
trapWatchSeverity = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 120), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapWatchSeverity.setStatus('current')
trapWatchData = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 125), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapWatchData.setStatus('current')
trapWatchAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 130), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapWatchAlarmType.setStatus('current')
trapWatchAlarmResetPeriod = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 135), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapWatchAlarmResetPeriod.setStatus('current')
trapWatchSNMPNotificationName = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 140), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapWatchSNMPNotificationName.setStatus('current')
trapDomainName = MibScalar((1, 3, 6, 1, 4, 1, 140, 625, 100, 145), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDomainName.setStatus('current')
trapALSBAlertTrapType = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertTrapType.setStatus('current')
trapALSBAlertSeverity = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertSeverity.setStatus('current')
trapALSBAlertDomainName = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertDomainName.setStatus('current')
trapALSBAlertServerName = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertServerName.setStatus('current')
trapALSBAlertAlertId = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertAlertId.setStatus('current')
trapALSBAlertRuleId = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertRuleId.setStatus('current')
trapALSBAlertRuleName = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertRuleName.setStatus('current')
trapALSBAlertRuleCondition = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertRuleCondition.setStatus('current')
trapALSBAlertAlertTime = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertAlertTime.setStatus('current')
trapALSBAlertAnnotation = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertAnnotation.setStatus('current')
trapALSBAlertServiceName = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertServiceName.setStatus('current')
trapALSBAlertServicePath = MibScalar((1, 3, 6, 1, 4, 1, 140, 800, 100, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapALSBAlertServicePath.setStatus('current')
applicationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 105), )
if mibBuilder.loadTexts: applicationRuntimeTable.setStatus('current')
applicationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 105, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "applicationRuntimeIndex"))
if mibBuilder.loadTexts: applicationRuntimeEntry.setStatus('current')
applicationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 105, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationRuntimeIndex.setStatus('current')
applicationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 105, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationRuntimeObjectName.setStatus('current')
applicationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 105, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationRuntimeType.setStatus('current')
applicationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 105, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationRuntimeName.setStatus('current')
applicationRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 105, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationRuntimeParent.setStatus('current')
applicationRuntimeApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 105, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationRuntimeApplicationName.setStatus('current')
applicationRuntimeApplicationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 105, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationRuntimeApplicationVersion.setStatus('current')
clusterRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 110), )
if mibBuilder.loadTexts: clusterRuntimeTable.setStatus('current')
clusterRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 110, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "clusterRuntimeIndex"))
if mibBuilder.loadTexts: clusterRuntimeEntry.setStatus('current')
clusterRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeIndex.setStatus('current')
clusterRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeObjectName.setStatus('current')
clusterRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeType.setStatus('current')
clusterRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeName.setStatus('current')
clusterRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeParent.setStatus('current')
clusterRuntimeAliveServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeAliveServerCount.setStatus('current')
clusterRuntimeResendRequestsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeResendRequestsCount.setStatus('current')
clusterRuntimeFragmentsSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeFragmentsSentCount.setStatus('current')
clusterRuntimeFragmentsReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeFragmentsReceivedCount.setStatus('current')
clusterRuntimeMulticastMessagesLostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeMulticastMessagesLostCount.setStatus('current')
clusterRuntimeServerNames = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeServerNames.setStatus('current')
clusterRuntimeSecondaryDistributionNames = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeSecondaryDistributionNames.setStatus('current')
clusterRuntimePrimaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimePrimaryCount.setStatus('current')
clusterRuntimeCurrentSecondaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 61), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeCurrentSecondaryServer.setStatus('current')
clusterRuntimeForeignFragmentsDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeForeignFragmentsDroppedCount.setStatus('current')
clusterRuntimeDetailedSecondariesDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeDetailedSecondariesDistribution.setStatus('current')
clusterRuntimeActiveSingletonServices = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 66), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeActiveSingletonServices.setStatus('current')
clusterRuntimeSecondaryServerDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 67), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeSecondaryServerDetails.setStatus('current')
clusterRuntimeSecondaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 110, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRuntimeSecondaryCount.setStatus('current')
wanreplicationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 111), )
if mibBuilder.loadTexts: wanreplicationRuntimeTable.setStatus('current')
wanreplicationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 111, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wanreplicationRuntimeIndex"))
if mibBuilder.loadTexts: wanreplicationRuntimeEntry.setStatus('current')
wanreplicationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeIndex.setStatus('current')
wanreplicationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeObjectName.setStatus('current')
wanreplicationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeType.setStatus('current')
wanreplicationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeName.setStatus('current')
wanreplicationRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeParent.setStatus('current')
wanreplicationRuntimeNumberOfSessionsFlushedToTheDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeNumberOfSessionsFlushedToTheDatabase.setStatus('current')
wanreplicationRuntimeNumberOfSessionsRetrievedFromTheDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeNumberOfSessionsRetrievedFromTheDatabase.setStatus('current')
wanreplicationRuntimeSecondaryServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeSecondaryServerName.setStatus('current')
wanreplicationRuntimePrimaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimePrimaryCount.setStatus('current')
wanreplicationRuntimeSecondaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeSecondaryCount.setStatus('current')
wanreplicationRuntimeRemoteClusterReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeRemoteClusterReachable.setStatus('current')
wanreplicationRuntimeDetailedSecondariesDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeDetailedSecondariesDistribution.setStatus('current')
wanreplicationRuntimeSecondaryServerDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 111, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanreplicationRuntimeSecondaryServerDetails.setStatus('current')
deploymentTaskRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 121), )
if mibBuilder.loadTexts: deploymentTaskRuntimeTable.setStatus('current')
deploymentTaskRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 121, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "deploymentTaskRuntimeIndex"))
if mibBuilder.loadTexts: deploymentTaskRuntimeEntry.setStatus('current')
deploymentTaskRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeIndex.setStatus('current')
deploymentTaskRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeObjectName.setStatus('current')
deploymentTaskRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeType.setStatus('current')
deploymentTaskRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeName.setStatus('current')
deploymentTaskRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeParent.setStatus('current')
deploymentTaskRuntimeApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeApplicationName.setStatus('current')
deploymentTaskRuntimeId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeId.setStatus('current')
deploymentTaskRuntimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeSource.setStatus('current')
deploymentTaskRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeState.setStatus('current')
deploymentTaskRuntimeInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeInUse.setStatus('current')
deploymentTaskRuntimeNewSource = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeNewSource.setStatus('current')
deploymentTaskRuntimeSystemTask = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeSystemTask.setStatus('current')
deploymentTaskRuntimeNotificationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeNotificationLevel.setStatus('current')
deploymentTaskRuntimeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeDescription.setStatus('current')
deploymentTaskRuntimeRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 50), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeRunning.setStatus('current')
deploymentTaskRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeStatus.setStatus('current')
deploymentTaskRuntimeBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeBeginTime.setStatus('current')
deploymentTaskRuntimeTask = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeTask.setStatus('current')
deploymentTaskRuntimeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 121, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentTaskRuntimeEndTime.setStatus('current')
domainRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 130), )
if mibBuilder.loadTexts: domainRuntimeTable.setStatus('current')
domainRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 130, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "domainRuntimeIndex"))
if mibBuilder.loadTexts: domainRuntimeEntry.setStatus('current')
domainRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 130, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainRuntimeIndex.setStatus('current')
domainRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 130, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainRuntimeObjectName.setStatus('current')
domainRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 130, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainRuntimeType.setStatus('current')
domainRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 130, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainRuntimeName.setStatus('current')
domainRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 130, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainRuntimeParent.setStatus('current')
domainRuntimeActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 130, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainRuntimeActivationTime.setStatus('current')
queryCacheRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 135), )
if mibBuilder.loadTexts: queryCacheRuntimeTable.setStatus('current')
queryCacheRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 135, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "queryCacheRuntimeIndex"))
if mibBuilder.loadTexts: queryCacheRuntimeEntry.setStatus('current')
queryCacheRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeIndex.setStatus('current')
queryCacheRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeObjectName.setStatus('current')
queryCacheRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeType.setStatus('current')
queryCacheRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeName.setStatus('current')
queryCacheRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeParent.setStatus('current')
queryCacheRuntimeTotalCachedQueriesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeTotalCachedQueriesCount.setStatus('current')
queryCacheRuntimeCacheAccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeCacheAccessCount.setStatus('current')
queryCacheRuntimeCacheHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeCacheHitCount.setStatus('current')
queryCacheRuntimeTotalCacheMissCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeTotalCacheMissCount.setStatus('current')
queryCacheRuntimeCacheMissByTimeoutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeCacheMissByTimeoutCount.setStatus('current')
queryCacheRuntimeCacheMissByBeanEvictionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeCacheMissByBeanEvictionCount.setStatus('current')
queryCacheRuntimeCacheMissByRelatedQueryMissCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeCacheMissByRelatedQueryMissCount.setStatus('current')
queryCacheRuntimeCacheMissByDependentQueryMissCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 135, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queryCacheRuntimeCacheMissByDependentQueryMissCount.setStatus('current')
ejbCacheRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 137), )
if mibBuilder.loadTexts: ejbCacheRuntimeTable.setStatus('current')
ejbCacheRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 137, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "ejbCacheRuntimeIndex"))
if mibBuilder.loadTexts: ejbCacheRuntimeEntry.setStatus('current')
ejbCacheRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimeIndex.setStatus('current')
ejbCacheRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimeObjectName.setStatus('current')
ejbCacheRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimeType.setStatus('current')
ejbCacheRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimeName.setStatus('current')
ejbCacheRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimeParent.setStatus('current')
ejbCacheRuntimeActivationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimeActivationCount.setStatus('current')
ejbCacheRuntimeCacheAccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimeCacheAccessCount.setStatus('current')
ejbCacheRuntimeCachedBeansCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimeCachedBeansCurrentCount.setStatus('current')
ejbCacheRuntimeCacheHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimeCacheHitCount.setStatus('current')
ejbCacheRuntimePassivationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimePassivationCount.setStatus('current')
ejbCacheRuntimeCacheMissCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 137, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbCacheRuntimeCacheMissCount.setStatus('current')
ejbRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 138), )
if mibBuilder.loadTexts: ejbRuntimeTable.setStatus('current')
ejbRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 138, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "ejbRuntimeIndex"))
if mibBuilder.loadTexts: ejbRuntimeEntry.setStatus('current')
ejbRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 138, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbRuntimeIndex.setStatus('current')
ejbRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 138, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbRuntimeObjectName.setStatus('current')
ejbRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 138, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbRuntimeType.setStatus('current')
ejbRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 138, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbRuntimeName.setStatus('current')
ejbRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 138, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbRuntimeParent.setStatus('current')
ejbRuntimeEJBName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 138, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbRuntimeEJBName.setStatus('current')
ejbComponentRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 140), )
if mibBuilder.loadTexts: ejbComponentRuntimeTable.setStatus('current')
ejbComponentRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 140, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "ejbComponentRuntimeIndex"))
if mibBuilder.loadTexts: ejbComponentRuntimeEntry.setStatus('current')
ejbComponentRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 140, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentRuntimeIndex.setStatus('current')
ejbComponentRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 140, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentRuntimeObjectName.setStatus('current')
ejbComponentRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 140, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentRuntimeType.setStatus('current')
ejbComponentRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 140, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentRuntimeName.setStatus('current')
ejbComponentRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 140, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentRuntimeParent.setStatus('current')
ejbComponentRuntimeModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 140, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentRuntimeModuleId.setStatus('current')
ejbComponentRuntimeDeploymentState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 140, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentRuntimeDeploymentState.setStatus('current')
ejbLockingRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 151), )
if mibBuilder.loadTexts: ejbLockingRuntimeTable.setStatus('current')
ejbLockingRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 151, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "ejbLockingRuntimeIndex"))
if mibBuilder.loadTexts: ejbLockingRuntimeEntry.setStatus('current')
ejbLockingRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 151, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbLockingRuntimeIndex.setStatus('current')
ejbLockingRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 151, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbLockingRuntimeObjectName.setStatus('current')
ejbLockingRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 151, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbLockingRuntimeType.setStatus('current')
ejbLockingRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 151, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbLockingRuntimeName.setStatus('current')
ejbLockingRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 151, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbLockingRuntimeParent.setStatus('current')
ejbLockingRuntimeLockEntriesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 151, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbLockingRuntimeLockEntriesCurrentCount.setStatus('current')
ejbLockingRuntimeLockManagerAccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 151, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbLockingRuntimeLockManagerAccessCount.setStatus('current')
ejbLockingRuntimeWaiterTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 151, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbLockingRuntimeWaiterTotalCount.setStatus('current')
ejbLockingRuntimeWaiterCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 151, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbLockingRuntimeWaiterCurrentCount.setStatus('current')
ejbLockingRuntimeTimeoutTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 151, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbLockingRuntimeTimeoutTotalCount.setStatus('current')
ejbPoolRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 161), )
if mibBuilder.loadTexts: ejbPoolRuntimeTable.setStatus('current')
ejbPoolRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 161, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "ejbPoolRuntimeIndex"))
if mibBuilder.loadTexts: ejbPoolRuntimeEntry.setStatus('current')
ejbPoolRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeIndex.setStatus('current')
ejbPoolRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeObjectName.setStatus('current')
ejbPoolRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeType.setStatus('current')
ejbPoolRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeName.setStatus('current')
ejbPoolRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeParent.setStatus('current')
ejbPoolRuntimeBeansInUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeBeansInUseCount.setStatus('current')
ejbPoolRuntimeIdleBeansCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeIdleBeansCount.setStatus('current')
ejbPoolRuntimeTimeoutTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeTimeoutTotalCount.setStatus('current')
ejbPoolRuntimeWaiterTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeWaiterTotalCount.setStatus('current')
ejbPoolRuntimeAccessTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeAccessTotalCount.setStatus('current')
ejbPoolRuntimeBeansInUseCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeBeansInUseCurrentCount.setStatus('current')
ejbPoolRuntimeDestroyedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeDestroyedTotalCount.setStatus('current')
ejbPoolRuntimeMissTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeMissTotalCount.setStatus('current')
ejbPoolRuntimeWaiterCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimeWaiterCurrentCount.setStatus('current')
ejbPoolRuntimePooledBeansCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 161, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbPoolRuntimePooledBeansCurrentCount.setStatus('current')
ejbTimerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 162), )
if mibBuilder.loadTexts: ejbTimerRuntimeTable.setStatus('current')
ejbTimerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 162, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "ejbTimerRuntimeIndex"))
if mibBuilder.loadTexts: ejbTimerRuntimeEntry.setStatus('current')
ejbTimerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 162, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTimerRuntimeIndex.setStatus('current')
ejbTimerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 162, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTimerRuntimeObjectName.setStatus('current')
ejbTimerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 162, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTimerRuntimeType.setStatus('current')
ejbTimerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 162, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTimerRuntimeName.setStatus('current')
ejbTimerRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 162, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTimerRuntimeParent.setStatus('current')
ejbTimerRuntimeDisabledTimerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 162, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTimerRuntimeDisabledTimerCount.setStatus('current')
ejbTimerRuntimeCancelledTimerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 162, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTimerRuntimeCancelledTimerCount.setStatus('current')
ejbTimerRuntimeTimeoutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 162, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTimerRuntimeTimeoutCount.setStatus('current')
ejbTimerRuntimeActiveTimerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 162, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTimerRuntimeActiveTimerCount.setStatus('current')
ejbTransactionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 171), )
if mibBuilder.loadTexts: ejbTransactionRuntimeTable.setStatus('current')
ejbTransactionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 171, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "ejbTransactionRuntimeIndex"))
if mibBuilder.loadTexts: ejbTransactionRuntimeEntry.setStatus('current')
ejbTransactionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 171, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTransactionRuntimeIndex.setStatus('current')
ejbTransactionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 171, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTransactionRuntimeObjectName.setStatus('current')
ejbTransactionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 171, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTransactionRuntimeType.setStatus('current')
ejbTransactionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 171, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTransactionRuntimeName.setStatus('current')
ejbTransactionRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 171, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTransactionRuntimeParent.setStatus('current')
ejbTransactionRuntimeTransactionsCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 171, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTransactionRuntimeTransactionsCommittedTotalCount.setStatus('current')
ejbTransactionRuntimeTransactionsRolledBackTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 171, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTransactionRuntimeTransactionsRolledBackTotalCount.setStatus('current')
ejbTransactionRuntimeTransactionsTimedOutTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 171, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbTransactionRuntimeTransactionsTimedOutTotalCount.setStatus('current')
entityCacheCumulativeRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 172), )
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTable.setStatus('current')
entityCacheCumulativeRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 172, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "entityCacheCumulativeRuntimeIndex"))
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeEntry.setStatus('current')
entityCacheCumulativeRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeIndex.setStatus('current')
entityCacheCumulativeRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeObjectName.setStatus('current')
entityCacheCumulativeRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeType.setStatus('current')
entityCacheCumulativeRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeName.setStatus('current')
entityCacheCumulativeRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeParent.setStatus('current')
entityCacheCumulativeRuntimeAvgEntrySizeDiskPurged = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeAvgEntrySizeDiskPurged.setStatus('current')
entityCacheCumulativeRuntimeAvgEntrySizeMemoryPurged = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeAvgEntrySizeMemoryPurged.setStatus('current')
entityCacheCumulativeRuntimeDiskPurgesPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeDiskPurgesPerHour.setStatus('current')
entityCacheCumulativeRuntimeMostRecentDiskPurge = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeMostRecentDiskPurge.setStatus('current')
entityCacheCumulativeRuntimeMostRecentMemoryPurge = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeMostRecentMemoryPurge.setStatus('current')
entityCacheCumulativeRuntimePercentRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimePercentRejected.setStatus('current')
entityCacheCumulativeRuntimeTotalItemsDiskPurged = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTotalItemsDiskPurged.setStatus('current')
entityCacheCumulativeRuntimeTotalItemsMemoryPurged = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTotalItemsMemoryPurged.setStatus('current')
entityCacheCumulativeRuntimeTotalNumberDiskPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTotalNumberDiskPurges.setStatus('current')
entityCacheCumulativeRuntimeTotalNumberMemoryPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTotalNumberMemoryPurges.setStatus('current')
entityCacheCumulativeRuntimeTotalNumberOfRejections = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTotalNumberOfRejections.setStatus('current')
entityCacheCumulativeRuntimeTotalNumberOfRenewals = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTotalNumberOfRenewals.setStatus('current')
entityCacheCumulativeRuntimeTotalSizeOfRejections = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTotalSizeOfRejections.setStatus('current')
entityCacheCumulativeRuntimeTotalCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTotalCurrentEntries.setStatus('current')
entityCacheCumulativeRuntimeAvgPerEntryDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeAvgPerEntryDiskSize.setStatus('current')
entityCacheCumulativeRuntimeTotalPersistentCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTotalPersistentCurrentEntries.setStatus('current')
entityCacheCumulativeRuntimeMaxEntryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeMaxEntryTimeout.setStatus('current')
entityCacheCumulativeRuntimeMaxEntryMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeMaxEntryMemorySize.setStatus('current')
entityCacheCumulativeRuntimeTotalTransientCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeTotalTransientCurrentEntries.setStatus('current')
entityCacheCumulativeRuntimeAvgPerEntryMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeAvgPerEntryMemorySize.setStatus('current')
entityCacheCumulativeRuntimeAvgPercentPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeAvgPercentPersistent.setStatus('current')
entityCacheCumulativeRuntimeMinEntryMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeMinEntryMemorySize.setStatus('current')
entityCacheCumulativeRuntimeAvgTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeAvgTimeout.setStatus('current')
entityCacheCumulativeRuntimeMemoryPurgesPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeMemoryPurgesPerHour.setStatus('current')
entityCacheCumulativeRuntimeMinEntryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeMinEntryTimeout.setStatus('current')
entityCacheCumulativeRuntimeAvgPercentTransient = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 172, 1, 50), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCumulativeRuntimeAvgPercentTransient.setStatus('current')
entityCacheCurrentStateRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 173), )
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeTable.setStatus('current')
entityCacheCurrentStateRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 173, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "entityCacheCurrentStateRuntimeIndex"))
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeEntry.setStatus('current')
entityCacheCurrentStateRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeIndex.setStatus('current')
entityCacheCurrentStateRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeObjectName.setStatus('current')
entityCacheCurrentStateRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeType.setStatus('current')
entityCacheCurrentStateRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeName.setStatus('current')
entityCacheCurrentStateRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeParent.setStatus('current')
entityCacheCurrentStateRuntimeDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeDiskUsage.setStatus('current')
entityCacheCurrentStateRuntimeMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeMemoryUsage.setStatus('current')
entityCacheCurrentStateRuntimeTotalCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeTotalCurrentEntries.setStatus('current')
entityCacheCurrentStateRuntimeMinEntryMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeMinEntryMemorySize.setStatus('current')
entityCacheCurrentStateRuntimeAvgPercentPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeAvgPercentPersistent.setStatus('current')
entityCacheCurrentStateRuntimeAvgTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeAvgTimeout.setStatus('current')
entityCacheCurrentStateRuntimeAvgPerEntryDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeAvgPerEntryDiskSize.setStatus('current')
entityCacheCurrentStateRuntimeTotalPersistentCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeTotalPersistentCurrentEntries.setStatus('current')
entityCacheCurrentStateRuntimeMaxEntryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeMaxEntryTimeout.setStatus('current')
entityCacheCurrentStateRuntimeMaxEntryMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeMaxEntryMemorySize.setStatus('current')
entityCacheCurrentStateRuntimeTotalTransientCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeTotalTransientCurrentEntries.setStatus('current')
entityCacheCurrentStateRuntimeAvgPerEntryMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeAvgPerEntryMemorySize.setStatus('current')
entityCacheCurrentStateRuntimeMinEntryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeMinEntryTimeout.setStatus('current')
entityCacheCurrentStateRuntimeAvgPercentTransient = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 173, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheCurrentStateRuntimeAvgPercentTransient.setStatus('current')
entityCacheRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 174), )
if mibBuilder.loadTexts: entityCacheRuntimeTable.setStatus('current')
entityCacheRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 174, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "entityCacheRuntimeIndex"))
if mibBuilder.loadTexts: entityCacheRuntimeEntry.setStatus('current')
entityCacheRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeIndex.setStatus('current')
entityCacheRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeObjectName.setStatus('current')
entityCacheRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeType.setStatus('current')
entityCacheRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeName.setStatus('current')
entityCacheRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeParent.setStatus('current')
entityCacheRuntimeAvgPercentTransient = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeAvgPercentTransient.setStatus('current')
entityCacheRuntimeAvgPerEntryDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeAvgPerEntryDiskSize.setStatus('current')
entityCacheRuntimeAvgPercentPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeAvgPercentPersistent.setStatus('current')
entityCacheRuntimeAvgPerEntryMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeAvgPerEntryMemorySize.setStatus('current')
entityCacheRuntimeAvgTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeAvgTimeout.setStatus('current')
entityCacheRuntimeMaxEntryMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeMaxEntryMemorySize.setStatus('current')
entityCacheRuntimeMaxEntryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeMaxEntryTimeout.setStatus('current')
entityCacheRuntimeMinEntryMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeMinEntryMemorySize.setStatus('current')
entityCacheRuntimeMinEntryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeMinEntryTimeout.setStatus('current')
entityCacheRuntimeTotalCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeTotalCurrentEntries.setStatus('current')
entityCacheRuntimeTotalPersistentCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeTotalPersistentCurrentEntries.setStatus('current')
entityCacheRuntimeTotalTransientCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 174, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityCacheRuntimeTotalTransientCurrentEntries.setStatus('current')
executeQueueRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 180), )
if mibBuilder.loadTexts: executeQueueRuntimeTable.setStatus('current')
executeQueueRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 180, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "executeQueueRuntimeIndex"))
if mibBuilder.loadTexts: executeQueueRuntimeEntry.setStatus('current')
executeQueueRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 180, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueRuntimeIndex.setStatus('current')
executeQueueRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 180, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueRuntimeObjectName.setStatus('current')
executeQueueRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 180, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueRuntimeType.setStatus('current')
executeQueueRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 180, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueRuntimeName.setStatus('current')
executeQueueRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 180, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueRuntimeParent.setStatus('current')
executeQueueRuntimeExecuteThreadCurrentIdleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 180, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueRuntimeExecuteThreadCurrentIdleCount.setStatus('current')
executeQueueRuntimePendingRequestOldestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 180, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueRuntimePendingRequestOldestTime.setStatus('current')
executeQueueRuntimePendingRequestCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 180, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueRuntimePendingRequestCurrentCount.setStatus('current')
executeQueueRuntimeServicedRequestTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 180, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueRuntimeServicedRequestTotalCount.setStatus('current')
executeQueueRuntimeExecuteThreadTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 180, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueRuntimeExecuteThreadTotalCount.setStatus('current')
interceptionComponentRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 181), )
if mibBuilder.loadTexts: interceptionComponentRuntimeTable.setStatus('current')
interceptionComponentRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 181, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "interceptionComponentRuntimeIndex"))
if mibBuilder.loadTexts: interceptionComponentRuntimeEntry.setStatus('current')
interceptionComponentRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 181, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interceptionComponentRuntimeIndex.setStatus('current')
interceptionComponentRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 181, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interceptionComponentRuntimeObjectName.setStatus('current')
interceptionComponentRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 181, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interceptionComponentRuntimeType.setStatus('current')
interceptionComponentRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 181, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interceptionComponentRuntimeName.setStatus('current')
interceptionComponentRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 181, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interceptionComponentRuntimeParent.setStatus('current')
interceptionComponentRuntimeModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 181, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interceptionComponentRuntimeModuleId.setStatus('current')
interceptionComponentRuntimeDeploymentState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 181, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interceptionComponentRuntimeDeploymentState.setStatus('current')
jdbcConnectionPoolRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 190), )
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeTable.setStatus('current')
jdbcConnectionPoolRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 190, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jdbcConnectionPoolRuntimeIndex"))
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeEntry.setStatus('current')
jdbcConnectionPoolRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeIndex.setStatus('current')
jdbcConnectionPoolRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeObjectName.setStatus('current')
jdbcConnectionPoolRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeType.setStatus('current')
jdbcConnectionPoolRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeName.setStatus('current')
jdbcConnectionPoolRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeParent.setStatus('current')
jdbcConnectionPoolRuntimeActiveConnectionsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeActiveConnectionsCurrentCount.setStatus('current')
jdbcConnectionPoolRuntimeWaitingForConnectionCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeWaitingForConnectionCurrentCount.setStatus('current')
jdbcConnectionPoolRuntimeVersionJDBCDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeVersionJDBCDriver.setStatus('current')
jdbcConnectionPoolRuntimeActiveConnectionsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeActiveConnectionsHighCount.setStatus('current')
jdbcConnectionPoolRuntimeWaitingForConnectionHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeWaitingForConnectionHighCount.setStatus('current')
jdbcConnectionPoolRuntimeWaitSecondsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeWaitSecondsHighCount.setStatus('current')
jdbcConnectionPoolRuntimeConnectionsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeConnectionsTotalCount.setStatus('current')
jdbcConnectionPoolRuntimeMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeMaxCapacity.setStatus('current')
jdbcConnectionPoolRuntimeActiveConnectionsAverageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeActiveConnectionsAverageCount.setStatus('current')
jdbcConnectionPoolRuntimeConnectionDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeConnectionDelayTime.setStatus('current')
jdbcConnectionPoolRuntimeConnectionLeakProfileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeConnectionLeakProfileCount.setStatus('current')
jdbcConnectionPoolRuntimeCurrCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeCurrCapacity.setStatus('current')
jdbcConnectionPoolRuntimeFailuresToReconnectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeFailuresToReconnectCount.setStatus('current')
jdbcConnectionPoolRuntimeHighestNumAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeHighestNumAvailable.setStatus('current')
jdbcConnectionPoolRuntimeHighestNumUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeHighestNumUnavailable.setStatus('current')
jdbcConnectionPoolRuntimeLeakedConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeLeakedConnectionCount.setStatus('current')
jdbcConnectionPoolRuntimeNumAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeNumAvailable.setStatus('current')
jdbcConnectionPoolRuntimeNumUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeNumUnavailable.setStatus('current')
jdbcConnectionPoolRuntimeStatementProfileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeStatementProfileCount.setStatus('current')
jdbcConnectionPoolRuntimeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 72), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeEnabled.setStatus('current')
jdbcConnectionPoolRuntimePoolState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimePoolState.setStatus('current')
jdbcConnectionPoolRuntimeModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 74), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeModuleId.setStatus('current')
jdbcConnectionPoolRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 75), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeState.setStatus('current')
jdbcConnectionPoolRuntimeDeploymentState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 190, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcConnectionPoolRuntimeDeploymentState.setStatus('current')
jdbcDataSourceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 191), )
if mibBuilder.loadTexts: jdbcDataSourceRuntimeTable.setStatus('current')
jdbcDataSourceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 191, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jdbcDataSourceRuntimeIndex"))
if mibBuilder.loadTexts: jdbcDataSourceRuntimeEntry.setStatus('current')
jdbcDataSourceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeIndex.setStatus('current')
jdbcDataSourceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeObjectName.setStatus('current')
jdbcDataSourceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeType.setStatus('current')
jdbcDataSourceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeName.setStatus('current')
jdbcDataSourceRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeParent.setStatus('current')
jdbcDataSourceRuntimeLeakedConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeLeakedConnectionCount.setStatus('current')
jdbcDataSourceRuntimeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeEnabled.setStatus('current')
jdbcDataSourceRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeState.setStatus('current')
jdbcDataSourceRuntimeFailuresToReconnectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeFailuresToReconnectCount.setStatus('current')
jdbcDataSourceRuntimeConnectionDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeConnectionDelayTime.setStatus('current')
jdbcDataSourceRuntimePrepStmtCacheAccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimePrepStmtCacheAccessCount.setStatus('current')
jdbcDataSourceRuntimePrepStmtCacheAddCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimePrepStmtCacheAddCount.setStatus('current')
jdbcDataSourceRuntimePrepStmtCacheDeleteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimePrepStmtCacheDeleteCount.setStatus('current')
jdbcDataSourceRuntimePrepStmtCacheCurrentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimePrepStmtCacheCurrentSize.setStatus('current')
jdbcDataSourceRuntimePrepStmtCacheHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimePrepStmtCacheHitCount.setStatus('current')
jdbcDataSourceRuntimePrepStmtCacheMissCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimePrepStmtCacheMissCount.setStatus('current')
jdbcDataSourceRuntimeActiveConnectionsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeActiveConnectionsCurrentCount.setStatus('current')
jdbcDataSourceRuntimeWaitingForConnectionCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeWaitingForConnectionCurrentCount.setStatus('current')
jdbcDataSourceRuntimeVersionJDBCDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeVersionJDBCDriver.setStatus('current')
jdbcDataSourceRuntimeActiveConnectionsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeActiveConnectionsHighCount.setStatus('current')
jdbcDataSourceRuntimeActiveConnectionsAverageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeActiveConnectionsAverageCount.setStatus('current')
jdbcDataSourceRuntimeReserveRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeReserveRequestCount.setStatus('current')
jdbcDataSourceRuntimeFailedReserveRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeFailedReserveRequestCount.setStatus('current')
jdbcDataSourceRuntimeWaitingForConnectionHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeWaitingForConnectionHighCount.setStatus('current')
jdbcDataSourceRuntimeWaitingForConnectionTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeWaitingForConnectionTotal.setStatus('current')
jdbcDataSourceRuntimeWaitingForConnectionSuccessTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeWaitingForConnectionSuccessTotal.setStatus('current')
jdbcDataSourceRuntimeWaitingForConnectionFailureTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeWaitingForConnectionFailureTotal.setStatus('current')
jdbcDataSourceRuntimeWaitSecondsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeWaitSecondsHighCount.setStatus('current')
jdbcDataSourceRuntimeConnectionsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 140), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeConnectionsTotalCount.setStatus('current')
jdbcDataSourceRuntimeCurrCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 145), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeCurrCapacity.setStatus('current')
jdbcDataSourceRuntimeCurrCapacityHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 150), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeCurrCapacityHighCount.setStatus('current')
jdbcDataSourceRuntimeNumAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 155), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeNumAvailable.setStatus('current')
jdbcDataSourceRuntimeHighestNumAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeHighestNumAvailable.setStatus('current')
jdbcDataSourceRuntimeNumUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 165), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeNumUnavailable.setStatus('current')
jdbcDataSourceRuntimeHighestNumUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 170), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeHighestNumUnavailable.setStatus('current')
jdbcDataSourceRuntimeModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 171), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeModuleId.setStatus('current')
jdbcDataSourceRuntimeDeploymentState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 172), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeDeploymentState.setStatus('current')
jdbcDataSourceRuntimeDatabaseProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 173), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeDatabaseProductName.setStatus('current')
jdbcDataSourceRuntimeDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 174), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeDriverVersion.setStatus('current')
jdbcDataSourceRuntimeDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 175), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeDriverName.setStatus('current')
jdbcDataSourceRuntimeDatabaseProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 191, 1, 176), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceRuntimeDatabaseProductVersion.setStatus('current')
jmsConnectionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 200), )
if mibBuilder.loadTexts: jmsConnectionRuntimeTable.setStatus('current')
jmsConnectionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 200, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsConnectionRuntimeIndex"))
if mibBuilder.loadTexts: jmsConnectionRuntimeEntry.setStatus('current')
jmsConnectionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeIndex.setStatus('current')
jmsConnectionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeObjectName.setStatus('current')
jmsConnectionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeType.setStatus('current')
jmsConnectionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeName.setStatus('current')
jmsConnectionRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeParent.setStatus('current')
jmsConnectionRuntimeClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeClientID.setStatus('current')
jmsConnectionRuntimeSessionsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeSessionsCurrentCount.setStatus('current')
jmsConnectionRuntimeSessionsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeSessionsHighCount.setStatus('current')
jmsConnectionRuntimeSessionsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeSessionsTotalCount.setStatus('current')
jmsConnectionRuntimeHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeHostAddress.setStatus('current')
jmsConnectionRuntimeClientIDPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 200, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionRuntimeClientIDPolicy.setStatus('current')
jmsConsumerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 210), )
if mibBuilder.loadTexts: jmsConsumerRuntimeTable.setStatus('current')
jmsConsumerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 210, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsConsumerRuntimeIndex"))
if mibBuilder.loadTexts: jmsConsumerRuntimeEntry.setStatus('current')
jmsConsumerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeIndex.setStatus('current')
jmsConsumerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeObjectName.setStatus('current')
jmsConsumerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeType.setStatus('current')
jmsConsumerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeName.setStatus('current')
jmsConsumerRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeParent.setStatus('current')
jmsConsumerRuntimeMessagesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeMessagesPendingCount.setStatus('current')
jmsConsumerRuntimeMessagesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeMessagesReceivedCount.setStatus('current')
jmsConsumerRuntimeBytesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeBytesPendingCount.setStatus('current')
jmsConsumerRuntimeBytesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeBytesReceivedCount.setStatus('current')
jmsConsumerRuntimeDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeDestinationName.setStatus('current')
jmsConsumerRuntimeSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeSelector.setStatus('current')
jmsConsumerRuntimeDurable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeDurable.setStatus('current')
jmsConsumerRuntimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeActive.setStatus('current')
jmsConsumerRuntimeMemberDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 57), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeMemberDestinationName.setStatus('current')
jmsConsumerRuntimeSubscriptionSharingPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 210, 1, 58), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConsumerRuntimeSubscriptionSharingPolicy.setStatus('current')
jmsDestinationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 220), )
if mibBuilder.loadTexts: jmsDestinationRuntimeTable.setStatus('current')
jmsDestinationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 220, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsDestinationRuntimeIndex"))
if mibBuilder.loadTexts: jmsDestinationRuntimeEntry.setStatus('current')
jmsDestinationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeIndex.setStatus('current')
jmsDestinationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeObjectName.setStatus('current')
jmsDestinationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeType.setStatus('current')
jmsDestinationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeName.setStatus('current')
jmsDestinationRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeParent.setStatus('current')
jmsDestinationRuntimeConsumersCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeConsumersCurrentCount.setStatus('current')
jmsDestinationRuntimeConsumersHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeConsumersHighCount.setStatus('current')
jmsDestinationRuntimeConsumersTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeConsumersTotalCount.setStatus('current')
jmsDestinationRuntimeMessagesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeMessagesCurrentCount.setStatus('current')
jmsDestinationRuntimeMessagesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeMessagesPendingCount.setStatus('current')
jmsDestinationRuntimeMessagesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeMessagesHighCount.setStatus('current')
jmsDestinationRuntimeMessagesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeMessagesReceivedCount.setStatus('current')
jmsDestinationRuntimeMessagesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeMessagesThresholdTime.setStatus('current')
jmsDestinationRuntimeBytesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeBytesCurrentCount.setStatus('current')
jmsDestinationRuntimeBytesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeBytesPendingCount.setStatus('current')
jmsDestinationRuntimeBytesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeBytesHighCount.setStatus('current')
jmsDestinationRuntimeBytesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeBytesReceivedCount.setStatus('current')
jmsDestinationRuntimeBytesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeBytesThresholdTime.setStatus('current')
jmsDestinationRuntimeProductionPaused = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 91), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeProductionPaused.setStatus('current')
jmsDestinationRuntimeInsertionPaused = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 92), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeInsertionPaused.setStatus('current')
jmsDestinationRuntimeConsumptionPausedState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 93), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeConsumptionPausedState.setStatus('current')
jmsDestinationRuntimeConsumptionPaused = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 94), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeConsumptionPaused.setStatus('current')
jmsDestinationRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 95), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeState.setStatus('current')
jmsDestinationRuntimeInsertionPausedState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 96), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeInsertionPausedState.setStatus('current')
jmsDestinationRuntimeDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 97), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeDestinationType.setStatus('current')
jmsDestinationRuntimeProductionPausedState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 98), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeProductionPausedState.setStatus('current')
jmsDestinationRuntimeMessagesDeletedCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeMessagesDeletedCurrentCount.setStatus('current')
jmsDestinationRuntimePaused = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 100), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimePaused.setStatus('current')
jmsDestinationRuntimeMessagesMovedCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 220, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationRuntimeMessagesMovedCurrentCount.setStatus('current')
jmsProducerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 230), )
if mibBuilder.loadTexts: jmsProducerRuntimeTable.setStatus('current')
jmsProducerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 230, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsProducerRuntimeIndex"))
if mibBuilder.loadTexts: jmsProducerRuntimeEntry.setStatus('current')
jmsProducerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 230, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsProducerRuntimeIndex.setStatus('current')
jmsProducerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 230, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsProducerRuntimeObjectName.setStatus('current')
jmsProducerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 230, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsProducerRuntimeType.setStatus('current')
jmsProducerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 230, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsProducerRuntimeName.setStatus('current')
jmsProducerRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 230, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsProducerRuntimeParent.setStatus('current')
jmsProducerRuntimeMessagesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 230, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsProducerRuntimeMessagesPendingCount.setStatus('current')
jmsProducerRuntimeMessagesSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 230, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsProducerRuntimeMessagesSentCount.setStatus('current')
jmsProducerRuntimeBytesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 230, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsProducerRuntimeBytesPendingCount.setStatus('current')
jmsProducerRuntimeBytesSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 230, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsProducerRuntimeBytesSentCount.setStatus('current')
jmsPooledConnectionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 231), )
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeTable.setStatus('current')
jmsPooledConnectionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 231, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsPooledConnectionRuntimeIndex"))
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeEntry.setStatus('current')
jmsPooledConnectionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeIndex.setStatus('current')
jmsPooledConnectionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeObjectName.setStatus('current')
jmsPooledConnectionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeType.setStatus('current')
jmsPooledConnectionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeName.setStatus('current')
jmsPooledConnectionRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeParent.setStatus('current')
jmsPooledConnectionRuntimeAverageReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeAverageReserved.setStatus('current')
jmsPooledConnectionRuntimeCreationDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeCreationDelayTime.setStatus('current')
jmsPooledConnectionRuntimeCurrCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeCurrCapacity.setStatus('current')
jmsPooledConnectionRuntimeHighestNumAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeHighestNumAvailable.setStatus('current')
jmsPooledConnectionRuntimeHighestNumReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeHighestNumReserved.setStatus('current')
jmsPooledConnectionRuntimeNumAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeNumAvailable.setStatus('current')
jmsPooledConnectionRuntimeHighestNumWaiters = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeHighestNumWaiters.setStatus('current')
jmsPooledConnectionRuntimeHighestWaitSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeHighestWaitSeconds.setStatus('current')
jmsPooledConnectionRuntimeMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeMaxCapacity.setStatus('current')
jmsPooledConnectionRuntimeNumConnectionObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeNumConnectionObjects.setStatus('current')
jmsPooledConnectionRuntimeNumFailuresToRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeNumFailuresToRefresh.setStatus('current')
jmsPooledConnectionRuntimeNumLeaked = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeNumLeaked.setStatus('current')
jmsPooledConnectionRuntimeNumReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeNumReserved.setStatus('current')
jmsPooledConnectionRuntimeNumUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeNumUnavailable.setStatus('current')
jmsPooledConnectionRuntimeNumWaiters = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeNumWaiters.setStatus('current')
jmsPooledConnectionRuntimeTotalNumAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeTotalNumAllocated.setStatus('current')
jmsPooledConnectionRuntimeTotalNumDestroyed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeTotalNumDestroyed.setStatus('current')
jmsPooledConnectionRuntimeHighestNumUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 231, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsPooledConnectionRuntimeHighestNumUnavailable.setStatus('current')
jmsRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 240), )
if mibBuilder.loadTexts: jmsRuntimeTable.setStatus('current')
jmsRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 240, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsRuntimeIndex"))
if mibBuilder.loadTexts: jmsRuntimeEntry.setStatus('current')
jmsRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeIndex.setStatus('current')
jmsRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeObjectName.setStatus('current')
jmsRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeType.setStatus('current')
jmsRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeName.setStatus('current')
jmsRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeParent.setStatus('current')
jmsRuntimeConnectionsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeConnectionsCurrentCount.setStatus('current')
jmsRuntimeConnectionsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeConnectionsHighCount.setStatus('current')
jmsRuntimeConnectionsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeConnectionsTotalCount.setStatus('current')
jmsRuntimeJMSServersCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeJMSServersCurrentCount.setStatus('current')
jmsRuntimeJMSServersHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeJMSServersHighCount.setStatus('current')
jmsRuntimeJMSServersTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 240, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRuntimeJMSServersTotalCount.setStatus('current')
jmsServerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 250), )
if mibBuilder.loadTexts: jmsServerRuntimeTable.setStatus('current')
jmsServerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 250, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsServerRuntimeIndex"))
if mibBuilder.loadTexts: jmsServerRuntimeEntry.setStatus('current')
jmsServerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeIndex.setStatus('current')
jmsServerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeObjectName.setStatus('current')
jmsServerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeType.setStatus('current')
jmsServerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeName.setStatus('current')
jmsServerRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeParent.setStatus('current')
jmsServerRuntimeSessionPoolsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeSessionPoolsCurrentCount.setStatus('current')
jmsServerRuntimeSessionPoolsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeSessionPoolsHighCount.setStatus('current')
jmsServerRuntimeSessionPoolsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeSessionPoolsTotalCount.setStatus('current')
jmsServerRuntimeDestinationsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeDestinationsCurrentCount.setStatus('current')
jmsServerRuntimeDestinationsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeDestinationsHighCount.setStatus('current')
jmsServerRuntimeDestinationsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeDestinationsTotalCount.setStatus('current')
jmsServerRuntimeMessagesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeMessagesCurrentCount.setStatus('current')
jmsServerRuntimeMessagesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeMessagesPendingCount.setStatus('current')
jmsServerRuntimeMessagesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeMessagesHighCount.setStatus('current')
jmsServerRuntimeMessagesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeMessagesReceivedCount.setStatus('current')
jmsServerRuntimeMessagesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeMessagesThresholdTime.setStatus('current')
jmsServerRuntimeBytesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeBytesCurrentCount.setStatus('current')
jmsServerRuntimeBytesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeBytesPendingCount.setStatus('current')
jmsServerRuntimeBytesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeBytesHighCount.setStatus('current')
jmsServerRuntimeBytesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeBytesReceivedCount.setStatus('current')
jmsServerRuntimeBytesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeBytesThresholdTime.setStatus('current')
jmsServerRuntimeMessagesPagedInTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeMessagesPagedInTotalCount.setStatus('current')
jmsServerRuntimeProductionPaused = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 112), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeProductionPaused.setStatus('current')
jmsServerRuntimeInsertionPaused = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 113), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeInsertionPaused.setStatus('current')
jmsServerRuntimeConsumptionPausedState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 114), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeConsumptionPausedState.setStatus('current')
jmsServerRuntimeConsumptionPaused = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 115), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeConsumptionPaused.setStatus('current')
jmsServerRuntimeBytesPageableCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeBytesPageableCurrentCount.setStatus('current')
jmsServerRuntimeMessagesPagedOutTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 117), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeMessagesPagedOutTotalCount.setStatus('current')
jmsServerRuntimeInsertionPausedState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 118), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeInsertionPausedState.setStatus('current')
jmsServerRuntimeMessagesPageableCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeMessagesPageableCurrentCount.setStatus('current')
jmsServerRuntimeProductionPausedState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 120), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeProductionPausedState.setStatus('current')
jmsServerRuntimeBytesPagedOutTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeBytesPagedOutTotalCount.setStatus('current')
jmsServerRuntimeBytesPagedInTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeBytesPagedInTotalCount.setStatus('current')
jmsServerRuntimeTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 123), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimeTransactions.setStatus('current')
jmsServerRuntimePendingTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 124), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimePendingTransactions.setStatus('current')
jmsServerRuntimePagingAllocatedWindowBufferBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimePagingAllocatedWindowBufferBytes.setStatus('current')
jmsServerRuntimePagingPhysicalWriteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimePagingPhysicalWriteCount.setStatus('current')
jmsServerRuntimePagingAllocatedIoBufferBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 250, 1, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerRuntimePagingAllocatedIoBufferBytes.setStatus('current')
jmsSessionPoolRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 260), )
if mibBuilder.loadTexts: jmsSessionPoolRuntimeTable.setStatus('current')
jmsSessionPoolRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 260, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsSessionPoolRuntimeIndex"))
if mibBuilder.loadTexts: jmsSessionPoolRuntimeEntry.setStatus('current')
jmsSessionPoolRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 260, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolRuntimeIndex.setStatus('current')
jmsSessionPoolRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 260, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolRuntimeObjectName.setStatus('current')
jmsSessionPoolRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 260, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolRuntimeType.setStatus('current')
jmsSessionPoolRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 260, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolRuntimeName.setStatus('current')
jmsSessionPoolRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 260, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolRuntimeParent.setStatus('current')
jmsSessionPoolRuntimeConnectionConsumersCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 260, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolRuntimeConnectionConsumersCurrentCount.setStatus('current')
jmsSessionPoolRuntimeConnectionConsumersHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 260, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolRuntimeConnectionConsumersHighCount.setStatus('current')
jmsSessionPoolRuntimeConnectionConsumersTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 260, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolRuntimeConnectionConsumersTotalCount.setStatus('current')
jmsSessionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 270), )
if mibBuilder.loadTexts: jmsSessionRuntimeTable.setStatus('current')
jmsSessionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 270, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsSessionRuntimeIndex"))
if mibBuilder.loadTexts: jmsSessionRuntimeEntry.setStatus('current')
jmsSessionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeIndex.setStatus('current')
jmsSessionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeObjectName.setStatus('current')
jmsSessionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeType.setStatus('current')
jmsSessionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeName.setStatus('current')
jmsSessionRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeParent.setStatus('current')
jmsSessionRuntimeConsumersCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeConsumersCurrentCount.setStatus('current')
jmsSessionRuntimeConsumersHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeConsumersHighCount.setStatus('current')
jmsSessionRuntimeConsumersTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeConsumersTotalCount.setStatus('current')
jmsSessionRuntimeProducersCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeProducersCurrentCount.setStatus('current')
jmsSessionRuntimeProducersHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeProducersHighCount.setStatus('current')
jmsSessionRuntimeProducersTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeProducersTotalCount.setStatus('current')
jmsSessionRuntimeTransacted = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeTransacted.setStatus('current')
jmsSessionRuntimeAcknowledgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeAcknowledgeMode.setStatus('current')
jmsSessionRuntimeMessagesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeMessagesPendingCount.setStatus('current')
jmsSessionRuntimeMessagesSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeMessagesSentCount.setStatus('current')
jmsSessionRuntimeMessagesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeMessagesReceivedCount.setStatus('current')
jmsSessionRuntimeBytesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeBytesPendingCount.setStatus('current')
jmsSessionRuntimeBytesSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeBytesSentCount.setStatus('current')
jmsSessionRuntimeBytesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 270, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionRuntimeBytesReceivedCount.setStatus('current')
jmsComponentRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 271), )
if mibBuilder.loadTexts: jmsComponentRuntimeTable.setStatus('current')
jmsComponentRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 271, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsComponentRuntimeIndex"))
if mibBuilder.loadTexts: jmsComponentRuntimeEntry.setStatus('current')
jmsComponentRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 271, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsComponentRuntimeIndex.setStatus('current')
jmsComponentRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 271, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsComponentRuntimeObjectName.setStatus('current')
jmsComponentRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 271, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsComponentRuntimeType.setStatus('current')
jmsComponentRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 271, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsComponentRuntimeName.setStatus('current')
jmsComponentRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 271, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsComponentRuntimeParent.setStatus('current')
jmsComponentRuntimeModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 271, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsComponentRuntimeModuleId.setStatus('current')
jmsComponentRuntimeDeploymentState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 271, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsComponentRuntimeDeploymentState.setStatus('current')
joltConnectionPoolRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 280), )
if mibBuilder.loadTexts: joltConnectionPoolRuntimeTable.setStatus('current')
joltConnectionPoolRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 280, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "joltConnectionPoolRuntimeIndex"))
if mibBuilder.loadTexts: joltConnectionPoolRuntimeEntry.setStatus('current')
joltConnectionPoolRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 280, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolRuntimeIndex.setStatus('current')
joltConnectionPoolRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 280, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolRuntimeObjectName.setStatus('current')
joltConnectionPoolRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 280, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolRuntimeType.setStatus('current')
joltConnectionPoolRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 280, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolRuntimeName.setStatus('current')
joltConnectionPoolRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 280, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolRuntimeParent.setStatus('current')
joltConnectionPoolRuntimePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 280, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolRuntimePoolName.setStatus('current')
joltConnectionPoolRuntimeMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 280, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolRuntimeMaxCapacity.setStatus('current')
joltConnectionPoolRuntimePoolState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 280, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolRuntimePoolState.setStatus('current')
joltConnectionPoolRuntimeSecurityContextPropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 280, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolRuntimeSecurityContextPropagation.setStatus('current')
joltConnectionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 290), )
if mibBuilder.loadTexts: joltConnectionRuntimeTable.setStatus('current')
joltConnectionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 290, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "joltConnectionRuntimeIndex"))
if mibBuilder.loadTexts: joltConnectionRuntimeEntry.setStatus('current')
joltConnectionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeIndex.setStatus('current')
joltConnectionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeObjectName.setStatus('current')
joltConnectionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeType.setStatus('current')
joltConnectionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeName.setStatus('current')
joltConnectionRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeParent.setStatus('current')
joltConnectionRuntimeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeAddress.setStatus('current')
joltConnectionRuntimeLastAccessTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeLastAccessTime.setStatus('current')
joltConnectionRuntimeAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeAlive.setStatus('current')
joltConnectionRuntimeRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeRequestCount.setStatus('current')
joltConnectionRuntimePendingRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimePendingRequestCount.setStatus('current')
joltConnectionRuntimeErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeErrorCount.setStatus('current')
joltConnectionRuntimeInTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 290, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionRuntimeInTransaction.setStatus('current')
joltConnectionServiceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 300), )
if mibBuilder.loadTexts: joltConnectionServiceRuntimeTable.setStatus('current')
joltConnectionServiceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 300, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "joltConnectionServiceRuntimeIndex"))
if mibBuilder.loadTexts: joltConnectionServiceRuntimeEntry.setStatus('current')
joltConnectionServiceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 300, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionServiceRuntimeIndex.setStatus('current')
joltConnectionServiceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 300, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionServiceRuntimeObjectName.setStatus('current')
joltConnectionServiceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 300, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionServiceRuntimeType.setStatus('current')
joltConnectionServiceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 300, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionServiceRuntimeName.setStatus('current')
joltConnectionServiceRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 300, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionServiceRuntimeParent.setStatus('current')
joltConnectionServiceRuntimeConnectionPoolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 300, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionServiceRuntimeConnectionPoolCount.setStatus('current')
jrockitRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 302), )
if mibBuilder.loadTexts: jrockitRuntimeTable.setStatus('current')
jrockitRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 302, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jrockitRuntimeIndex"))
if mibBuilder.loadTexts: jrockitRuntimeEntry.setStatus('current')
jrockitRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeIndex.setStatus('current')
jrockitRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeObjectName.setStatus('current')
jrockitRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeType.setStatus('current')
jrockitRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeName.setStatus('current')
jrockitRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeParent.setStatus('current')
jrockitRuntimeAllProcessorsAverageLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeAllProcessorsAverageLoad.setStatus('current')
jrockitRuntimeFreeHeap = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeFreeHeap.setStatus('current')
jrockitRuntimeFreePhysicalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeFreePhysicalMemory.setStatus('current')
jrockitRuntimeGcAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeGcAlgorithm.setStatus('current')
jrockitRuntimeJVMDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeJVMDescription.setStatus('current')
jrockitRuntimeJvmProcessorLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeJvmProcessorLoad.setStatus('current')
jrockitRuntimeLastGCEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeLastGCEnd.setStatus('current')
jrockitRuntimeLastGCStart = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeLastGCStart.setStatus('current')
jrockitRuntimeNumberOfDaemonThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeNumberOfDaemonThreads.setStatus('current')
jrockitRuntimeNumberOfProcessors = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeNumberOfProcessors.setStatus('current')
jrockitRuntimeThreadStackDump = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeThreadStackDump.setStatus('current')
jrockitRuntimeTotalGarbageCollectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeTotalGarbageCollectionCount.setStatus('current')
jrockitRuntimeTotalGarbageCollectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeTotalGarbageCollectionTime.setStatus('current')
jrockitRuntimeTotalHeap = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeTotalHeap.setStatus('current')
jrockitRuntimeTotalNumberOfThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeTotalNumberOfThreads.setStatus('current')
jrockitRuntimeTotalNurserySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeTotalNurserySize.setStatus('current')
jrockitRuntimeTotalPhysicalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeTotalPhysicalMemory.setStatus('current')
jrockitRuntimeUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeUptime.setStatus('current')
jrockitRuntimeUsedHeap = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeUsedHeap.setStatus('current')
jrockitRuntimeUsedPhysicalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeUsedPhysicalMemory.setStatus('current')
jrockitRuntimeVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeVendor.setStatus('current')
jrockitRuntimeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeVersion.setStatus('current')
jrockitRuntimeConcurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeConcurrent.setStatus('current')
jrockitRuntimeGCHandlesCompaction = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeGCHandlesCompaction.setStatus('current')
jrockitRuntimeGenerational = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeGenerational.setStatus('current')
jrockitRuntimeIncremental = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeIncremental.setStatus('current')
jrockitRuntimeParallel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeParallel.setStatus('current')
jrockitRuntimeJavaVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeJavaVendor.setStatus('current')
jrockitRuntimeHeapSizeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeHeapSizeCurrent.setStatus('current')
jrockitRuntimeHeapFreePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeHeapFreePercent.setStatus('current')
jrockitRuntimeHeapSizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeHeapSizeMax.setStatus('current')
jrockitRuntimeOSName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeOSName.setStatus('current')
jrockitRuntimeJavaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 53), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeJavaVersion.setStatus('current')
jrockitRuntimeOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeOSVersion.setStatus('current')
jrockitRuntimeHeapFreeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeHeapFreeCurrent.setStatus('current')
jrockitRuntimeJavaVMVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 302, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrockitRuntimeJavaVMVendor.setStatus('current')
jtaRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 310), )
if mibBuilder.loadTexts: jtaRuntimeTable.setStatus('current')
jtaRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 310, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jtaRuntimeIndex"))
if mibBuilder.loadTexts: jtaRuntimeEntry.setStatus('current')
jtaRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeIndex.setStatus('current')
jtaRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeObjectName.setStatus('current')
jtaRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeType.setStatus('current')
jtaRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeName.setStatus('current')
jtaRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeParent.setStatus('current')
jtaRuntimeTransactionTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionTotalCount.setStatus('current')
jtaRuntimeTransactionCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionCommittedTotalCount.setStatus('current')
jtaRuntimeTransactionRolledBackTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionRolledBackTotalCount.setStatus('current')
jtaRuntimeTransactionHeuristicsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionHeuristicsTotalCount.setStatus('current')
jtaRuntimeTransactionRolledBackResourceTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionRolledBackResourceTotalCount.setStatus('current')
jtaRuntimeTransactionRolledBackAppTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionRolledBackAppTotalCount.setStatus('current')
jtaRuntimeTransactionRolledBackSystemTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionRolledBackSystemTotalCount.setStatus('current')
jtaRuntimeSecondsActiveTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeSecondsActiveTotalCount.setStatus('current')
jtaRuntimeTransactionRolledBackTimeoutTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionRolledBackTimeoutTotalCount.setStatus('current')
jtaRuntimeActiveTransactionsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeActiveTransactionsTotalCount.setStatus('current')
jtaRuntimeTransactionAbandonedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionAbandonedTotalCount.setStatus('current')
jtaRuntimeRegisteredNonXAResourceNames = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 78), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeRegisteredNonXAResourceNames.setStatus('current')
jtaRuntimeRegisteredResourceNames = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 79), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeRegisteredResourceNames.setStatus('current')
jtaRuntimeTransactionNoResourcesCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionNoResourcesCommittedTotalCount.setStatus('current')
jtaRuntimeTransactionReadOnlyOnePhaseCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionReadOnlyOnePhaseCommittedTotalCount.setStatus('current')
jtaRuntimeTransactionTwoPhaseCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionTwoPhaseCommittedTotalCount.setStatus('current')
jtaRuntimeTransactionLLRCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionLLRCommittedTotalCount.setStatus('current')
jtaRuntimeTransactionOneResourceOnePhaseCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 310, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRuntimeTransactionOneResourceOnePhaseCommittedTotalCount.setStatus('current')
jtaRecoveryRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 311), )
if mibBuilder.loadTexts: jtaRecoveryRuntimeTable.setStatus('current')
jtaRecoveryRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 311, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jtaRecoveryRuntimeIndex"))
if mibBuilder.loadTexts: jtaRecoveryRuntimeEntry.setStatus('current')
jtaRecoveryRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 311, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRecoveryRuntimeIndex.setStatus('current')
jtaRecoveryRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 311, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRecoveryRuntimeObjectName.setStatus('current')
jtaRecoveryRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 311, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRecoveryRuntimeType.setStatus('current')
jtaRecoveryRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 311, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRecoveryRuntimeName.setStatus('current')
jtaRecoveryRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 311, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRecoveryRuntimeParent.setStatus('current')
jtaRecoveryRuntimeInitialRecoveredTransactionTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 311, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRecoveryRuntimeInitialRecoveredTransactionTotalCount.setStatus('current')
jtaRecoveryRuntimeRecoveredTransactionCompletionPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 311, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRecoveryRuntimeRecoveredTransactionCompletionPercent.setStatus('current')
jtaRecoveryRuntimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 311, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaRecoveryRuntimeActive.setStatus('current')
libraryRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 320), )
if mibBuilder.loadTexts: libraryRuntimeTable.setStatus('current')
libraryRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 320, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "libraryRuntimeIndex"))
if mibBuilder.loadTexts: libraryRuntimeEntry.setStatus('current')
libraryRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 320, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: libraryRuntimeIndex.setStatus('current')
libraryRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 320, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: libraryRuntimeObjectName.setStatus('current')
libraryRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 320, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: libraryRuntimeType.setStatus('current')
libraryRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 320, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: libraryRuntimeName.setStatus('current')
libraryRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 320, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: libraryRuntimeParent.setStatus('current')
libraryRuntimeLibraryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 320, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: libraryRuntimeLibraryName.setStatus('current')
libraryRuntimeSpecificationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 320, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: libraryRuntimeSpecificationVersion.setStatus('current')
libraryRuntimeImplementationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 320, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: libraryRuntimeImplementationVersion.setStatus('current')
libraryRuntimeReferenced = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 320, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: libraryRuntimeReferenced.setStatus('current')
libraryRuntimeLibraryIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 320, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: libraryRuntimeLibraryIdentifier.setStatus('current')
persistentStoreRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 330), )
if mibBuilder.loadTexts: persistentStoreRuntimeTable.setStatus('current')
persistentStoreRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 330, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "persistentStoreRuntimeIndex"))
if mibBuilder.loadTexts: persistentStoreRuntimeEntry.setStatus('current')
persistentStoreRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeIndex.setStatus('current')
persistentStoreRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeObjectName.setStatus('current')
persistentStoreRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeType.setStatus('current')
persistentStoreRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeName.setStatus('current')
persistentStoreRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeParent.setStatus('current')
persistentStoreRuntimeCreateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeCreateCount.setStatus('current')
persistentStoreRuntimeReadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeReadCount.setStatus('current')
persistentStoreRuntimeUpdateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeUpdateCount.setStatus('current')
persistentStoreRuntimeDeleteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeDeleteCount.setStatus('current')
persistentStoreRuntimeObjectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeObjectCount.setStatus('current')
persistentStoreRuntimePhysicalWriteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimePhysicalWriteCount.setStatus('current')
persistentStoreRuntimeAllocatedIoBufferBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeAllocatedIoBufferBytes.setStatus('current')
persistentStoreRuntimeAllocatedWindowBufferBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 330, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreRuntimeAllocatedWindowBufferBytes.setStatus('current')
persistentStoreConnectionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 331), )
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeTable.setStatus('current')
persistentStoreConnectionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 331, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "persistentStoreConnectionRuntimeIndex"))
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeEntry.setStatus('current')
persistentStoreConnectionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 331, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeIndex.setStatus('current')
persistentStoreConnectionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 331, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeObjectName.setStatus('current')
persistentStoreConnectionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 331, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeType.setStatus('current')
persistentStoreConnectionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 331, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeName.setStatus('current')
persistentStoreConnectionRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 331, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeParent.setStatus('current')
persistentStoreConnectionRuntimeCreateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 331, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeCreateCount.setStatus('current')
persistentStoreConnectionRuntimeReadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 331, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeReadCount.setStatus('current')
persistentStoreConnectionRuntimeUpdateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 331, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeUpdateCount.setStatus('current')
persistentStoreConnectionRuntimeDeleteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 331, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeDeleteCount.setStatus('current')
persistentStoreConnectionRuntimeObjectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 331, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: persistentStoreConnectionRuntimeObjectCount.setStatus('current')
jvmRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 340), )
if mibBuilder.loadTexts: jvmRuntimeTable.setStatus('current')
jvmRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 340, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jvmRuntimeIndex"))
if mibBuilder.loadTexts: jvmRuntimeEntry.setStatus('current')
jvmRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeIndex.setStatus('current')
jvmRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeObjectName.setStatus('current')
jvmRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeType.setStatus('current')
jvmRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeName.setStatus('current')
jvmRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeParent.setStatus('current')
jvmRuntimeHeapFreeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeHeapFreeCurrent.setStatus('current')
jvmRuntimeHeapSizeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeHeapSizeCurrent.setStatus('current')
jvmRuntimeJavaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeJavaVersion.setStatus('current')
jvmRuntimeJavaVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeJavaVendor.setStatus('current')
jvmRuntimeOSName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeOSName.setStatus('current')
jvmRuntimeOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeOSVersion.setStatus('current')
jvmRuntimeUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeUptime.setStatus('current')
jvmRuntimeHeapFreePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeHeapFreePercent.setStatus('current')
jvmRuntimeThreadStackDump = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 53), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeThreadStackDump.setStatus('current')
jvmRuntimeHeapSizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeHeapSizeMax.setStatus('current')
jvmRuntimeJavaVMVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 340, 1, 55), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jvmRuntimeJavaVMVendor.setStatus('current')
logBroadcasterRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 350), )
if mibBuilder.loadTexts: logBroadcasterRuntimeTable.setStatus('current')
logBroadcasterRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 350, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "logBroadcasterRuntimeIndex"))
if mibBuilder.loadTexts: logBroadcasterRuntimeEntry.setStatus('current')
logBroadcasterRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 350, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logBroadcasterRuntimeIndex.setStatus('current')
logBroadcasterRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 350, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logBroadcasterRuntimeObjectName.setStatus('current')
logBroadcasterRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 350, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logBroadcasterRuntimeType.setStatus('current')
logBroadcasterRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 350, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logBroadcasterRuntimeName.setStatus('current')
logBroadcasterRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 350, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logBroadcasterRuntimeParent.setStatus('current')
logBroadcasterRuntimeMessagesLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 350, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logBroadcasterRuntimeMessagesLogged.setStatus('current')
messageDrivenEJBRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 351), )
if mibBuilder.loadTexts: messageDrivenEJBRuntimeTable.setStatus('current')
messageDrivenEJBRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 351, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "messageDrivenEJBRuntimeIndex"))
if mibBuilder.loadTexts: messageDrivenEJBRuntimeEntry.setStatus('current')
messageDrivenEJBRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeIndex.setStatus('current')
messageDrivenEJBRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeObjectName.setStatus('current')
messageDrivenEJBRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeType.setStatus('current')
messageDrivenEJBRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeName.setStatus('current')
messageDrivenEJBRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeParent.setStatus('current')
messageDrivenEJBRuntimeJMSConnectionAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeJMSConnectionAlive.setStatus('current')
messageDrivenEJBRuntimeLastExceptionAsString = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeLastExceptionAsString.setStatus('current')
messageDrivenEJBRuntimeDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeDestination.setStatus('current')
messageDrivenEJBRuntimeMDBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeMDBStatus.setStatus('current')
messageDrivenEJBRuntimeEJBName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeEJBName.setStatus('current')
messageDrivenEJBRuntimeConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeConnectionStatus.setStatus('current')
messageDrivenEJBRuntimeSuspendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeSuspendCount.setStatus('current')
messageDrivenEJBRuntimeProcessedMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeProcessedMessageCount.setStatus('current')
messageDrivenEJBRuntimeJmsClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 351, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenEJBRuntimeJmsClientID.setStatus('current')
messagingBridgeRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 354), )
if mibBuilder.loadTexts: messagingBridgeRuntimeTable.setStatus('current')
messagingBridgeRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 354, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "messagingBridgeRuntimeIndex"))
if mibBuilder.loadTexts: messagingBridgeRuntimeEntry.setStatus('current')
messagingBridgeRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 354, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeRuntimeIndex.setStatus('current')
messagingBridgeRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 354, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeRuntimeObjectName.setStatus('current')
messagingBridgeRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 354, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeRuntimeType.setStatus('current')
messagingBridgeRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 354, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeRuntimeName.setStatus('current')
messagingBridgeRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 354, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeRuntimeParent.setStatus('current')
messagingBridgeRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 354, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeRuntimeState.setStatus('current')
messagingBridgeRuntimeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 354, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeRuntimeDescription.setStatus('current')
nonXAResourceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 356), )
if mibBuilder.loadTexts: nonXAResourceRuntimeTable.setStatus('current')
nonXAResourceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 356, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "nonXAResourceRuntimeIndex"))
if mibBuilder.loadTexts: nonXAResourceRuntimeEntry.setStatus('current')
nonXAResourceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 356, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonXAResourceRuntimeIndex.setStatus('current')
nonXAResourceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 356, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonXAResourceRuntimeObjectName.setStatus('current')
nonXAResourceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 356, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonXAResourceRuntimeType.setStatus('current')
nonXAResourceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 356, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonXAResourceRuntimeName.setStatus('current')
nonXAResourceRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 356, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonXAResourceRuntimeParent.setStatus('current')
nonXAResourceRuntimeTransactionTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 356, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonXAResourceRuntimeTransactionTotalCount.setStatus('current')
nonXAResourceRuntimeTransactionCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 356, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonXAResourceRuntimeTransactionCommittedTotalCount.setStatus('current')
nonXAResourceRuntimeTransactionRolledBackTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 356, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonXAResourceRuntimeTransactionRolledBackTotalCount.setStatus('current')
nonXAResourceRuntimeTransactionHeuristicsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 356, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonXAResourceRuntimeTransactionHeuristicsTotalCount.setStatus('current')
nonXAResourceRuntimeNonXAResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 356, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonXAResourceRuntimeNonXAResourceName.setStatus('current')
serverRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 360), )
if mibBuilder.loadTexts: serverRuntimeTable.setStatus('current')
serverRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 360, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serverRuntimeIndex"))
if mibBuilder.loadTexts: serverRuntimeEntry.setStatus('current')
serverRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeIndex.setStatus('current')
serverRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeObjectName.setStatus('current')
serverRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeType.setStatus('current')
serverRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeName.setStatus('current')
serverRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeParent.setStatus('current')
serverRuntimeActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeActivationTime.setStatus('current')
serverRuntimeListenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeListenAddress.setStatus('current')
serverRuntimeListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeListenPort.setStatus('current')
serverRuntimeSSLListenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeSSLListenAddress.setStatus('current')
serverRuntimeOpenSocketsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeOpenSocketsCurrentCount.setStatus('current')
serverRuntimeRestartsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeRestartsTotalCount.setStatus('current')
serverRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeState.setStatus('current')
serverRuntimeWeblogicVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeWeblogicVersion.setStatus('current')
serverRuntimeAdminServerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeAdminServerHost.setStatus('current')
serverRuntimeAdminServerListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeAdminServerListenPort.setStatus('current')
serverRuntimeAdministrationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeAdministrationPort.setStatus('current')
serverRuntimeSocketsOpenedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeSocketsOpenedTotalCount.setStatus('current')
serverRuntimeSSLListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeSSLListenPort.setStatus('current')
serverRuntimeAdministrationPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeAdministrationPortEnabled.setStatus('current')
serverRuntimeAdminServer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeAdminServer.setStatus('current')
serverRuntimeAdminServerListenPortSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeAdminServerListenPortSecure.setStatus('current')
serverRuntimeListenPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeListenPortEnabled.setStatus('current')
serverRuntimeSSLListenPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeSSLListenPortEnabled.setStatus('current')
serverRuntimeRestartRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 89), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeRestartRequired.setStatus('current')
serverRuntimeServerClasspath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 90), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeServerClasspath.setStatus('current')
serverRuntimeCurrentMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 91), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeCurrentMachine.setStatus('current')
serverRuntimeAdministrationURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 92), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeAdministrationURL.setStatus('current')
serverRuntimeDefaultURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 93), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeDefaultURL.setStatus('current')
serverRuntimeStateVal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeStateVal.setStatus('current')
serverRuntimeCurrentDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 95), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeCurrentDirectory.setStatus('current')
serverRuntimeWeblogicHome = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 96), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeWeblogicHome.setStatus('current')
serverRuntimeOracleHome = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 97), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeOracleHome.setStatus('current')
serverRuntimeMiddlewareHome = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 360, 1, 98), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRuntimeMiddlewareHome.setStatus('current')
serverLifeCycleRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 361), )
if mibBuilder.loadTexts: serverLifeCycleRuntimeTable.setStatus('current')
serverLifeCycleRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 361, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serverLifeCycleRuntimeIndex"))
if mibBuilder.loadTexts: serverLifeCycleRuntimeEntry.setStatus('current')
serverLifeCycleRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 361, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleRuntimeIndex.setStatus('current')
serverLifeCycleRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 361, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleRuntimeObjectName.setStatus('current')
serverLifeCycleRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 361, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleRuntimeType.setStatus('current')
serverLifeCycleRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 361, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleRuntimeName.setStatus('current')
serverLifeCycleRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 361, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleRuntimeParent.setStatus('current')
serverLifeCycleRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 361, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleRuntimeState.setStatus('current')
serverLifeCycleRuntimeNodeManagerRestartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 361, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleRuntimeNodeManagerRestartCount.setStatus('current')
serverLifeCycleRuntimeMiddlewareHome = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 361, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleRuntimeMiddlewareHome.setStatus('current')
serverLifeCycleRuntimeWeblogicHome = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 361, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleRuntimeWeblogicHome.setStatus('current')
manReplicationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 362), )
if mibBuilder.loadTexts: manReplicationRuntimeTable.setStatus('current')
manReplicationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 362, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "manReplicationRuntimeIndex"))
if mibBuilder.loadTexts: manReplicationRuntimeEntry.setStatus('current')
manReplicationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeIndex.setStatus('current')
manReplicationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeObjectName.setStatus('current')
manReplicationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeType.setStatus('current')
manReplicationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeName.setStatus('current')
manReplicationRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeParent.setStatus('current')
manReplicationRuntimeSecondaryServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeSecondaryServerName.setStatus('current')
manReplicationRuntimeSecondaryServerDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeSecondaryServerDetails.setStatus('current')
manReplicationRuntimePrimaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimePrimaryCount.setStatus('current')
manReplicationRuntimeSecondaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeSecondaryCount.setStatus('current')
manReplicationRuntimeRemoteClusterReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeRemoteClusterReachable.setStatus('current')
manReplicationRuntimeDetailedSecondariesDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeDetailedSecondariesDistribution.setStatus('current')
manReplicationRuntimeActiveServersInRemoteCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 362, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manReplicationRuntimeActiveServersInRemoteCluster.setStatus('current')
maxThreadsConstraintRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 363), )
if mibBuilder.loadTexts: maxThreadsConstraintRuntimeTable.setStatus('current')
maxThreadsConstraintRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 363, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "maxThreadsConstraintRuntimeIndex"))
if mibBuilder.loadTexts: maxThreadsConstraintRuntimeEntry.setStatus('current')
maxThreadsConstraintRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 363, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintRuntimeIndex.setStatus('current')
maxThreadsConstraintRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 363, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintRuntimeObjectName.setStatus('current')
maxThreadsConstraintRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 363, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintRuntimeType.setStatus('current')
maxThreadsConstraintRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 363, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintRuntimeName.setStatus('current')
maxThreadsConstraintRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 363, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintRuntimeParent.setStatus('current')
maxThreadsConstraintRuntimeExecutingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 363, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintRuntimeExecutingRequests.setStatus('current')
maxThreadsConstraintRuntimeDeferredRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 363, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintRuntimeDeferredRequests.setStatus('current')
minThreadsConstraintRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 364), )
if mibBuilder.loadTexts: minThreadsConstraintRuntimeTable.setStatus('current')
minThreadsConstraintRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 364, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "minThreadsConstraintRuntimeIndex"))
if mibBuilder.loadTexts: minThreadsConstraintRuntimeEntry.setStatus('current')
minThreadsConstraintRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeIndex.setStatus('current')
minThreadsConstraintRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeObjectName.setStatus('current')
minThreadsConstraintRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeType.setStatus('current')
minThreadsConstraintRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeName.setStatus('current')
minThreadsConstraintRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeParent.setStatus('current')
minThreadsConstraintRuntimeCompletedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeCompletedRequests.setStatus('current')
minThreadsConstraintRuntimePendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimePendingRequests.setStatus('current')
minThreadsConstraintRuntimeExecutingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeExecutingRequests.setStatus('current')
minThreadsConstraintRuntimeOutOfOrderExecutionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeOutOfOrderExecutionCount.setStatus('current')
minThreadsConstraintRuntimeMustRunCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeMustRunCount.setStatus('current')
minThreadsConstraintRuntimeMaxWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeMaxWaitTime.setStatus('current')
minThreadsConstraintRuntimeCurrentWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 364, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintRuntimeCurrentWaitTime.setStatus('current')
requestClassRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 365), )
if mibBuilder.loadTexts: requestClassRuntimeTable.setStatus('current')
requestClassRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 365, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "requestClassRuntimeIndex"))
if mibBuilder.loadTexts: requestClassRuntimeEntry.setStatus('current')
requestClassRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 365, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestClassRuntimeIndex.setStatus('current')
requestClassRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 365, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestClassRuntimeObjectName.setStatus('current')
requestClassRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 365, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestClassRuntimeType.setStatus('current')
requestClassRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 365, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestClassRuntimeName.setStatus('current')
requestClassRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 365, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestClassRuntimeParent.setStatus('current')
requestClassRuntimeCompletedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 365, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestClassRuntimeCompletedCount.setStatus('current')
requestClassRuntimeTotalThreadUse = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 365, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestClassRuntimeTotalThreadUse.setStatus('current')
requestClassRuntimePendingRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 365, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestClassRuntimePendingRequestCount.setStatus('current')
requestClassRuntimeVirtualTimeIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 365, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestClassRuntimeVirtualTimeIncrement.setStatus('current')
requestClassRuntimeRequestClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 365, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestClassRuntimeRequestClassType.setStatus('current')
serverChannelRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 366), )
if mibBuilder.loadTexts: serverChannelRuntimeTable.setStatus('current')
serverChannelRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 366, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serverChannelRuntimeIndex"))
if mibBuilder.loadTexts: serverChannelRuntimeEntry.setStatus('current')
serverChannelRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeIndex.setStatus('current')
serverChannelRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeObjectName.setStatus('current')
serverChannelRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeType.setStatus('current')
serverChannelRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeName.setStatus('current')
serverChannelRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeParent.setStatus('current')
serverChannelRuntimeBytesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeBytesReceivedCount.setStatus('current')
serverChannelRuntimeBytesSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeBytesSentCount.setStatus('current')
serverChannelRuntimeChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeChannelName.setStatus('current')
serverChannelRuntimeConnectionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeConnectionsCount.setStatus('current')
serverChannelRuntimeAcceptCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeAcceptCount.setStatus('current')
serverChannelRuntimeMessagesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeMessagesReceivedCount.setStatus('current')
serverChannelRuntimeMessagesSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimeMessagesSentCount.setStatus('current')
serverChannelRuntimePublicURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 366, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverChannelRuntimePublicURL.setStatus('current')
threadPoolRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 367), )
if mibBuilder.loadTexts: threadPoolRuntimeTable.setStatus('current')
threadPoolRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 367, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "threadPoolRuntimeIndex"))
if mibBuilder.loadTexts: threadPoolRuntimeEntry.setStatus('current')
threadPoolRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeIndex.setStatus('current')
threadPoolRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeObjectName.setStatus('current')
threadPoolRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeType.setStatus('current')
threadPoolRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeName.setStatus('current')
threadPoolRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeParent.setStatus('current')
threadPoolRuntimeExecuteThreadTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeExecuteThreadTotalCount.setStatus('current')
threadPoolRuntimeExecuteThreadIdleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeExecuteThreadIdleCount.setStatus('current')
threadPoolRuntimeQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeQueueLength.setStatus('current')
threadPoolRuntimePendingUserRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimePendingUserRequestCount.setStatus('current')
threadPoolRuntimeSharedCapacityForWorkManagers = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeSharedCapacityForWorkManagers.setStatus('current')
threadPoolRuntimeCompletedRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeCompletedRequestCount.setStatus('current')
threadPoolRuntimeHoggingThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeHoggingThreadCount.setStatus('current')
threadPoolRuntimeStandbyThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeStandbyThreadCount.setStatus('current')
threadPoolRuntimeThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 65), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeThroughput.setStatus('current')
threadPoolRuntimeMinThreadsConstraintsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeMinThreadsConstraintsPending.setStatus('current')
threadPoolRuntimeMinThreadsConstraintsCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeMinThreadsConstraintsCompleted.setStatus('current')
threadPoolRuntimeSuspended = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 367, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: threadPoolRuntimeSuspended.setStatus('current')
workManagerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 368), )
if mibBuilder.loadTexts: workManagerRuntimeTable.setStatus('current')
workManagerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 368, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "workManagerRuntimeIndex"))
if mibBuilder.loadTexts: workManagerRuntimeEntry.setStatus('current')
workManagerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 368, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerRuntimeIndex.setStatus('current')
workManagerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 368, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerRuntimeObjectName.setStatus('current')
workManagerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 368, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerRuntimeType.setStatus('current')
workManagerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 368, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerRuntimeName.setStatus('current')
workManagerRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 368, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerRuntimeParent.setStatus('current')
workManagerRuntimeApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 368, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerRuntimeApplicationName.setStatus('current')
workManagerRuntimeModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 368, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerRuntimeModuleName.setStatus('current')
workManagerRuntimePendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 368, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerRuntimePendingRequests.setStatus('current')
workManagerRuntimeCompletedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 368, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerRuntimeCompletedRequests.setStatus('current')
workManagerRuntimeStuckThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 368, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerRuntimeStuckThreadCount.setStatus('current')
serverSecurityRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 370), )
if mibBuilder.loadTexts: serverSecurityRuntimeTable.setStatus('current')
serverSecurityRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 370, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serverSecurityRuntimeIndex"))
if mibBuilder.loadTexts: serverSecurityRuntimeEntry.setStatus('current')
serverSecurityRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 370, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSecurityRuntimeIndex.setStatus('current')
serverSecurityRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 370, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSecurityRuntimeObjectName.setStatus('current')
serverSecurityRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 370, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSecurityRuntimeType.setStatus('current')
serverSecurityRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 370, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSecurityRuntimeName.setStatus('current')
serverSecurityRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 370, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSecurityRuntimeParent.setStatus('current')
serverSecurityRuntimeJACCEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 370, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSecurityRuntimeJACCEnabled.setStatus('current')
userLockoutManagerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 371), )
if mibBuilder.loadTexts: userLockoutManagerRuntimeTable.setStatus('current')
userLockoutManagerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 371, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "userLockoutManagerRuntimeIndex"))
if mibBuilder.loadTexts: userLockoutManagerRuntimeEntry.setStatus('current')
userLockoutManagerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeIndex.setStatus('current')
userLockoutManagerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeObjectName.setStatus('current')
userLockoutManagerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeType.setStatus('current')
userLockoutManagerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeName.setStatus('current')
userLockoutManagerRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeParent.setStatus('current')
userLockoutManagerRuntimeUserLockoutTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeUserLockoutTotalCount.setStatus('current')
userLockoutManagerRuntimeInvalidLoginAttemptsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeInvalidLoginAttemptsTotalCount.setStatus('current')
userLockoutManagerRuntimeLoginAttemptsWhileLockedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeLoginAttemptsWhileLockedTotalCount.setStatus('current')
userLockoutManagerRuntimeInvalidLoginUsersHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeInvalidLoginUsersHighCount.setStatus('current')
userLockoutManagerRuntimeUnlockedUsersTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeUnlockedUsersTotalCount.setStatus('current')
userLockoutManagerRuntimeLockedUsersCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 371, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLockoutManagerRuntimeLockedUsersCurrentCount.setStatus('current')
servletRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 380), )
if mibBuilder.loadTexts: servletRuntimeTable.setStatus('current')
servletRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 380, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "servletRuntimeIndex"))
if mibBuilder.loadTexts: servletRuntimeEntry.setStatus('current')
servletRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeIndex.setStatus('current')
servletRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeObjectName.setStatus('current')
servletRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeType.setStatus('current')
servletRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeName.setStatus('current')
servletRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeParent.setStatus('current')
servletRuntimeServletName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeServletName.setStatus('current')
servletRuntimeReloadTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeReloadTotalCount.setStatus('current')
servletRuntimeInvocationTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeInvocationTotalCount.setStatus('current')
servletRuntimePoolMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimePoolMaxCapacity.setStatus('current')
servletRuntimeExecutionTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeExecutionTimeTotal.setStatus('current')
servletRuntimeExecutionTimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeExecutionTimeHigh.setStatus('current')
servletRuntimeExecutionTimeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeExecutionTimeLow.setStatus('current')
servletRuntimeExecutionTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeExecutionTimeAverage.setStatus('current')
servletRuntimeServletPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeServletPath.setStatus('current')
servletRuntimeContextPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeContextPath.setStatus('current')
servletRuntimeURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeURL.setStatus('current')
servletRuntimeServletClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeServletClassName.setStatus('current')
servletRuntimeURLPatterns = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 380, 1, 77), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletRuntimeURLPatterns.setStatus('current')
servletSessionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 390), )
if mibBuilder.loadTexts: servletSessionRuntimeTable.setStatus('current')
servletSessionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 390, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "servletSessionRuntimeIndex"))
if mibBuilder.loadTexts: servletSessionRuntimeEntry.setStatus('current')
servletSessionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 390, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletSessionRuntimeIndex.setStatus('current')
servletSessionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 390, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletSessionRuntimeObjectName.setStatus('current')
servletSessionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 390, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletSessionRuntimeType.setStatus('current')
servletSessionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 390, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletSessionRuntimeName.setStatus('current')
servletSessionRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 390, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletSessionRuntimeParent.setStatus('current')
servletSessionRuntimeTimeLastAccessed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 390, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletSessionRuntimeTimeLastAccessed.setStatus('current')
servletSessionRuntimeMainAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 390, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletSessionRuntimeMainAttribute.setStatus('current')
servletSessionRuntimeMaxInactiveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 390, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servletSessionRuntimeMaxInactiveInterval.setStatus('current')
taskRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 391), )
if mibBuilder.loadTexts: taskRuntimeTable.setStatus('current')
taskRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 391, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "taskRuntimeIndex"))
if mibBuilder.loadTexts: taskRuntimeEntry.setStatus('current')
taskRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeIndex.setStatus('current')
taskRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeObjectName.setStatus('current')
taskRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeType.setStatus('current')
taskRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeName.setStatus('current')
taskRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeParent.setStatus('current')
taskRuntimeBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeBeginTime.setStatus('current')
taskRuntimeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeDescription.setStatus('current')
taskRuntimeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeEndTime.setStatus('current')
taskRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeStatus.setStatus('current')
taskRuntimeRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeRunning.setStatus('current')
taskRuntimeSystemTask = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 391, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskRuntimeSystemTask.setStatus('current')
transactionNameRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 410), )
if mibBuilder.loadTexts: transactionNameRuntimeTable.setStatus('current')
transactionNameRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 410, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "transactionNameRuntimeIndex"))
if mibBuilder.loadTexts: transactionNameRuntimeEntry.setStatus('current')
transactionNameRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeIndex.setStatus('current')
transactionNameRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeObjectName.setStatus('current')
transactionNameRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeType.setStatus('current')
transactionNameRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeName.setStatus('current')
transactionNameRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeParent.setStatus('current')
transactionNameRuntimeTransactionTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionTotalCount.setStatus('current')
transactionNameRuntimeTransactionCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionCommittedTotalCount.setStatus('current')
transactionNameRuntimeTransactionRolledBackTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionRolledBackTotalCount.setStatus('current')
transactionNameRuntimeTransactionHeuristicsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionHeuristicsTotalCount.setStatus('current')
transactionNameRuntimeTransactionRolledBackResourceTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionRolledBackResourceTotalCount.setStatus('current')
transactionNameRuntimeTransactionRolledBackAppTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionRolledBackAppTotalCount.setStatus('current')
transactionNameRuntimeTransactionRolledBackSystemTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionRolledBackSystemTotalCount.setStatus('current')
transactionNameRuntimeSecondsActiveTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeSecondsActiveTotalCount.setStatus('current')
transactionNameRuntimeTransactionRolledBackTimeoutTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionRolledBackTimeoutTotalCount.setStatus('current')
transactionNameRuntimeTransactionName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionName.setStatus('current')
transactionNameRuntimeTransactionAbandonedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionAbandonedTotalCount.setStatus('current')
txNameRuntimeTxReadOnlyOnePhaseCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txNameRuntimeTxReadOnlyOnePhaseCommittedTotalCount.setStatus('current')
transactionNameRuntimeTransactionTwoPhaseCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionTwoPhaseCommittedTotalCount.setStatus('current')
txNameRuntimeTxOneResourceOnePhaseCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txNameRuntimeTxOneResourceOnePhaseCommittedTotalCount.setStatus('current')
transactionNameRuntimeTransactionLLRCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionLLRCommittedTotalCount.setStatus('current')
transactionNameRuntimeTransactionNoResourcesCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 410, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionNameRuntimeTransactionNoResourcesCommittedTotalCount.setStatus('current')
transactionResourceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 420), )
if mibBuilder.loadTexts: transactionResourceRuntimeTable.setStatus('current')
transactionResourceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 420, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "transactionResourceRuntimeIndex"))
if mibBuilder.loadTexts: transactionResourceRuntimeEntry.setStatus('current')
transactionResourceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeIndex.setStatus('current')
transactionResourceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeObjectName.setStatus('current')
transactionResourceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeType.setStatus('current')
transactionResourceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeName.setStatus('current')
transactionResourceRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeParent.setStatus('current')
transactionResourceRuntimeTransactionTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeTransactionTotalCount.setStatus('current')
transactionResourceRuntimeTransactionCommittedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeTransactionCommittedTotalCount.setStatus('current')
transactionResourceRuntimeTransactionRolledBackTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeTransactionRolledBackTotalCount.setStatus('current')
transactionResourceRuntimeTransactionHeuristicsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeTransactionHeuristicsTotalCount.setStatus('current')
transactionResourceRuntimeResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeResourceName.setStatus('current')
transactionResourceRuntimeTransactionHeuristicCommitTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeTransactionHeuristicCommitTotalCount.setStatus('current')
transactionResourceRuntimeTransactionHeuristicRollbackTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeTransactionHeuristicRollbackTotalCount.setStatus('current')
transactionResourceRuntimeTransactionHeuristicMixedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeTransactionHeuristicMixedTotalCount.setStatus('current')
transactionResourceRuntimeTransactionHeuristicHazardTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 420, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionResourceRuntimeTransactionHeuristicHazardTotalCount.setStatus('current')
webAppComponentRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 430), )
if mibBuilder.loadTexts: webAppComponentRuntimeTable.setStatus('current')
webAppComponentRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 430, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webAppComponentRuntimeIndex"))
if mibBuilder.loadTexts: webAppComponentRuntimeEntry.setStatus('current')
webAppComponentRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeIndex.setStatus('current')
webAppComponentRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeObjectName.setStatus('current')
webAppComponentRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeType.setStatus('current')
webAppComponentRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeName.setStatus('current')
webAppComponentRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeParent.setStatus('current')
webAppComponentRuntimeComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeComponentName.setStatus('current')
webAppComponentRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeStatus.setStatus('current')
webAppComponentRuntimeSourceInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSourceInfo.setStatus('current')
webAppComponentRuntimeOpenSessionsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeOpenSessionsCurrentCount.setStatus('current')
webAppComponentRuntimeOpenSessionsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeOpenSessionsHighCount.setStatus('current')
webAppComponentRuntimeSessionsOpenedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSessionsOpenedTotalCount.setStatus('current')
webAppComponentRuntimeSingleThreadedServletPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSingleThreadedServletPoolSize.setStatus('current')
webAppComponentRuntimeJSPVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 62), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeJSPVerbose.setStatus('current')
webAppComponentRuntimeIndexDirectoryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 63), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeIndexDirectoryEnabled.setStatus('current')
webAppComponentRuntimeModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 64), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeModuleId.setStatus('current')
webAppComponentRuntimeJSPDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeJSPDebug.setStatus('current')
webAppComponentRuntimeSessionCookieName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 66), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSessionCookieName.setStatus('current')
webAppComponentRuntimeSessionCookieDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 67), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSessionCookieDomain.setStatus('current')
webAppComponentRuntimeFilterDispatchedRequestsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 68), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeFilterDispatchedRequestsEnabled.setStatus('current')
webAppComponentRuntimeLogFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 69), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeLogFilename.setStatus('current')
webAppComponentRuntimeSessionCookiePath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 70), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSessionCookiePath.setStatus('current')
webAppComponentRuntimeJSPKeepGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 71), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeJSPKeepGenerated.setStatus('current')
webAppComponentRuntimeSessionCookieComment = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 72), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSessionCookieComment.setStatus('current')
webAppComponentRuntimeJSPCompileCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeJSPCompileCommand.setStatus('current')
webAppComponentRuntimeJSPPageCheckSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeJSPPageCheckSecs.setStatus('current')
webAppComponentRuntimeContextRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 75), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeContextRoot.setStatus('current')
webAppComponentRuntimeModuleURI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeModuleURI.setStatus('current')
webAppComponentRuntimeSessionInvalidationIntervalSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSessionInvalidationIntervalSecs.setStatus('current')
webAppComponentRuntimeServletReloadCheckSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeServletReloadCheckSecs.setStatus('current')
webAppComponentRuntimeSessionCookieMaxAgeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSessionCookieMaxAgeSecs.setStatus('current')
webAppComponentRuntimeSessionTimeoutSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSessionTimeoutSecs.setStatus('current')
webAppComponentRuntimeSessionIDLength = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSessionIDLength.setStatus('current')
webAppComponentRuntimeDeploymentState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeDeploymentState.setStatus('current')
webAppComponentRuntimeSessionMonitoringEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 83), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeSessionMonitoringEnabled.setStatus('current')
webAppComponentRuntimeServletSessionsMonitoringIds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 84), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeServletSessionsMonitoringIds.setStatus('current')
webAppComponentRuntimeApplicationIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 430, 1, 85), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentRuntimeApplicationIdentifier.setStatus('current')
webServerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 431), )
if mibBuilder.loadTexts: webServerRuntimeTable.setStatus('current')
webServerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 431, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServerRuntimeIndex"))
if mibBuilder.loadTexts: webServerRuntimeEntry.setStatus('current')
webServerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 431, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerRuntimeIndex.setStatus('current')
webServerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 431, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerRuntimeObjectName.setStatus('current')
webServerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 431, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerRuntimeType.setStatus('current')
webServerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 431, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerRuntimeName.setStatus('current')
webServerRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 431, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerRuntimeParent.setStatus('current')
webServerRuntimeWebServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 431, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerRuntimeWebServerName.setStatus('current')
webServerRuntimeDefaultWebServer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 431, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerRuntimeDefaultWebServer.setStatus('current')
wlecConnectionPoolRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 440), )
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeTable.setStatus('current')
wlecConnectionPoolRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 440, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlecConnectionPoolRuntimeIndex"))
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeEntry.setStatus('current')
wlecConnectionPoolRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeIndex.setStatus('current')
wlecConnectionPoolRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeObjectName.setStatus('current')
wlecConnectionPoolRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeType.setStatus('current')
wlecConnectionPoolRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeName.setStatus('current')
wlecConnectionPoolRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeParent.setStatus('current')
wlecConnectionPoolRuntimePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimePoolName.setStatus('current')
wlecConnectionPoolRuntimeWLEDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeWLEDomainName.setStatus('current')
wlecConnectionPoolRuntimeMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeMaxCapacity.setStatus('current')
wlecConnectionPoolRuntimePoolState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimePoolState.setStatus('current')
wlecConnectionPoolRuntimeSecurityContextPropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeSecurityContextPropagation.setStatus('current')
wlecConnectionPoolRuntimeCertificateBasedAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeCertificateBasedAuthentication.setStatus('current')
wlecConnectionPoolRuntimeConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 440, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolRuntimeConnections.setStatus('current')
wlecConnectionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 450), )
if mibBuilder.loadTexts: wlecConnectionRuntimeTable.setStatus('current')
wlecConnectionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 450, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlecConnectionRuntimeIndex"))
if mibBuilder.loadTexts: wlecConnectionRuntimeEntry.setStatus('current')
wlecConnectionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeIndex.setStatus('current')
wlecConnectionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeObjectName.setStatus('current')
wlecConnectionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeType.setStatus('current')
wlecConnectionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeName.setStatus('current')
wlecConnectionRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeParent.setStatus('current')
wlecConnectionRuntimeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeAddress.setStatus('current')
wlecConnectionRuntimeLastAccessTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeLastAccessTime.setStatus('current')
wlecConnectionRuntimeAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeAlive.setStatus('current')
wlecConnectionRuntimeRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeRequestCount.setStatus('current')
wlecConnectionRuntimePendingRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimePendingRequestCount.setStatus('current')
wlecConnectionRuntimeErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeErrorCount.setStatus('current')
wlecConnectionRuntimeInTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 450, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionRuntimeInTransaction.setStatus('current')
wlecConnectionServiceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 451), )
if mibBuilder.loadTexts: wlecConnectionServiceRuntimeTable.setStatus('current')
wlecConnectionServiceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 451, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlecConnectionServiceRuntimeIndex"))
if mibBuilder.loadTexts: wlecConnectionServiceRuntimeEntry.setStatus('current')
wlecConnectionServiceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 451, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionServiceRuntimeIndex.setStatus('current')
wlecConnectionServiceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 451, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionServiceRuntimeObjectName.setStatus('current')
wlecConnectionServiceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 451, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionServiceRuntimeType.setStatus('current')
wlecConnectionServiceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 451, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionServiceRuntimeName.setStatus('current')
wlecConnectionServiceRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 451, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionServiceRuntimeParent.setStatus('current')
wlecConnectionServiceRuntimeConnectionPoolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 451, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionServiceRuntimeConnectionPoolCount.setStatus('current')
connectorConnectionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 454), )
if mibBuilder.loadTexts: connectorConnectionRuntimeTable.setStatus('current')
connectorConnectionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 454, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "connectorConnectionRuntimeIndex"))
if mibBuilder.loadTexts: connectorConnectionRuntimeEntry.setStatus('current')
connectorConnectionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeIndex.setStatus('current')
connectorConnectionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeObjectName.setStatus('current')
connectorConnectionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeType.setStatus('current')
connectorConnectionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeName.setStatus('current')
connectorConnectionRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeParent.setStatus('current')
connectorConnectionRuntimeActiveHandlesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeActiveHandlesCurrentCount.setStatus('current')
connectorConnectionRuntimeActiveHandlesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeActiveHandlesHighCount.setStatus('current')
connectorConnectionRuntimeHandlesCreatedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeHandlesCreatedTotalCount.setStatus('current')
connectorConnectionRuntimeCurrentlyInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeCurrentlyInUse.setStatus('current')
connectorConnectionRuntimeInTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeInTransaction.setStatus('current')
connectorConnectionRuntimeShared = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeShared.setStatus('current')
connectorConnectionRuntimeEISProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeEISProductVersion.setStatus('current')
connectorConnectionRuntimeDeletable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeDeletable.setStatus('current')
connectorConnectionRuntimeReserveDurationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeReserveDurationTime.setStatus('current')
connectorConnectionRuntimeTransactionId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeTransactionId.setStatus('current')
connectorConnectionRuntimeConnectionFactoryClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 55), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeConnectionFactoryClassName.setStatus('current')
connectorConnectionRuntimeEISProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeEISProductName.setStatus('current')
connectorConnectionRuntimeUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 57), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeUserName.setStatus('current')
connectorConnectionRuntimeReserveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeReserveTime.setStatus('current')
connectorConnectionRuntimeCreationDurationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeCreationDurationTime.setStatus('current')
connectorConnectionRuntimeManagedConnectionFactoryClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 60), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeManagedConnectionFactoryClassName.setStatus('current')
connectorConnectionRuntimeMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 61), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeMaxConnections.setStatus('current')
connectorConnectionRuntimeLastUsageString = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 62), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeLastUsageString.setStatus('current')
connectorConnectionRuntimeLastUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeLastUsage.setStatus('current')
connectorConnectionRuntimeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 64), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeIdle.setStatus('current')
connectorConnectionRuntimeStackTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 454, 1, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionRuntimeStackTrace.setStatus('current')
connectorConnectionPoolRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 455), )
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeTable.setStatus('current')
connectorConnectionPoolRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 455, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "connectorConnectionPoolRuntimeIndex"))
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeEntry.setStatus('current')
connectorConnectionPoolRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeIndex.setStatus('current')
connectorConnectionPoolRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeObjectName.setStatus('current')
connectorConnectionPoolRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeType.setStatus('current')
connectorConnectionPoolRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeName.setStatus('current')
connectorConnectionPoolRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeParent.setStatus('current')
connectorConnectionPoolRuntimePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimePoolName.setStatus('current')
connectorConnectionPoolRuntimeJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeJNDIName.setStatus('current')
connectorConnectionPoolRuntimeConnectionFactoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectionFactoryName.setStatus('current')
connectorConnectionPoolRuntimeResourceAdapterLinkRefName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeResourceAdapterLinkRefName.setStatus('current')
connectorConnectionPoolRuntimeLogFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeLogFileName.setStatus('current')
connectorConnectionPoolRuntimeTransactionSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeTransactionSupport.setStatus('current')
connectorConnectionPoolRuntimeLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeLoggingEnabled.setStatus('current')
connectorConnectionPoolRuntimeMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeMaxCapacity.setStatus('current')
connectorConnectionPoolRuntimeInitialCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeInitialCapacity.setStatus('current')
connectorConnectionPoolRuntimeCapacityIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeCapacityIncrement.setStatus('current')
connectorConnectionPoolRuntimeShrinkingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeShrinkingEnabled.setStatus('current')
connectorConnectionPoolRuntimeShrinkPeriodMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeShrinkPeriodMinutes.setStatus('current')
connectorConnectionPoolRuntimeActiveConnectionsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeActiveConnectionsCurrentCount.setStatus('current')
connectorConnectionPoolRuntimeActiveConnectionsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeActiveConnectionsHighCount.setStatus('current')
connectorConnectionPoolRuntimeFreeConnectionsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeFreeConnectionsCurrentCount.setStatus('current')
connectorConnectionPoolRuntimeFreeConnectionsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeFreeConnectionsHighCount.setStatus('current')
connectorConnectionPoolRuntimeAverageActiveUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeAverageActiveUsage.setStatus('current')
connectorConnectionPoolRuntimeShrinkCountDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeShrinkCountDownTime.setStatus('current')
connectorConnectionPoolRuntimeRecycledTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeRecycledTotal.setStatus('current')
connectorConnectionPoolRuntimeConnectionsCreatedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectionsCreatedTotalCount.setStatus('current')
connectorConnectionPoolRuntimeConnectionsMatchedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectionsMatchedTotalCount.setStatus('current')
connectorConnectionPoolRuntimeConnectionsDestroyedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectionsDestroyedTotalCount.setStatus('current')
connectorConnectionPoolRuntimeConnectionsRejectedTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 140), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectionsRejectedTotalCount.setStatus('current')
connectorConnectionPoolRuntimeConnectionLeakProfileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 141), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectionLeakProfileCount.setStatus('current')
connectorConnectionPoolRuntimeNumberDetectedIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 143), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeNumberDetectedIdle.setStatus('current')
connectorConnectionPoolRuntimeNumberDetectedLeaks = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 144), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeNumberDetectedLeaks.setStatus('current')
connectorConnectionPoolRuntimeFreePoolSizeHighWaterMark = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 145), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeFreePoolSizeHighWaterMark.setStatus('current')
connectorConnectionPoolRuntimeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 146), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeKey.setStatus('current')
connectorConnectionPoolRuntimeCurrentCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 147), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeCurrentCapacity.setStatus('current')
connectorConnectionPoolRuntimeMCFClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 148), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeMCFClassName.setStatus('current')
connectorConnectionPoolRuntimeTestable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 149), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeTestable.setStatus('current')
connectorConnectionPoolRuntimeNumUnavailableHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 150), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeNumUnavailableHighCount.setStatus('current')
connectorConnectionPoolRuntimeConnectionsDestroyedByErrorTotalCt = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 151), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectionsDestroyedByErrorTotalCt.setStatus('current')
connectorConnectionPoolRuntimeNumWaiters = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 152), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeNumWaiters.setStatus('current')
connectorConnectionPoolRuntimeConnectorEisType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 153), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectorEisType.setStatus('current')
connectorConnectionPoolRuntimeNumWaitersCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 154), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeNumWaitersCurrentCount.setStatus('current')
connectorConnectionPoolRuntimeMaxIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 155), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeMaxIdleTime.setStatus('current')
connectorConnectionPoolRuntimeLastShrinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 156), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeLastShrinkTime.setStatus('current')
connectorConnectionPoolRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 157), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeState.setStatus('current')
connectorConnectionPoolRuntimeResourceLink = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 158), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeResourceLink.setStatus('current')
connectorConnectionPoolRuntimeCloseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 159), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeCloseCount.setStatus('current')
connectorConnectionPoolRuntimeManagedConnectionFactoryClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 160), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeManagedConnectionFactoryClassName.setStatus('current')
connectorConnectionPoolRuntimeHighestNumWaiters = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 161), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeHighestNumWaiters.setStatus('current')
connectorConnectionPoolRuntimePoolSizeHighWaterMark = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 162), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimePoolSizeHighWaterMark.setStatus('current')
connectorConnectionPoolRuntimeConnectionFactoryClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 163), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectionFactoryClassName.setStatus('current')
connectorConnectionPoolRuntimeEISResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 164), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeEISResourceId.setStatus('current')
connectorConnectionPoolRuntimeFreePoolSizeLowWaterMark = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 165), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeFreePoolSizeLowWaterMark.setStatus('current')
connectorConnectionPoolRuntimePoolSizeLowWaterMark = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 166), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimePoolSizeLowWaterMark.setStatus('current')
connectorConnectionPoolRuntimeConsDestroyedByShrinkingTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 167), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConsDestroyedByShrinkingTotalCount.setStatus('current')
connectorConnectionPoolRuntimeNumUnavailableCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 168), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeNumUnavailableCurrentCount.setStatus('current')
connectorConnectionPoolRuntimeProxyOn = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 169), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeProxyOn.setStatus('current')
connectorConnectionPoolRuntimeConnectionIdleProfileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 170), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectionIdleProfileCount.setStatus('current')
connectorConnectionPoolRuntimeConnectionProfilingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 455, 1, 171), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorConnectionPoolRuntimeConnectionProfilingEnabled.setStatus('current')
connectorServiceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 456), )
if mibBuilder.loadTexts: connectorServiceRuntimeTable.setStatus('current')
connectorServiceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 456, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "connectorServiceRuntimeIndex"))
if mibBuilder.loadTexts: connectorServiceRuntimeEntry.setStatus('current')
connectorServiceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 456, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorServiceRuntimeIndex.setStatus('current')
connectorServiceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 456, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorServiceRuntimeObjectName.setStatus('current')
connectorServiceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 456, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorServiceRuntimeType.setStatus('current')
connectorServiceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 456, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorServiceRuntimeName.setStatus('current')
connectorServiceRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 456, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorServiceRuntimeParent.setStatus('current')
connectorServiceRuntimeConnectionPoolCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 456, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorServiceRuntimeConnectionPoolCurrentCount.setStatus('current')
connectorServiceRuntimeConnectionPoolsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 456, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorServiceRuntimeConnectionPoolsTotalCount.setStatus('current')
connectorServiceRuntimeRACount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 456, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorServiceRuntimeRACount.setStatus('current')
connectorServiceRuntimeActiveRACount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 456, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorServiceRuntimeActiveRACount.setStatus('current')
connectorComponentRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 457), )
if mibBuilder.loadTexts: connectorComponentRuntimeTable.setStatus('current')
connectorComponentRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 457, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "connectorComponentRuntimeIndex"))
if mibBuilder.loadTexts: connectorComponentRuntimeEntry.setStatus('current')
connectorComponentRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeIndex.setStatus('current')
connectorComponentRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeObjectName.setStatus('current')
connectorComponentRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeType.setStatus('current')
connectorComponentRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeName.setStatus('current')
connectorComponentRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeParent.setStatus('current')
connectorComponentRuntimeConnectionPoolCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeConnectionPoolCount.setStatus('current')
connectorComponentRuntimeInboundConnectionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeInboundConnectionsCount.setStatus('current')
connectorComponentRuntimeEISResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeEISResourceId.setStatus('current')
connectorComponentRuntimeVersionId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeVersionId.setStatus('current')
connectorComponentRuntimeActiveVersionId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeActiveVersionId.setStatus('current')
connectorComponentRuntimeVersioned = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeVersioned.setStatus('current')
connectorComponentRuntimeActiveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeActiveVersion.setStatus('current')
connectorComponentRuntimeJndiName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeJndiName.setStatus('current')
connectorComponentRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeState.setStatus('current')
connectorComponentRuntimeSuspendedState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeSuspendedState.setStatus('current')
connectorComponentRuntimeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeDescription.setStatus('current')
connectorComponentRuntimeEISType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeEISType.setStatus('current')
connectorComponentRuntimeSpecVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeSpecVersion.setStatus('current')
connectorComponentRuntimeVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeVendorName.setStatus('current')
connectorComponentRuntimeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeVersion.setStatus('current')
connectorComponentRuntimeComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 96), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeComponentName.setStatus('current')
connectorComponentRuntimeModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 97), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeModuleId.setStatus('current')
connectorComponentRuntimeConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 98), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeConfiguration.setStatus('current')
connectorComponentRuntimeSchema = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 99), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeSchema.setStatus('current')
connectorComponentRuntimeLinkref = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 100), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeLinkref.setStatus('current')
connectorComponentRuntimeDeploymentState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeDeploymentState.setStatus('current')
connectorComponentRuntimeConfigurationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 102), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeConfigurationVersion.setStatus('current')
connectorComponentRuntimeDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 457, 1, 103), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorComponentRuntimeDescriptions.setStatus('current')
connectorInboundRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 459), )
if mibBuilder.loadTexts: connectorInboundRuntimeTable.setStatus('current')
connectorInboundRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 459, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "connectorInboundRuntimeIndex"))
if mibBuilder.loadTexts: connectorInboundRuntimeEntry.setStatus('current')
connectorInboundRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 459, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorInboundRuntimeIndex.setStatus('current')
connectorInboundRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 459, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorInboundRuntimeObjectName.setStatus('current')
connectorInboundRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 459, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorInboundRuntimeType.setStatus('current')
connectorInboundRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 459, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorInboundRuntimeName.setStatus('current')
connectorInboundRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 459, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorInboundRuntimeParent.setStatus('current')
connectorInboundRuntimeMsgListenerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 459, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorInboundRuntimeMsgListenerType.setStatus('current')
connectorInboundRuntimeActivationSpecClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 459, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorInboundRuntimeActivationSpecClass.setStatus('current')
connectorInboundRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 459, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorInboundRuntimeState.setStatus('current')
jMSDurableSubscriberRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 460), )
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeTable.setStatus('current')
jMSDurableSubscriberRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 460, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jMSDurableSubscriberRuntimeIndex"))
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeEntry.setStatus('current')
jMSDurableSubscriberRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeIndex.setStatus('current')
jMSDurableSubscriberRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeObjectName.setStatus('current')
jMSDurableSubscriberRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeType.setStatus('current')
jMSDurableSubscriberRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeName.setStatus('current')
jMSDurableSubscriberRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeParent.setStatus('current')
jMSDurableSubscriberRuntimeClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeClientID.setStatus('current')
jMSDurableSubscriberRuntimeSubscriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeSubscriptionName.setStatus('current')
jMSDurableSubscriberRuntimeSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeSelector.setStatus('current')
jMSDurableSubscriberRuntimeNoLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeNoLocal.setStatus('current')
jMSDurableSubscriberRuntimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeActive.setStatus('current')
jMSDurableSubscriberRuntimeMessagesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeMessagesPendingCount.setStatus('current')
jMSDurableSubscriberRuntimeMessagesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeMessagesCurrentCount.setStatus('current')
jMSDurableSubscriberRuntimeBytesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeBytesPendingCount.setStatus('current')
jMSDurableSubscriberRuntimeBytesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeBytesCurrentCount.setStatus('current')
jMSDurableSubscriberRuntimeMessagesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeMessagesReceivedCount.setStatus('current')
jMSDurableSubscriberRuntimeMessagesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeMessagesHighCount.setStatus('current')
jMSDurableSubscriberRuntimeMessagesMovedCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeMessagesMovedCurrentCount.setStatus('current')
jMSDurableSubscriberRuntimeMessagesDeletedCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeMessagesDeletedCurrentCount.setStatus('current')
jMSDurableSubscriberRuntimeSubscribersHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeSubscribersHighCount.setStatus('current')
jMSDurableSubscriberRuntimeLastMessagesReceivedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeLastMessagesReceivedTime.setStatus('current')
jMSDurableSubscriberRuntimeClientIDPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 72), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeClientIDPolicy.setStatus('current')
jMSDurableSubscriberRuntimeSubscribersCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeSubscribersCurrentCount.setStatus('current')
jMSDurableSubscriberRuntimeSubscribersTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeSubscribersTotalCount.setStatus('current')
jMSDurableSubscriberRuntimeSubscriptionSharingPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 460, 1, 75), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMSDurableSubscriberRuntimeSubscriptionSharingPolicy.setStatus('current')
safAgentRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 470), )
if mibBuilder.loadTexts: safAgentRuntimeTable.setStatus('current')
safAgentRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 470, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "safAgentRuntimeIndex"))
if mibBuilder.loadTexts: safAgentRuntimeEntry.setStatus('current')
safAgentRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeIndex.setStatus('current')
safAgentRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeObjectName.setStatus('current')
safAgentRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeType.setStatus('current')
safAgentRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeName.setStatus('current')
safAgentRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeParent.setStatus('current')
safAgentRuntimeRemoteEndpointsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeRemoteEndpointsCurrentCount.setStatus('current')
safAgentRuntimeRemoteEndpointsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeRemoteEndpointsHighCount.setStatus('current')
safAgentRuntimeRemoteEndpointsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeRemoteEndpointsTotalCount.setStatus('current')
safAgentRuntimePausedForIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimePausedForIncoming.setStatus('current')
safAgentRuntimePausedForForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimePausedForForwarding.setStatus('current')
safAgentRuntimeConversationsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeConversationsCurrentCount.setStatus('current')
safAgentRuntimeConversationsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeConversationsHighCount.setStatus('current')
safAgentRuntimeConversationsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeConversationsTotalCount.setStatus('current')
safAgentRuntimeMessagesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeMessagesCurrentCount.setStatus('current')
safAgentRuntimeMessagesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeMessagesPendingCount.setStatus('current')
safAgentRuntimeMessagesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeMessagesHighCount.setStatus('current')
safAgentRuntimeMessagesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeMessagesReceivedCount.setStatus('current')
safAgentRuntimeMessagesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeMessagesThresholdTime.setStatus('current')
safAgentRuntimeBytesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeBytesPendingCount.setStatus('current')
safAgentRuntimeBytesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeBytesCurrentCount.setStatus('current')
safAgentRuntimeBytesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeBytesHighCount.setStatus('current')
safAgentRuntimeBytesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeBytesReceivedCount.setStatus('current')
safAgentRuntimeBytesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeBytesThresholdTime.setStatus('current')
safAgentRuntimeFailedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimeFailedMessagesTotal.setStatus('current')
safAgentRuntimePausedForReceiving = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 470, 1, 121), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentRuntimePausedForReceiving.setStatus('current')
safConversationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 471), )
if mibBuilder.loadTexts: safConversationRuntimeTable.setStatus('current')
safConversationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 471, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "safConversationRuntimeIndex"))
if mibBuilder.loadTexts: safConversationRuntimeEntry.setStatus('current')
safConversationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 471, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safConversationRuntimeIndex.setStatus('current')
safConversationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 471, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safConversationRuntimeObjectName.setStatus('current')
safConversationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 471, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safConversationRuntimeType.setStatus('current')
safConversationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 471, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safConversationRuntimeName.setStatus('current')
safConversationRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 471, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safConversationRuntimeParent.setStatus('current')
safConversationRuntimeConversationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 471, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safConversationRuntimeConversationName.setStatus('current')
safConversationRuntimeDestinationURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 471, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safConversationRuntimeDestinationURL.setStatus('current')
safConversationRuntimeQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 471, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safConversationRuntimeQOS.setStatus('current')
safRemoteEndpointRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 472), )
if mibBuilder.loadTexts: safRemoteEndpointRuntimeTable.setStatus('current')
safRemoteEndpointRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 472, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "safRemoteEndpointRuntimeIndex"))
if mibBuilder.loadTexts: safRemoteEndpointRuntimeEntry.setStatus('current')
safRemoteEndpointRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeIndex.setStatus('current')
safRemoteEndpointRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeObjectName.setStatus('current')
safRemoteEndpointRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeType.setStatus('current')
safRemoteEndpointRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeName.setStatus('current')
safRemoteEndpointRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeParent.setStatus('current')
safRemoteEndpointRuntimeURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeURL.setStatus('current')
safRemoteEndpointRuntimeEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeEndpointType.setStatus('current')
safRemoteEndpointRuntimePausedForIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimePausedForIncoming.setStatus('current')
safRemoteEndpointRuntimePausedForForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimePausedForForwarding.setStatus('current')
safRemoteEndpointRuntimeDowntimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeDowntimeHigh.setStatus('current')
safRemoteEndpointRuntimeDowntimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeDowntimeTotal.setStatus('current')
safRemoteEndpointRuntimeUptimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeUptimeHigh.setStatus('current')
safRemoteEndpointRuntimeUptimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeUptimeTotal.setStatus('current')
safRemoteEndpointRuntimeMessagesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeMessagesCurrentCount.setStatus('current')
safRemoteEndpointRuntimeMessagesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeMessagesPendingCount.setStatus('current')
safRemoteEndpointRuntimeMessagesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeMessagesHighCount.setStatus('current')
safRemoteEndpointRuntimeMessagesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeMessagesReceivedCount.setStatus('current')
safRemoteEndpointRuntimeMessagesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeMessagesThresholdTime.setStatus('current')
safRemoteEndpointRuntimeBytesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeBytesPendingCount.setStatus('current')
safRemoteEndpointRuntimeBytesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeBytesCurrentCount.setStatus('current')
safRemoteEndpointRuntimeBytesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeBytesHighCount.setStatus('current')
safRemoteEndpointRuntimeBytesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeBytesReceivedCount.setStatus('current')
safRemoteEndpointRuntimeBytesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeBytesThresholdTime.setStatus('current')
safRemoteEndpointRuntimeFailedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 135), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeFailedMessagesTotal.setStatus('current')
safRemoteEndpointRuntimeLastTimeFailedToConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 136), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeLastTimeFailedToConnect.setStatus('current')
safRemoteEndpointRuntimeOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 137), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeOperationState.setStatus('current')
safRemoteEndpointRuntimeLastTimeConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 472, 1, 138), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRemoteEndpointRuntimeLastTimeConnected.setStatus('current')
wldfDbstoreArchiveRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 480), )
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeTable.setStatus('current')
wldfDbstoreArchiveRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 480, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfDbstoreArchiveRuntimeIndex"))
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeEntry.setStatus('current')
wldfDbstoreArchiveRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeIndex.setStatus('current')
wldfDbstoreArchiveRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeObjectName.setStatus('current')
wldfDbstoreArchiveRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeType.setStatus('current')
wldfDbstoreArchiveRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeName.setStatus('current')
wldfDbstoreArchiveRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeParent.setStatus('current')
wldfDbstoreArchiveRuntimeRecordSeekCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeRecordSeekCount.setStatus('current')
wldfDbstoreArchiveRuntimeRecordSeekTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeRecordSeekTime.setStatus('current')
wldfDbstoreArchiveRuntimeRetrievedRecordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeRetrievedRecordCount.setStatus('current')
wldfDbstoreArchiveRuntimeRecordRetrievalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeRecordRetrievalTime.setStatus('current')
wldfDbstoreArchiveRuntimeInsertionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeInsertionCount.setStatus('current')
wldfDbstoreArchiveRuntimeInsertionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeInsertionTime.setStatus('current')
wldfDbstoreArchiveRuntimeDeletionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeDeletionCount.setStatus('current')
wldfDbstoreArchiveRuntimeDeletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeDeletionTime.setStatus('current')
wldfDbstoreArchiveRuntimeLastDataRetirementStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeLastDataRetirementStartTime.setStatus('current')
wldfDbstoreArchiveRuntimeDataRetirementCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeDataRetirementCycles.setStatus('current')
wldfDbstoreArchiveRuntimeDataRetirementTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeDataRetirementTotalTime.setStatus('current')
wldfDbstoreArchiveRuntimeRetiredRecordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeRetiredRecordCount.setStatus('current')
wldfDbstoreArchiveRuntimeLastDataRetirementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 480, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDbstoreArchiveRuntimeLastDataRetirementTime.setStatus('current')
wldfFileArchiveRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 481), )
if mibBuilder.loadTexts: wldfFileArchiveRuntimeTable.setStatus('current')
wldfFileArchiveRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 481, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfFileArchiveRuntimeIndex"))
if mibBuilder.loadTexts: wldfFileArchiveRuntimeEntry.setStatus('current')
wldfFileArchiveRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeIndex.setStatus('current')
wldfFileArchiveRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeObjectName.setStatus('current')
wldfFileArchiveRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeType.setStatus('current')
wldfFileArchiveRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeName.setStatus('current')
wldfFileArchiveRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeParent.setStatus('current')
wldfFileArchiveRuntimeRecordSeekCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeRecordSeekCount.setStatus('current')
wldfFileArchiveRuntimeRecordSeekTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeRecordSeekTime.setStatus('current')
wldfFileArchiveRuntimeRetrievedRecordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeRetrievedRecordCount.setStatus('current')
wldfFileArchiveRuntimeRecordRetrievalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeRecordRetrievalTime.setStatus('current')
wldfFileArchiveRuntimeRotatedFilesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeRotatedFilesCount.setStatus('current')
wldfFileArchiveRuntimeIndexCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeIndexCycleCount.setStatus('current')
wldfFileArchiveRuntimeIndexTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeIndexTime.setStatus('current')
wldfFileArchiveRuntimeIncrementalIndexCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeIncrementalIndexCycleCount.setStatus('current')
wldfFileArchiveRuntimeIncrementalIndexTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 481, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfFileArchiveRuntimeIncrementalIndexTime.setStatus('current')
wldfWlstoreArchiveRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 482), )
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeTable.setStatus('current')
wldfWlstoreArchiveRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 482, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfWlstoreArchiveRuntimeIndex"))
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeEntry.setStatus('current')
wldfWlstoreArchiveRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeIndex.setStatus('current')
wldfWlstoreArchiveRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeObjectName.setStatus('current')
wldfWlstoreArchiveRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeType.setStatus('current')
wldfWlstoreArchiveRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeName.setStatus('current')
wldfWlstoreArchiveRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeParent.setStatus('current')
wldfWlstoreArchiveRuntimeRecordSeekCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeRecordSeekCount.setStatus('current')
wldfWlstoreArchiveRuntimeRecordSeekTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeRecordSeekTime.setStatus('current')
wldfWlstoreArchiveRuntimeRetrievedRecordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeRetrievedRecordCount.setStatus('current')
wldfWlstoreArchiveRuntimeRecordRetrievalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeRecordRetrievalTime.setStatus('current')
wldfWlstoreArchiveRuntimeIndexPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeIndexPageCount.setStatus('current')
wldfWlstoreArchiveRuntimeInsertionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeInsertionCount.setStatus('current')
wldfWlstoreArchiveRuntimeInsertionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeInsertionTime.setStatus('current')
wldfWlstoreArchiveRuntimeDeletionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeDeletionCount.setStatus('current')
wldfWlstoreArchiveRuntimeDeletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeDeletionTime.setStatus('current')
wldfWlstoreArchiveRuntimeLastDataRetirementStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeLastDataRetirementStartTime.setStatus('current')
wldfWlstoreArchiveRuntimeRecordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeRecordCount.setStatus('current')
wldfWlstoreArchiveRuntimeDataRetirementCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeDataRetirementCycles.setStatus('current')
wldfWlstoreArchiveRuntimeDataRetirementTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeDataRetirementTotalTime.setStatus('current')
wldfWlstoreArchiveRuntimeRetiredRecordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeRetiredRecordCount.setStatus('current')
wldfWlstoreArchiveRuntimeLastDataRetirementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 482, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWlstoreArchiveRuntimeLastDataRetirementTime.setStatus('current')
wldfHarvesterRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 483), )
if mibBuilder.loadTexts: wldfHarvesterRuntimeTable.setStatus('current')
wldfHarvesterRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 483, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfHarvesterRuntimeIndex"))
if mibBuilder.loadTexts: wldfHarvesterRuntimeEntry.setStatus('current')
wldfHarvesterRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeIndex.setStatus('current')
wldfHarvesterRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeObjectName.setStatus('current')
wldfHarvesterRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeType.setStatus('current')
wldfHarvesterRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeName.setStatus('current')
wldfHarvesterRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeParent.setStatus('current')
wldfHarvesterRuntimeSamplePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeSamplePeriod.setStatus('current')
wldfHarvesterRuntimeTotalSamplingCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeTotalSamplingCycles.setStatus('current')
wldfHarvesterRuntimeMinimumSamplingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeMinimumSamplingTime.setStatus('current')
wldfHarvesterRuntimeMaximumSamplingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeMaximumSamplingTime.setStatus('current')
wldfHarvesterRuntimeTotalSamplingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeTotalSamplingTime.setStatus('current')
wldfHarvesterRuntimeAverageSamplingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeAverageSamplingTime.setStatus('current')
wldfHarvesterRuntimeCurrentDataSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeCurrentDataSampleCount.setStatus('current')
wldfHarvesterRuntimeCurrentSnapshotStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeCurrentSnapshotStartTime.setStatus('current')
wldfHarvesterRuntimeCurrentSnapshotElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeCurrentSnapshotElapsedTime.setStatus('current')
wldfHarvesterRuntimeTotalSamplingTimeOutlierCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeTotalSamplingTimeOutlierCount.setStatus('current')
wldfHarvesterRuntimeOutlierDetectionFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 67), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeOutlierDetectionFactor.setStatus('current')
wldfHarvesterRuntimeTotalDataSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeTotalDataSampleCount.setStatus('current')
wldfHarvesterRuntimeCurrentSampleTimeAnOutlier = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 69), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeCurrentSampleTimeAnOutlier.setStatus('current')
wldfHarvesterRuntimeKnownHarvestableTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 483, 1, 70), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfHarvesterRuntimeKnownHarvestableTypes.setStatus('current')
wldfInstrumentationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 484), )
if mibBuilder.loadTexts: wldfInstrumentationRuntimeTable.setStatus('current')
wldfInstrumentationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 484, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfInstrumentationRuntimeIndex"))
if mibBuilder.loadTexts: wldfInstrumentationRuntimeEntry.setStatus('current')
wldfInstrumentationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeIndex.setStatus('current')
wldfInstrumentationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeObjectName.setStatus('current')
wldfInstrumentationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeType.setStatus('current')
wldfInstrumentationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeName.setStatus('current')
wldfInstrumentationRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeParent.setStatus('current')
wldfInstrumentationRuntimeInspectedClassesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeInspectedClassesCount.setStatus('current')
wldfInstrumentationRuntimeModifiedClassesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeModifiedClassesCount.setStatus('current')
wldfInstrumentationRuntimeMinWeavingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeMinWeavingTime.setStatus('current')
wldfInstrumentationRuntimeMaxWeavingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeMaxWeavingTime.setStatus('current')
wldfInstrumentationRuntimeTotalWeavingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeTotalWeavingTime.setStatus('current')
wldfInstrumentationRuntimeExecutionJoinpointCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeExecutionJoinpointCount.setStatus('current')
wldfInstrumentationRuntimeCallJoinpointCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeCallJoinpointCount.setStatus('current')
wldfInstrumentationRuntimeClassweaveAbortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 484, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfInstrumentationRuntimeClassweaveAbortCount.setStatus('current')
wldfWatchNotificationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 485), )
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTable.setStatus('current')
wldfWatchNotificationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 485, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfWatchNotificationRuntimeIndex"))
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeEntry.setStatus('current')
wldfWatchNotificationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeIndex.setStatus('current')
wldfWatchNotificationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeObjectName.setStatus('current')
wldfWatchNotificationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeType.setStatus('current')
wldfWatchNotificationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeName.setStatus('current')
wldfWatchNotificationRuntimeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeParent.setStatus('current')
wldfWatchNotificationRuntimeTotalHarvesterEvaluationCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalHarvesterEvaluationCycles.setStatus('current')
wldfWatchNotificationRuntimeTotalHarvesterWatchEvaluations = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalHarvesterWatchEvaluations.setStatus('current')
wldfWatchNotificationRuntimeTotalHarvesterWatchesTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalHarvesterWatchesTriggered.setStatus('current')
wldfWatchNotificationRuntimeAverageHarvesterWatchEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeAverageHarvesterWatchEvaluationTime.setStatus('current')
wldfWatchNotificationRuntimeTotalLogEvaluationCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalLogEvaluationCycles.setStatus('current')
wldfWatchNotificationRuntimeTotalLogWatchEvaluations = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalLogWatchEvaluations.setStatus('current')
wldfWatchNotificationRuntimeTotalLogWatchesTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalLogWatchesTriggered.setStatus('current')
wldfWatchNotificationRuntimeAverageLogWatchEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeAverageLogWatchEvaluationTime.setStatus('current')
wldfWatchNotificationRuntimeTotalEventDataEvaluationCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalEventDataEvaluationCycles.setStatus('current')
wldfWatchNotificationRuntimeTotalEventDataWatchEvaluations = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalEventDataWatchEvaluations.setStatus('current')
wldfWatchNotificationRuntimeTotalEventDataWatchesTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalEventDataWatchesTriggered.setStatus('current')
wldfWatchNotificationRuntimeAverageEventDataWatchEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeAverageEventDataWatchEvaluationTime.setStatus('current')
wldfWatchNotificationRuntimeCurrentActiveAlarmsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeCurrentActiveAlarmsCount.setStatus('current')
wldfWatchNotificationRuntimeMaximumActiveAlarmsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeMaximumActiveAlarmsCount.setStatus('current')
wldfWatchNotificationRuntimeTotalActiveManualResetAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalActiveManualResetAlarms.setStatus('current')
wldfWatchNotificationRuntimeTotalActiveAutomaticResetAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalActiveAutomaticResetAlarms.setStatus('current')
wldfWatchNotificationRuntimeTotalNotificationsPerformed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalNotificationsPerformed.setStatus('current')
wldfWatchNotificationRuntimeTotalDIMGNotificationsPerformed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalDIMGNotificationsPerformed.setStatus('current')
wldfWatchNotificationRuntimeTotalSNMPNotificationsPerformed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalSNMPNotificationsPerformed.setStatus('current')
wldfWatchNotificationRuntimeMinimumEventDataWatchEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeMinimumEventDataWatchEvaluationTime.setStatus('current')
wldfWatchNotificationRuntimeMinimumHarvesterWatchEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeMinimumHarvesterWatchEvaluationTime.setStatus('current')
wldfWatchNotificationRuntimeTotalFailedJMXNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalFailedJMXNotifications.setStatus('current')
wldfWatchNotificationRuntimeTotalJMXNotificationsPerformed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalJMXNotificationsPerformed.setStatus('current')
wldfWatchNotificationRuntimeTotalSMTPNotificationsPerformed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalSMTPNotificationsPerformed.setStatus('current')
wldfWatchNotificationRuntimeTotalJMSNotificationsPerformed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalJMSNotificationsPerformed.setStatus('current')
wldfWatchNotificationRuntimeMaximumLogWatchEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeMaximumLogWatchEvaluationTime.setStatus('current')
wldfWatchNotificationRuntimeTotalFailedJMSNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalFailedJMSNotifications.setStatus('current')
wldfWatchNotificationRuntimeMinimumLogWatchEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeMinimumLogWatchEvaluationTime.setStatus('current')
wldfWatchNotificationRuntimeMaximumHarvesterWatchEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeMaximumHarvesterWatchEvaluationTime.setStatus('current')
wldfWatchNotificationRuntimeTotalFailedDIMGNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalFailedDIMGNotifications.setStatus('current')
wldfWatchNotificationRuntimeMaximumEventDataWatchEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeMaximumEventDataWatchEvaluationTime.setStatus('current')
wldfWatchNotificationRuntimeTotalFailedNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalFailedNotifications.setStatus('current')
wldfWatchNotificationRuntimeTotalFailedSMTPNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalFailedSMTPNotifications.setStatus('current')
wldfWatchNotificationRuntimeTotalFailedSNMPNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeTotalFailedSNMPNotifications.setStatus('current')
wldfWatchNotificationRuntimeActiveAlarmWatches = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 485, 1, 123), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchNotificationRuntimeActiveAlarmWatches.setStatus('current')
bridgeDestinationCommonTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 505), )
if mibBuilder.loadTexts: bridgeDestinationCommonTable.setStatus('current')
bridgeDestinationCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 505, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "bridgeDestinationCommonIndex"))
if mibBuilder.loadTexts: bridgeDestinationCommonEntry.setStatus('current')
bridgeDestinationCommonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 505, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationCommonIndex.setStatus('current')
bridgeDestinationCommonObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 505, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationCommonObjectName.setStatus('current')
bridgeDestinationCommonType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 505, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationCommonType.setStatus('current')
bridgeDestinationCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 505, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationCommonName.setStatus('current')
bridgeDestinationCommonParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 505, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationCommonParent.setStatus('current')
bridgeDestinationCommonAdapterJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 505, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationCommonAdapterJNDIName.setStatus('current')
bridgeDestinationCommonClasspath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 505, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationCommonClasspath.setStatus('current')
bridgeDestinationCommonUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 505, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationCommonUserName.setStatus('current')
clusterTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 510), )
if mibBuilder.loadTexts: clusterTable.setStatus('current')
clusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 510, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "clusterIndex"))
if mibBuilder.loadTexts: clusterEntry.setStatus('current')
clusterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIndex.setStatus('current')
clusterObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterObjectName.setStatus('current')
clusterType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterType.setStatus('current')
clusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterName.setStatus('current')
clusterParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterParent.setStatus('current')
clusterClusterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterClusterAddress.setStatus('current')
clusterMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMulticastAddress.setStatus('current')
clusterMulticastTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMulticastTTL.setStatus('current')
clusterMulticastSendDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMulticastSendDelay.setStatus('current')
clusterDefaultLoadAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterDefaultLoadAlgorithm.setStatus('current')
clusterServiceAgeThresholdSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterServiceAgeThresholdSeconds.setStatus('current')
clusterMulticastBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMulticastBufferSize.setStatus('current')
clusterMulticastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMulticastPort.setStatus('current')
clusterClientCertProxyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterClientCertProxyEnabled.setStatus('current')
clusterWeblogicPluginEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterWeblogicPluginEnabled.setStatus('current')
clusterHealthCheckIntervalMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHealthCheckIntervalMillis.setStatus('current')
clusterHealthCheckPeriodsUntilFencing = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHealthCheckPeriodsUntilFencing.setStatus('current')
clusterSessionFlushInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterSessionFlushInterval.setStatus('current')
clusterAdditionalAutoMigrationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterAdditionalAutoMigrationAttempts.setStatus('current')
clusterRemoteClusterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 64), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRemoteClusterAddress.setStatus('current')
clusterFrontendHTTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterFrontendHTTPPort.setStatus('current')
clusterMulticastDataEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 66), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMulticastDataEncryption.setStatus('current')
clusterSecureReplicationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 67), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterSecureReplicationEnabled.setStatus('current')
clusterJobSchedulerTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 68), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterJobSchedulerTableName.setStatus('current')
clusterReplicationTimeoutEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 69), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterReplicationTimeoutEnabled.setStatus('current')
clusterAsyncSessionQueueTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterAsyncSessionQueueTimeout.setStatus('current')
clusterInterClusterCommLinkHealthCheckInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterInterClusterCommLinkHealthCheckInterval.setStatus('current')
clusterSessionFlushThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterSessionFlushThreshold.setStatus('current')
clusterClusterType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterClusterType.setStatus('current')
clusterGreedySessionFlushInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterGreedySessionFlushInterval.setStatus('current')
clusterPersistSessionsOnShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 75), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPersistSessionsOnShutdown.setStatus('current')
clusterMigrationBasis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMigrationBasis.setStatus('current')
clusterHttpTraceSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 77), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHttpTraceSupportEnabled.setStatus('current')
clusterReplicationChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 78), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterReplicationChannel.setStatus('current')
clusterFencingGracePeriodMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterFencingGracePeriodMillis.setStatus('current')
clusterFrontendHost = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 80), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterFrontendHost.setStatus('current')
clusterMemberWarmupTimeoutSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberWarmupTimeoutSeconds.setStatus('current')
clusterFrontendHTTPSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterFrontendHTTPSPort.setStatus('current')
clusterClusterBroadcastChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 83), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterClusterBroadcastChannel.setStatus('current')
clusterIdlePeriodsUntilTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIdlePeriodsUntilTimeout.setStatus('current')
clusterNumberOfServersInClusterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNumberOfServersInClusterAddress.setStatus('current')
clusterClusterMessagingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 86), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterClusterMessagingMode.setStatus('current')
clusterMillisToSleepBetweenAutoMigrationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMillisToSleepBetweenAutoMigrationAttempts.setStatus('current')
clusterAutoMigrationTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 88), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterAutoMigrationTableName.setStatus('current')
clusterWANSessionPersistenceTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 89), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterWANSessionPersistenceTableName.setStatus('current')
clusterOneWayRmiForReplicationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 90), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterOneWayRmiForReplicationEnabled.setStatus('current')
clusterMessageOrderingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 510, 1, 91), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMessageOrderingEnabled.setStatus('current')
comTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 512), )
if mibBuilder.loadTexts: comTable.setStatus('current')
comEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 512, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "comIndex"))
if mibBuilder.loadTexts: comEntry.setStatus('current')
comIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: comIndex.setStatus('current')
comObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: comObjectName.setStatus('current')
comType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: comType.setStatus('current')
comName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: comName.setStatus('current')
comParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: comParent.setStatus('current')
comNTAuthHost = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: comNTAuthHost.setStatus('current')
comApartmentThreaded = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comApartmentThreaded.setStatus('current')
comMemoryLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comMemoryLoggingEnabled.setStatus('current')
comNativeModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comNativeModeEnabled.setStatus('current')
comPrefetchEnums = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comPrefetchEnums.setStatus('current')
comVerboseLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 512, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comVerboseLoggingEnabled.setStatus('current')
domainTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 530), )
if mibBuilder.loadTexts: domainTable.setStatus('current')
domainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 530, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "domainIndex"))
if mibBuilder.loadTexts: domainEntry.setStatus('current')
domainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainIndex.setStatus('current')
domainObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainObjectName.setStatus('current')
domainType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainType.setStatus('current')
domainName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setStatus('current')
domainParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainParent.setStatus('current')
domainLastModificationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLastModificationTime.setStatus('current')
domainRootDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainRootDirectory.setStatus('current')
domainAdministrationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainAdministrationPort.setStatus('current')
domainArchiveConfigurationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainArchiveConfigurationCount.setStatus('current')
domainConfigurationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainConfigurationVersion.setStatus('current')
domainConsoleContextPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainConsoleContextPath.setStatus('current')
domainAdministrationPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainAdministrationPortEnabled.setStatus('current')
domainClusterConstraintsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainClusterConstraintsEnabled.setStatus('current')
domainConsoleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainConsoleEnabled.setStatus('current')
domainInternalAppsDeployOnDemandEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 58), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainInternalAppsDeployOnDemandEnabled.setStatus('current')
domainDomainVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 59), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainDomainVersion.setStatus('current')
domainConfigBackupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 60), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainConfigBackupEnabled.setStatus('current')
domainConsoleExtensionDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 61), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainConsoleExtensionDirectory.setStatus('current')
domainConfigurationAuditType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 62), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainConfigurationAuditType.setStatus('current')
domainAdminServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 63), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainAdminServerName.setStatus('current')
domainAdministrationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 64), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainAdministrationProtocol.setStatus('current')
domainProductionModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainProductionModeEnabled.setStatus('current')
domainGuardianEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 66), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainGuardianEnabled.setStatus('current')
domainAdministrationMBeanAuditingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 530, 1, 67), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainAdministrationMBeanAuditingEnabled.setStatus('current')
ejbComponentTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 540), )
if mibBuilder.loadTexts: ejbComponentTable.setStatus('current')
ejbComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 540, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "ejbComponentIndex"))
if mibBuilder.loadTexts: ejbComponentEntry.setStatus('current')
ejbComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentIndex.setStatus('current')
ejbComponentObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentObjectName.setStatus('current')
ejbComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentType.setStatus('current')
ejbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentName.setStatus('current')
ejbComponentParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentParent.setStatus('current')
ejbComponentJavaCompiler = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentJavaCompiler.setStatus('current')
ejbComponentJavaCompilerPreClassPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentJavaCompilerPreClassPath.setStatus('current')
ejbComponentJavaCompilerPostClassPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentJavaCompilerPostClassPath.setStatus('current')
ejbComponentExtraRmicOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentExtraRmicOptions.setStatus('current')
ejbComponentKeepGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentKeepGenerated.setStatus('current')
ejbComponentTmpPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentTmpPath.setStatus('current')
ejbComponentURI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentURI.setStatus('current')
ejbComponentVerboseEJBDeploymentEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 66), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentVerboseEJBDeploymentEnabled.setStatus('current')
ejbComponentForceGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 67), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentForceGeneration.setStatus('current')
ejbComponentExtraEjbcOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 68), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentExtraEjbcOptions.setStatus('current')
ejbComponentDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 540, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbComponentDeploymentOrder.setStatus('current')
ejbContainerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 545), )
if mibBuilder.loadTexts: ejbContainerTable.setStatus('current')
ejbContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 545, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "ejbContainerIndex"))
if mibBuilder.loadTexts: ejbContainerEntry.setStatus('current')
ejbContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerIndex.setStatus('current')
ejbContainerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerObjectName.setStatus('current')
ejbContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerType.setStatus('current')
ejbContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerName.setStatus('current')
ejbContainerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerParent.setStatus('current')
ejbContainerVerboseEJBDeploymentEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerVerboseEJBDeploymentEnabled.setStatus('current')
ejbContainerExtraRmicOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerExtraRmicOptions.setStatus('current')
ejbContainerForceGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerForceGeneration.setStatus('current')
ejbContainerJavaCompiler = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerJavaCompiler.setStatus('current')
ejbContainerJavaCompilerPostClassPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerJavaCompilerPostClassPath.setStatus('current')
ejbContainerJavaCompilerPreClassPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerJavaCompilerPreClassPath.setStatus('current')
ejbContainerKeepGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerKeepGenerated.setStatus('current')
ejbContainerTmpPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerTmpPath.setStatus('current')
ejbContainerExtraEjbcOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 545, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbContainerExtraEjbcOptions.setStatus('current')
executeQueueTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 550), )
if mibBuilder.loadTexts: executeQueueTable.setStatus('current')
executeQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 550, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "executeQueueIndex"))
if mibBuilder.loadTexts: executeQueueEntry.setStatus('current')
executeQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueIndex.setStatus('current')
executeQueueObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueObjectName.setStatus('current')
executeQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueType.setStatus('current')
executeQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueName.setStatus('current')
executeQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueParent.setStatus('current')
executeQueueThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueThreadCount.setStatus('current')
executeQueueThreadsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueThreadsMaximum.setStatus('current')
executeQueueQueueLengthThresholdPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueQueueLengthThresholdPercent.setStatus('current')
executeQueueThreadsIncrease = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueThreadsIncrease.setStatus('current')
executeQueueThreadsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueThreadsMinimum.setStatus('current')
executeQueueQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 550, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: executeQueueQueueLength.setStatus('current')
iiopTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 555), )
if mibBuilder.loadTexts: iiopTable.setStatus('current')
iiopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 555, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "iiopIndex"))
if mibBuilder.loadTexts: iiopEntry.setStatus('current')
iiopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopIndex.setStatus('current')
iiopObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopObjectName.setStatus('current')
iiopType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopType.setStatus('current')
iiopName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopName.setStatus('current')
iiopParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopParent.setStatus('current')
iiopCompleteMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopCompleteMessageTimeout.setStatus('current')
iiopIdleConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopIdleConnectionTimeout.setStatus('current')
iiopMaxMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopMaxMessageSize.setStatus('current')
iiopDefaultCharCodeset = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopDefaultCharCodeset.setStatus('current')
iiopDefaultMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopDefaultMinorVersion.setStatus('current')
iiopDefaultWideCharCodeset = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopDefaultWideCharCodeset.setStatus('current')
iiopTxMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopTxMechanism.setStatus('current')
iiopUseStatefulAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopUseStatefulAuthentication.setStatus('current')
iiopUseJavaSerialization = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopUseJavaSerialization.setStatus('current')
iiopUseFullRepositoryIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopUseFullRepositoryIdList.setStatus('current')
iiopEnableIORServlet = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopEnableIORServlet.setStatus('current')
iiopSystemSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopSystemSecurity.setStatus('current')
iiopUseSerialFormatVersion2 = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 555, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iiopUseSerialFormatVersion2.setStatus('current')
jdbcDataSourceFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 575), )
if mibBuilder.loadTexts: jdbcDataSourceFactoryTable.setStatus('current')
jdbcDataSourceFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 575, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jdbcDataSourceFactoryIndex"))
if mibBuilder.loadTexts: jdbcDataSourceFactoryEntry.setStatus('current')
jdbcDataSourceFactoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 575, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceFactoryIndex.setStatus('current')
jdbcDataSourceFactoryObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 575, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceFactoryObjectName.setStatus('current')
jdbcDataSourceFactoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 575, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceFactoryType.setStatus('current')
jdbcDataSourceFactoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 575, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceFactoryName.setStatus('current')
jdbcDataSourceFactoryParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 575, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceFactoryParent.setStatus('current')
jdbcDataSourceFactoryDriverClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 575, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceFactoryDriverClassName.setStatus('current')
jdbcDataSourceFactoryFactoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 575, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceFactoryFactoryName.setStatus('current')
jdbcDataSourceFactoryURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 575, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceFactoryURL.setStatus('current')
jdbcDataSourceFactoryUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 575, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceFactoryUserName.setStatus('current')
jmsBridgeDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 595), )
if mibBuilder.loadTexts: jmsBridgeDestinationTable.setStatus('current')
jmsBridgeDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 595, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsBridgeDestinationIndex"))
if mibBuilder.loadTexts: jmsBridgeDestinationEntry.setStatus('current')
jmsBridgeDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationIndex.setStatus('current')
jmsBridgeDestinationObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationObjectName.setStatus('current')
jmsBridgeDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationType.setStatus('current')
jmsBridgeDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationName.setStatus('current')
jmsBridgeDestinationParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationParent.setStatus('current')
jmsBridgeDestinationConnectionFactoryJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationConnectionFactoryJNDIName.setStatus('current')
jmsBridgeDestinationConnectionURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationConnectionURL.setStatus('current')
jmsBridgeDestinationDestinationJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationDestinationJNDIName.setStatus('current')
jmsBridgeDestinationDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationDestinationType.setStatus('current')
jmsBridgeDestinationInitialContextFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationInitialContextFactory.setStatus('current')
jmsBridgeDestinationAdapterJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationAdapterJNDIName.setStatus('current')
jmsBridgeDestinationClasspath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationClasspath.setStatus('current')
jmsBridgeDestinationUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 595, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsBridgeDestinationUserName.setStatus('current')
jmsConnectionConsumerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 600), )
if mibBuilder.loadTexts: jmsConnectionConsumerTable.setStatus('current')
jmsConnectionConsumerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 600, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsConnectionConsumerIndex"))
if mibBuilder.loadTexts: jmsConnectionConsumerEntry.setStatus('current')
jmsConnectionConsumerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 600, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionConsumerIndex.setStatus('current')
jmsConnectionConsumerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 600, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionConsumerObjectName.setStatus('current')
jmsConnectionConsumerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 600, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionConsumerType.setStatus('current')
jmsConnectionConsumerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 600, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionConsumerName.setStatus('current')
jmsConnectionConsumerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 600, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionConsumerParent.setStatus('current')
jmsConnectionConsumerMessagesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 600, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionConsumerMessagesMaximum.setStatus('current')
jmsConnectionConsumerSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 600, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionConsumerSelector.setStatus('current')
jmsConnectionConsumerDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 600, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsConnectionConsumerDestination.setStatus('current')
jmsDestCommonTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 612), )
if mibBuilder.loadTexts: jmsDestCommonTable.setStatus('current')
jmsDestCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 612, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsDestCommonIndex"))
if mibBuilder.loadTexts: jmsDestCommonEntry.setStatus('current')
jmsDestCommonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonIndex.setStatus('current')
jmsDestCommonObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonObjectName.setStatus('current')
jmsDestCommonType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonType.setStatus('current')
jmsDestCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonName.setStatus('current')
jmsDestCommonParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonParent.setStatus('current')
jmsDestCommonBytesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonBytesMaximum.setStatus('current')
jmsDestCommonBytesThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonBytesThresholdHigh.setStatus('current')
jmsDestCommonBytesThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonBytesThresholdLow.setStatus('current')
jmsDestCommonDeliveryModeOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonDeliveryModeOverride.setStatus('current')
jmsDestCommonMessagesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonMessagesMaximum.setStatus('current')
jmsDestCommonMessagesThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonMessagesThresholdHigh.setStatus('current')
jmsDestCommonMessagesThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonMessagesThresholdLow.setStatus('current')
jmsDestCommonPriorityOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonPriorityOverride.setStatus('current')
jmsDestCommonRedeliveryDelayOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonRedeliveryDelayOverride.setStatus('current')
jmsDestCommonRedeliveryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonRedeliveryLimit.setStatus('current')
jmsDestCommonTimeToDeliverOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonTimeToDeliverOverride.setStatus('current')
jmsDestCommonTimeToLiveOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 612, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestCommonTimeToLiveOverride.setStatus('current')
jmsDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 615), )
if mibBuilder.loadTexts: jmsDestinationTable.setStatus('current')
jmsDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 615, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsDestinationIndex"))
if mibBuilder.loadTexts: jmsDestinationEntry.setStatus('current')
jmsDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 615, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationIndex.setStatus('current')
jmsDestinationObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 615, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationObjectName.setStatus('current')
jmsDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 615, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationType.setStatus('current')
jmsDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 615, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationName.setStatus('current')
jmsDestinationParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 615, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationParent.setStatus('current')
jmsDestinationBytesPagingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 615, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationBytesPagingEnabled.setStatus('current')
jmsDestinationJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 615, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationJNDIName.setStatus('current')
jmsDestinationMessagesPagingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 615, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationMessagesPagingEnabled.setStatus('current')
jmsDestinationStoreEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 615, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationStoreEnabled.setStatus('current')
jmsDestinationJNDINameReplicated = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 615, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDestinationJNDINameReplicated.setStatus('current')
jmsDistributedDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 623), )
if mibBuilder.loadTexts: jmsDistributedDestinationTable.setStatus('current')
jmsDistributedDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 623, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsDistributedDestinationIndex"))
if mibBuilder.loadTexts: jmsDistributedDestinationEntry.setStatus('current')
jmsDistributedDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 623, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationIndex.setStatus('current')
jmsDistributedDestinationObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 623, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationObjectName.setStatus('current')
jmsDistributedDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 623, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationType.setStatus('current')
jmsDistributedDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 623, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationName.setStatus('current')
jmsDistributedDestinationParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 623, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationParent.setStatus('current')
jmsDistributedDestinationLoadBalancingPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 623, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationLoadBalancingPolicy.setStatus('current')
jmsDistributedDestinationMemberTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 624), )
if mibBuilder.loadTexts: jmsDistributedDestinationMemberTable.setStatus('current')
jmsDistributedDestinationMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 624, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsDistributedDestinationMemberIndex"))
if mibBuilder.loadTexts: jmsDistributedDestinationMemberEntry.setStatus('current')
jmsDistributedDestinationMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 624, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationMemberIndex.setStatus('current')
jmsDistributedDestinationMemberObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 624, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationMemberObjectName.setStatus('current')
jmsDistributedDestinationMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 624, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationMemberType.setStatus('current')
jmsDistributedDestinationMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 624, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationMemberName.setStatus('current')
jmsDistributedDestinationMemberParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 624, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationMemberParent.setStatus('current')
jmsDistributedDestinationMemberWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 624, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsDistributedDestinationMemberWeight.setStatus('current')
jmsServerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 660), )
if mibBuilder.loadTexts: jmsServerTable.setStatus('current')
jmsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 660, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsServerIndex"))
if mibBuilder.loadTexts: jmsServerEntry.setStatus('current')
jmsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerIndex.setStatus('current')
jmsServerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerObjectName.setStatus('current')
jmsServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerType.setStatus('current')
jmsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerName.setStatus('current')
jmsServerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerParent.setStatus('current')
jmsServerBytesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerBytesMaximum.setStatus('current')
jmsServerBytesThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerBytesThresholdHigh.setStatus('current')
jmsServerBytesThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerBytesThresholdLow.setStatus('current')
jmsServerMessagesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerMessagesMaximum.setStatus('current')
jmsServerMessagesThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerMessagesThresholdHigh.setStatus('current')
jmsServerMessagesThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerMessagesThresholdLow.setStatus('current')
jmsServerInsertionPausedAtStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 71), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerInsertionPausedAtStartup.setStatus('current')
jmsServerStoreEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 72), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerStoreEnabled.setStatus('current')
jmsServerAllowsPersistentDowngrade = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerAllowsPersistentDowngrade.setStatus('current')
jmsServerExpirationScanInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerExpirationScanInterval.setStatus('current')
jmsServerProductionPausedAtStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 75), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerProductionPausedAtStartup.setStatus('current')
jmsServerTemporaryTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerTemporaryTemplateName.setStatus('current')
jmsServerMaximumMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerMaximumMessageSize.setStatus('current')
jmsServerDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerDeploymentOrder.setStatus('current')
jmsServerMessageBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerMessageBufferSize.setStatus('current')
jmsServerBlockingSendPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 80), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerBlockingSendPolicy.setStatus('current')
jmsServerHostingTemporaryDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 81), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerHostingTemporaryDestinations.setStatus('current')
jmsServerPagingDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 82), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerPagingDirectory.setStatus('current')
jmsServerTemporaryTemplateResource = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 83), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerTemporaryTemplateResource.setStatus('current')
jmsServerConsumptionPausedAtStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 84), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerConsumptionPausedAtStartup.setStatus('current')
jmsServerMessagesPagingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 85), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerMessagesPagingEnabled.setStatus('current')
jmsServerBytesPagingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 86), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerBytesPagingEnabled.setStatus('current')
jmsServerPagingMinWindowBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerPagingMinWindowBufferSize.setStatus('current')
jmsServerPagingFileLockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 88), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerPagingFileLockingEnabled.setStatus('current')
jmsServerPagingIoBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerPagingIoBufferSize.setStatus('current')
jmsServerPagingBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerPagingBlockSize.setStatus('current')
jmsServerPagingMaxFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerPagingMaxFileSize.setStatus('current')
jmsServerPagingMaxWindowBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 660, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsServerPagingMaxWindowBufferSize.setStatus('current')
jmsSessionPoolTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 670), )
if mibBuilder.loadTexts: jmsSessionPoolTable.setStatus('current')
jmsSessionPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 670, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsSessionPoolIndex"))
if mibBuilder.loadTexts: jmsSessionPoolEntry.setStatus('current')
jmsSessionPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 670, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolIndex.setStatus('current')
jmsSessionPoolObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 670, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolObjectName.setStatus('current')
jmsSessionPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 670, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolType.setStatus('current')
jmsSessionPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 670, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolName.setStatus('current')
jmsSessionPoolParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 670, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolParent.setStatus('current')
jmsSessionPoolConnectionFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 670, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolConnectionFactory.setStatus('current')
jmsSessionPoolListenerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 670, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolListenerClass.setStatus('current')
jmsSessionPoolAcknowledgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 670, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolAcknowledgeMode.setStatus('current')
jmsSessionPoolSessionsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 670, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolSessionsMaximum.setStatus('current')
jmsSessionPoolTransacted = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 670, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSessionPoolTransacted.setStatus('current')
jmsVirtualDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 682), )
if mibBuilder.loadTexts: jmsVirtualDestinationTable.setStatus('current')
jmsVirtualDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 682, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsVirtualDestinationIndex"))
if mibBuilder.loadTexts: jmsVirtualDestinationEntry.setStatus('current')
jmsVirtualDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 682, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsVirtualDestinationIndex.setStatus('current')
jmsVirtualDestinationObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 682, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsVirtualDestinationObjectName.setStatus('current')
jmsVirtualDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 682, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsVirtualDestinationType.setStatus('current')
jmsVirtualDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 682, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsVirtualDestinationName.setStatus('current')
jmsVirtualDestinationParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 682, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsVirtualDestinationParent.setStatus('current')
jmsVirtualDestinationJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 682, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsVirtualDestinationJNDIName.setStatus('current')
jtaTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 690), )
if mibBuilder.loadTexts: jtaTable.setStatus('current')
jtaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 690, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jtaIndex"))
if mibBuilder.loadTexts: jtaEntry.setStatus('current')
jtaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaIndex.setStatus('current')
jtaObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaObjectName.setStatus('current')
jtaType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaType.setStatus('current')
jtaName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaName.setStatus('current')
jtaParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaParent.setStatus('current')
jtaTimeoutSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaTimeoutSeconds.setStatus('current')
jtaAbandonTimeoutSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaAbandonTimeoutSeconds.setStatus('current')
jtaForgetHeuristics = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaForgetHeuristics.setStatus('current')
jtaBeforeCompletionIterationLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaBeforeCompletionIterationLimit.setStatus('current')
jtaMaxTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMaxTransactions.setStatus('current')
jtaMaxUniqueNameStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMaxUniqueNameStatistics.setStatus('current')
jtaMaxResourceRequestsOnServer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMaxResourceRequestsOnServer.setStatus('current')
jtaMaxResourceUnavailableMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMaxResourceUnavailableMillis.setStatus('current')
jtaCheckpointIntervalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaCheckpointIntervalSeconds.setStatus('current')
jtaSerializeEnlistmentsGCIntervalMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaSerializeEnlistmentsGCIntervalMillis.setStatus('current')
jtaUnregisterResourceGracePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaUnregisterResourceGracePeriod.setStatus('current')
jtaSecurityInteropMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaSecurityInteropMode.setStatus('current')
jtaMaxXACallMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMaxXACallMillis.setStatus('current')
jtaWSATIssuedTokenEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 59), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaWSATIssuedTokenEnabled.setStatus('current')
jtaCompletionTimeoutSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaCompletionTimeoutSeconds.setStatus('current')
jtaParallelXAEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 61), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaParallelXAEnabled.setStatus('current')
jtaWSATTransportSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 62), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaWSATTransportSecurityMode.setStatus('current')
jtaTwoPhaseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 690, 1, 63), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaTwoPhaseEnabled.setStatus('current')
kernelTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 692), )
if mibBuilder.loadTexts: kernelTable.setStatus('current')
kernelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 692, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "kernelIndex"))
if mibBuilder.loadTexts: kernelEntry.setStatus('current')
kernelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelIndex.setStatus('current')
kernelObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelObjectName.setStatus('current')
kernelType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelType.setStatus('current')
kernelName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelName.setStatus('current')
kernelParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelParent.setStatus('current')
kernelCompleteCOMMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelCompleteCOMMessageTimeout.setStatus('current')
kernelCompleteHTTPMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelCompleteHTTPMessageTimeout.setStatus('current')
kernelCompleteIIOPMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelCompleteIIOPMessageTimeout.setStatus('current')
kernelCompleteT3MessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelCompleteT3MessageTimeout.setStatus('current')
kernelDefaultProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelDefaultProtocol.setStatus('current')
kernelDefaultSecureProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelDefaultSecureProtocol.setStatus('current')
kernelDGCIdlePeriodsUntilTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelDGCIdlePeriodsUntilTimeout.setStatus('current')
kernelIdleIIOPConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelIdleIIOPConnectionTimeout.setStatus('current')
kernelMaxCOMMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelMaxCOMMessageSize.setStatus('current')
kernelMaxHTTPMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelMaxHTTPMessageSize.setStatus('current')
kernelMaxIIOPMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelMaxIIOPMessageSize.setStatus('current')
kernelMaxOpenSockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelMaxOpenSockCount.setStatus('current')
kernelMaxT3MessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelMaxT3MessageSize.setStatus('current')
kernelStuckThreadMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelStuckThreadMaxTime.setStatus('current')
kernelStuckThreadTimerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelStuckThreadTimerInterval.setStatus('current')
kernelThreadPoolPercentSocketReaders = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelThreadPoolPercentSocketReaders.setStatus('current')
kernelInstrumentStackTraceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelInstrumentStackTraceEnabled.setStatus('current')
kernelLogRemoteExceptionsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelLogRemoteExceptionsEnabled.setStatus('current')
kernelNativeIOEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 140), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelNativeIOEnabled.setStatus('current')
kernelReverseDNSAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 145), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelReverseDNSAllowed.setStatus('current')
kernelIdleConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 161), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelIdleConnectionTimeout.setStatus('current')
kernelIIOPTxMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 162), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelIIOPTxMechanism.setStatus('current')
kernelCompleteMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 163), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelCompleteMessageTimeout.setStatus('current')
kernelConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 164), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelConnectTimeout.setStatus('current')
kernelUse81StyleExecuteQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 165), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelUse81StyleExecuteQueues.setStatus('current')
kernelMuxerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 166), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelMuxerClass.setStatus('current')
kernelPeriodLength = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 167), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelPeriodLength.setStatus('current')
kernelSocketReaders = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 168), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelSocketReaders.setStatus('current')
kernelIdlePeriodsUntilTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 169), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelIdlePeriodsUntilTimeout.setStatus('current')
kernelMessagingBridgeThreadPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 170), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelMessagingBridgeThreadPoolSize.setStatus('current')
kernelAdministrationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 171), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelAdministrationProtocol.setStatus('current')
kernelOutboundPrivateKeyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 172), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelOutboundPrivateKeyEnabled.setStatus('current')
kernelSocketBufferSizeAsChunkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 173), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelSocketBufferSizeAsChunkSize.setStatus('current')
kernelMaxMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 174), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelMaxMessageSize.setStatus('current')
kernelOutboundEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 175), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelOutboundEnabled.setStatus('current')
kernelGatheredWritesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 176), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelGatheredWritesEnabled.setStatus('current')
kernelScatteredReadsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 692, 1, 177), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelScatteredReadsEnabled.setStatus('current')
logTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 700), )
if mibBuilder.loadTexts: logTable.setStatus('current')
logEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 700, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "logIndex"))
if mibBuilder.loadTexts: logEntry.setStatus('current')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logIndex.setStatus('current')
logObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logObjectName.setStatus('current')
logType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logType.setStatus('current')
logName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logName.setStatus('current')
logParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logParent.setStatus('current')
logFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileName.setStatus('current')
logRotationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRotationType.setStatus('current')
logNumberOfFilesLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logNumberOfFilesLimited.setStatus('current')
logFileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileCount.setStatus('current')
logFileTimeSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileTimeSpan.setStatus('current')
logFileMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileMinSize.setStatus('current')
logRedirectStderrToServerLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRedirectStderrToServerLogEnabled.setStatus('current')
logLogFileSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logLogFileSeverity.setStatus('current')
logLoggerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 53), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logLoggerSeverity.setStatus('current')
logBufferSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logBufferSizeKB.setStatus('current')
logMemoryBufferSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 55), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMemoryBufferSeverity.setStatus('current')
logLog4jLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logLog4jLoggingEnabled.setStatus('current')
logRotationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 57), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRotationTime.setStatus('current')
logStdoutLogStack = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 58), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logStdoutLogStack.setStatus('current')
logRotateLogOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 59), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRotateLogOnStartup.setStatus('current')
logRedirectStdoutToServerLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 60), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRedirectStdoutToServerLogEnabled.setStatus('current')
logMemoryBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMemoryBufferSize.setStatus('current')
logStdoutFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 62), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logStdoutFormat.setStatus('current')
logDomainLogBroadcasterBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logDomainLogBroadcasterBufferSize.setStatus('current')
logDateFormatPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 64), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logDateFormatPattern.setStatus('current')
logDomainLogBroadcastSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logDomainLogBroadcastSeverity.setStatus('current')
logStdoutSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 66), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logStdoutSeverity.setStatus('current')
logLogFileRotationDir = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 67), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logLogFileRotationDir.setStatus('current')
logServerLoggingBridgeUseParentLoggersEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 700, 1, 68), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logServerLoggingBridgeUseParentLoggersEnabled.setStatus('current')
networkChannelTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 703), )
if mibBuilder.loadTexts: networkChannelTable.setStatus('current')
networkChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 703, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "networkChannelIndex"))
if mibBuilder.loadTexts: networkChannelEntry.setStatus('current')
networkChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelIndex.setStatus('current')
networkChannelObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelObjectName.setStatus('current')
networkChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelType.setStatus('current')
networkChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelName.setStatus('current')
networkChannelParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelParent.setStatus('current')
networkChannelAcceptBacklog = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelAcceptBacklog.setStatus('current')
networkChannelChannelWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelChannelWeight.setStatus('current')
networkChannelClusterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelClusterAddress.setStatus('current')
networkChannelCompleteCOMMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelCompleteCOMMessageTimeout.setStatus('current')
networkChannelCompleteHTTPMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelCompleteHTTPMessageTimeout.setStatus('current')
networkChannelCompleteT3MessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelCompleteT3MessageTimeout.setStatus('current')
networkChannelDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelDescription.setStatus('current')
networkChannelListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelListenPort.setStatus('current')
networkChannelLoginTimeoutMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelLoginTimeoutMillis.setStatus('current')
networkChannelLoginTimeoutMillisSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelLoginTimeoutMillisSSL.setStatus('current')
networkChannelMaxCOMMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelMaxCOMMessageSize.setStatus('current')
networkChannelMaxT3MessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelMaxT3MessageSize.setStatus('current')
networkChannelMaxHTTPMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelMaxHTTPMessageSize.setStatus('current')
networkChannelSSLListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelSSLListenPort.setStatus('current')
networkChannelTunnelingClientPingSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelTunnelingClientPingSecs.setStatus('current')
networkChannelTunnelingClientTimeoutSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelTunnelingClientTimeoutSecs.setStatus('current')
networkChannelBoundOutgoingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelBoundOutgoingEnabled.setStatus('current')
networkChannelCOMEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelCOMEnabled.setStatus('current')
networkChannelHTTPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelHTTPEnabled.setStatus('current')
networkChannelHTTPSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelHTTPSEnabled.setStatus('current')
networkChannelListenPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelListenPortEnabled.setStatus('current')
networkChannelOutgoingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelOutgoingEnabled.setStatus('current')
networkChannelSSLListenPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelSSLListenPortEnabled.setStatus('current')
networkChannelT3Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 140), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelT3Enabled.setStatus('current')
networkChannelT3SEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 145), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelT3SEnabled.setStatus('current')
networkChannelTunnelingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 150), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelTunnelingEnabled.setStatus('current')
networkChannelDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 703, 1, 151), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkChannelDeploymentOrder.setStatus('current')
networkAccessPointTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 705), )
if mibBuilder.loadTexts: networkAccessPointTable.setStatus('current')
networkAccessPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 705, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "networkAccessPointIndex"))
if mibBuilder.loadTexts: networkAccessPointEntry.setStatus('current')
networkAccessPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointIndex.setStatus('current')
networkAccessPointObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointObjectName.setStatus('current')
networkAccessPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointType.setStatus('current')
networkAccessPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointName.setStatus('current')
networkAccessPointParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointParent.setStatus('current')
networkAccessPointAcceptBacklog = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointAcceptBacklog.setStatus('current')
networkAccessPointListenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointListenAddress.setStatus('current')
networkAccessPointListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointListenPort.setStatus('current')
networkAccessPointLoginTimeoutMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointLoginTimeoutMillis.setStatus('current')
networkAccessPointTunnelingClientPingSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointTunnelingClientPingSecs.setStatus('current')
networkAccessPointTunnelingClientTimeoutSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointTunnelingClientTimeoutSecs.setStatus('current')
networkAccessPointUseFastSerialization = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointUseFastSerialization.setStatus('current')
networkAccessPointProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointProxyPort.setStatus('current')
networkAccessPointTwoWaySSLEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 78), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointTwoWaySSLEnabled.setStatus('current')
networkAccessPointChannelWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointChannelWeight.setStatus('current')
networkAccessPointHttpEnabledForThisProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 80), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointHttpEnabledForThisProtocol.setStatus('current')
networkAccessPointTimeoutConnectionWithPendingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 81), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointTimeoutConnectionWithPendingResponses.setStatus('current')
networkAccessPointOutboundEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 82), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointOutboundEnabled.setStatus('current')
networkAccessPointEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 83), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointEnabled.setStatus('current')
networkAccessPointCustomPrivateKeyAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 84), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointCustomPrivateKeyAlias.setStatus('current')
networkAccessPointConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointConnectTimeout.setStatus('current')
networkAccessPointMaxConnectedClients = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointMaxConnectedClients.setStatus('current')
networkAccessPointIdleConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointIdleConnectionTimeout.setStatus('current')
networkAccessPointMaxBackoffBetweenFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointMaxBackoffBetweenFailures.setStatus('current')
networkAccessPointProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 89), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointProtocol.setStatus('current')
networkAccessPointPrivateKeyAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 90), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointPrivateKeyAlias.setStatus('current')
networkAccessPointTunnelingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 91), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointTunnelingEnabled.setStatus('current')
networkAccessPointClusterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 92), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointClusterAddress.setStatus('current')
networkAccessPointChannelIdentityCustomized = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 93), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointChannelIdentityCustomized.setStatus('current')
networkAccessPointMaxMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointMaxMessageSize.setStatus('current')
networkAccessPointPublicPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointPublicPort.setStatus('current')
networkAccessPointOutboundPrivateKeyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 96), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointOutboundPrivateKeyEnabled.setStatus('current')
networkAccessPointCompleteMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointCompleteMessageTimeout.setStatus('current')
networkAccessPointPublicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 98), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointPublicAddress.setStatus('current')
networkAccessPointClientCertificateEnforced = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 99), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointClientCertificateEnforced.setStatus('current')
networkAccessPointPrivateKeyPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 100), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointPrivateKeyPassPhrase.setStatus('current')
networkAccessPointProxyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 101), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointProxyAddress.setStatus('current')
networkAccessPointSDPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 705, 1, 102), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessPointSDPEnabled.setStatus('current')
nodeManagerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 707), )
if mibBuilder.loadTexts: nodeManagerTable.setStatus('current')
nodeManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 707, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "nodeManagerIndex"))
if mibBuilder.loadTexts: nodeManagerEntry.setStatus('current')
nodeManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerIndex.setStatus('current')
nodeManagerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerObjectName.setStatus('current')
nodeManagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerType.setStatus('current')
nodeManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerName.setStatus('current')
nodeManagerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerParent.setStatus('current')
nodeManagerListenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerListenAddress.setStatus('current')
nodeManagerListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerListenPort.setStatus('current')
nodeManagerShellCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerShellCommand.setStatus('current')
nodeManagerNodeManagerHome = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerNodeManagerHome.setStatus('current')
nodeManagerDebugEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerDebugEnabled.setStatus('current')
nodeManagerNMType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerNMType.setStatus('current')
nodeManagerUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerUserName.setStatus('current')
nodeManagerInstalledVMMAdapters = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerInstalledVMMAdapters.setStatus('current')
nodeManagerAdapterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerAdapterVersion.setStatus('current')
nodeManagerAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerAdapterName.setStatus('current')
nodeManagerAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 707, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeManagerAdapter.setStatus('current')
rmcFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 708), )
if mibBuilder.loadTexts: rmcFactoryTable.setStatus('current')
rmcFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 708, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "rmcFactoryIndex"))
if mibBuilder.loadTexts: rmcFactoryEntry.setStatus('current')
rmcFactoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 708, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmcFactoryIndex.setStatus('current')
rmcFactoryObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 708, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmcFactoryObjectName.setStatus('current')
rmcFactoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 708, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmcFactoryType.setStatus('current')
rmcFactoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 708, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmcFactoryName.setStatus('current')
rmcFactoryParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 708, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmcFactoryParent.setStatus('current')
rmcFactoryJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 708, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmcFactoryJNDIName.setStatus('current')
rmcFactoryDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 708, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmcFactoryDeploymentOrder.setStatus('current')
securityTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 710), )
if mibBuilder.loadTexts: securityTable.setStatus('current')
securityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 710, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "securityIndex"))
if mibBuilder.loadTexts: securityEntry.setStatus('current')
securityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 710, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityIndex.setStatus('current')
securityObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 710, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityObjectName.setStatus('current')
securityType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 710, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityType.setStatus('current')
securityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 710, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityName.setStatus('current')
securityParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 710, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityParent.setStatus('current')
securityConnectionFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 710, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConnectionFilter.setStatus('current')
securityConnectionFilterRules = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 710, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConnectionFilterRules.setStatus('current')
securityConnectionLoggerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 710, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConnectionLoggerEnabled.setStatus('current')
serverTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 730), )
if mibBuilder.loadTexts: serverTable.setStatus('current')
serverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 730, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serverIndex"))
if mibBuilder.loadTexts: serverEntry.setStatus('current')
serverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIndex.setStatus('current')
serverObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverObjectName.setStatus('current')
serverType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverType.setStatus('current')
serverName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverName.setStatus('current')
serverParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverParent.setStatus('current')
serverReverseDNSAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverReverseDNSAllowed.setStatus('current')
serverDefaultProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDefaultProtocol.setStatus('current')
serverDefaultSecureProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDefaultSecureProtocol.setStatus('current')
serverNativeIOEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNativeIOEnabled.setStatus('current')
serverThreadPoolPercentSocketReaders = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverThreadPoolPercentSocketReaders.setStatus('current')
serverMaxT3MessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMaxT3MessageSize.setStatus('current')
serverMaxHTTPMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMaxHTTPMessageSize.setStatus('current')
serverMaxIIOPMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMaxIIOPMessageSize.setStatus('current')
serverCompleteT3MessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCompleteT3MessageTimeout.setStatus('current')
serverCompleteHTTPMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCompleteHTTPMessageTimeout.setStatus('current')
serverCompleteIIOPMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCompleteIIOPMessageTimeout.setStatus('current')
serverLogRemoteExceptionsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLogRemoteExceptionsEnabled.setStatus('current')
serverInstrumentStackTraceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverInstrumentStackTraceEnabled.setStatus('current')
serverListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverListenPort.setStatus('current')
serverClusterWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverClusterWeight.setStatus('current')
serverReplicationGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 140), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverReplicationGroup.setStatus('current')
serverPreferredSecondaryGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 145), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPreferredSecondaryGroup.setStatus('current')
serverJDBCLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverJDBCLoggingEnabled.setStatus('current')
serverIIOPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 185), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIIOPEnabled.setStatus('current')
serverDefaultIIOPUser = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 190), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDefaultIIOPUser.setStatus('current')
serverHttpdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 195), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverHttpdEnabled.setStatus('current')
serverListenThreadStartDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 215), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverListenThreadStartDelaySecs.setStatus('current')
serverListenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 220), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverListenAddress.setStatus('current')
serverLoginTimeoutMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 225), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLoginTimeoutMillis.setStatus('current')
serverAdministrationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 230), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAdministrationPort.setStatus('current')
serverJavaCompiler = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 235), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverJavaCompiler.setStatus('current')
serverJavaCompilerPreClassPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 240), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverJavaCompilerPreClassPath.setStatus('current')
serverJavaCompilerPostClassPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 245), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverJavaCompilerPostClassPath.setStatus('current')
serverExtraRmicOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 250), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverExtraRmicOptions.setStatus('current')
serverTransactionLogFilePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 255), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTransactionLogFilePrefix.setStatus('current')
serverTunnelingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 265), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTunnelingEnabled.setStatus('current')
serverTunnelingClientTimeoutSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 270), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTunnelingClientTimeoutSecs.setStatus('current')
serverTunnelingClientPingSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 275), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTunnelingClientPingSecs.setStatus('current')
serverJMSDefaultConnectionFactoriesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 280), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverJMSDefaultConnectionFactoriesEnabled.setStatus('current')
serverAcceptBacklog = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 286), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAcceptBacklog.setStatus('current')
serverListenPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 287), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverListenPortEnabled.setStatus('current')
serverUse81StyleExecuteQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 288), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverUse81StyleExecuteQueues.setStatus('current')
serverStagingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 289), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStagingMode.setStatus('current')
serverLowMemoryGCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 290), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLowMemoryGCThreshold.setStatus('current')
serverStagingDirectoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 291), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStagingDirectoryName.setStatus('current')
serverGracefulShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 292), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverGracefulShutdownTimeout.setStatus('current')
serverManagedServerIndependenceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 293), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverManagedServerIndependenceEnabled.setStatus('current')
serverStartupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 294), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartupTimeout.setStatus('current')
serverSocketBufferSizeAsChunkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 295), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSocketBufferSizeAsChunkSize.setStatus('current')
serverRestartMax = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 296), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRestartMax.setStatus('current')
serverCompleteMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 297), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCompleteMessageTimeout.setStatus('current')
serverServerLifeCycleTimeoutVal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 298), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverServerLifeCycleTimeoutVal.setStatus('current')
serverVerboseEJBDeploymentEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 299), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverVerboseEJBDeploymentEnabled.setStatus('current')
serverAdminReconnectIntervalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 300), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAdminReconnectIntervalSeconds.setStatus('current')
serverClientCertProxyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 301), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverClientCertProxyEnabled.setStatus('current')
serverRestartDelaySeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 302), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRestartDelaySeconds.setStatus('current')
serverLowMemoryGranularityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 303), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLowMemoryGranularityLevel.setStatus('current')
serverSocketReaders = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 304), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSocketReaders.setStatus('current')
serverOutboundEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 305), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverOutboundEnabled.setStatus('current')
serverJDBCLLRTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 306), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverJDBCLLRTableName.setStatus('current')
serverInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 307), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverInterfaceAddress.setStatus('current')
serverExtraEjbcOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 308), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverExtraEjbcOptions.setStatus('current')
serverCOMEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 309), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCOMEnabled.setStatus('current')
serverMessageIdPrefixEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 310), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMessageIdPrefixEnabled.setStatus('current')
serverAutoRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 311), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAutoRestart.setStatus('current')
serverIgnoreSessionsDuringShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 312), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIgnoreSessionsDuringShutdown.setStatus('current')
serverDefaultTGIOPUser = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 313), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDefaultTGIOPUser.setStatus('current')
serverMaxOpenSockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 314), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMaxOpenSockCount.setStatus('current')
serverLowMemorySampleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 315), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLowMemorySampleSize.setStatus('current')
serverAutoKillIfFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 316), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAutoKillIfFailed.setStatus('current')
serverCustomIdentityKeyStoreFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 317), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCustomIdentityKeyStoreFileName.setStatus('current')
serverTGIOPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 318), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTGIOPEnabled.setStatus('current')
serverHealthCheckStartDelaySeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 319), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverHealthCheckStartDelaySeconds.setStatus('current')
serverUploadDirectoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 320), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverUploadDirectoryName.setStatus('current')
serverWeblogicPluginEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 321), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverWeblogicPluginEnabled.setStatus('current')
serverJDBCLoginTimeoutSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 322), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverJDBCLoginTimeoutSeconds.setStatus('current')
serverClasspathServletDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 323), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverClasspathServletDisabled.setStatus('current')
serverIdleConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 324), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIdleConnectionTimeout.setStatus('current')
serverDefaultInternalServletsDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 325), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDefaultInternalServletsDisabled.setStatus('current')
serverMaxMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 326), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMaxMessageSize.setStatus('current')
serverCustomTrustKeyStoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 327), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCustomTrustKeyStoreType.setStatus('current')
serverListenersBindEarly = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 328), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverListenersBindEarly.setStatus('current')
serverLowMemoryTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 329), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLowMemoryTimeInterval.setStatus('current')
serverTransactionLogFileWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 330), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTransactionLogFileWritePolicy.setStatus('current')
serverHttpTraceSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 331), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverHttpTraceSupportEnabled.setStatus('current')
serverKeyStores = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 332), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverKeyStores.setStatus('current')
serverAutoMigrationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 333), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAutoMigrationEnabled.setStatus('current')
serverPeriodLength = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 334), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverPeriodLength.setStatus('current')
serverStuckThreadTimerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 335), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStuckThreadTimerInterval.setStatus('current')
serverDGCIdlePeriodsUntilTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 336), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDGCIdlePeriodsUntilTimeout.setStatus('current')
serverMuxerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 337), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMuxerClass.setStatus('current')
serverHealthCheckIntervalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 338), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverHealthCheckIntervalSeconds.setStatus('current')
serverRestartIntervalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 339), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRestartIntervalSeconds.setStatus('current')
serverIdlePeriodsUntilTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 340), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIdlePeriodsUntilTimeout.setStatus('current')
serverCustomTrustKeyStoreFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 341), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCustomTrustKeyStoreFileName.setStatus('current')
serverHostsMigratableServices = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 342), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverHostsMigratableServices.setStatus('current')
serverExternalDNSName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 343), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverExternalDNSName.setStatus('current')
serverOutboundPrivateKeyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 344), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverOutboundPrivateKeyEnabled.setStatus('current')
serverAdministrationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 345), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAdministrationProtocol.setStatus('current')
serverCustomIdentityKeyStoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 346), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCustomIdentityKeyStoreType.setStatus('current')
serverStartupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 347), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartupMode.setStatus('current')
serverNMSocketCreateTimeoutInMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 348), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNMSocketCreateTimeoutInMillis.setStatus('current')
serverListenDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 349), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverListenDelaySecs.setStatus('current')
serverIdleIIOPConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 350), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIdleIIOPConnectionTimeout.setStatus('current')
serverMaxCOMMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 351), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMaxCOMMessageSize.setStatus('current')
serverMessagingBridgeThreadPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 352), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMessagingBridgeThreadPoolSize.setStatus('current')
serverServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 353), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverServerVersion.setStatus('current')
serverIIOPTxMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 354), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIIOPTxMechanism.setStatus('current')
serverMSIFileReplicationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 355), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMSIFileReplicationEnabled.setStatus('current')
serverJNDITransportableObjectFactoryList = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 356), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverJNDITransportableObjectFactoryList.setStatus('current')
serverHealthCheckTimeoutSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 357), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverHealthCheckTimeoutSeconds.setStatus('current')
serverStuckThreadMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 358), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStuckThreadMaxTime.setStatus('current')
serverCompleteCOMMessageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 359), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCompleteCOMMessageTimeout.setStatus('current')
serverConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 360), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverConnectTimeout.setStatus('current')
serverGatheredWritesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 361), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverGatheredWritesEnabled.setStatus('current')
serverScatteredReadsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 362), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverScatteredReadsEnabled.setStatus('current')
serverVirtualMachineName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 363), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverVirtualMachineName.setStatus('current')
serverUseFusionForLLR = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 730, 1, 364), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverUseFusionForLLR.setStatus('current')
serverStartTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 735), )
if mibBuilder.loadTexts: serverStartTable.setStatus('current')
serverStartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 735, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serverStartIndex"))
if mibBuilder.loadTexts: serverStartEntry.setStatus('current')
serverStartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartIndex.setStatus('current')
serverStartObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartObjectName.setStatus('current')
serverStartType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartType.setStatus('current')
serverStartName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartName.setStatus('current')
serverStartParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartParent.setStatus('current')
serverStartArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartArguments.setStatus('current')
serverStartBeaHome = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartBeaHome.setStatus('current')
serverStartClassPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartClassPath.setStatus('current')
serverStartJavaHome = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartJavaHome.setStatus('current')
serverStartRootDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartRootDirectory.setStatus('current')
serverStartSecurityPolicyFile = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartSecurityPolicyFile.setStatus('current')
serverStartUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartUsername.setStatus('current')
serverStartJavaVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 735, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStartJavaVendor.setStatus('current')
snmpAgentTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 740), )
if mibBuilder.loadTexts: snmpAgentTable.setStatus('current')
snmpAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 740, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "snmpAgentIndex"))
if mibBuilder.loadTexts: snmpAgentEntry.setStatus('current')
snmpAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentIndex.setStatus('current')
snmpAgentObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentObjectName.setStatus('current')
snmpAgentType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentType.setStatus('current')
snmpAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentName.setStatus('current')
snmpAgentParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentParent.setStatus('current')
snmpAgentCommunityPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentCommunityPrefix.setStatus('current')
snmpAgentDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentDebugLevel.setStatus('current')
snmpAgentMibDataRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentMibDataRefreshInterval.setStatus('current')
snmpAgentServerStatusCheckIntervalFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentServerStatusCheckIntervalFactor.setStatus('current')
snmpAgentSNMPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentSNMPPort.setStatus('current')
snmpAgentSNMPTrapVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentSNMPTrapVersion.setStatus('current')
snmpAgentEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentEnabled.setStatus('current')
snmpAgentSendAutomaticTrapsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentSendAutomaticTrapsEnabled.setStatus('current')
snmpAgentMaxInformRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentMaxInformRetryCount.setStatus('current')
snmpAgentInformRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentInformRetryInterval.setStatus('current')
snmpAgentMasterAgentXPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentMasterAgentXPort.setStatus('current')
snmpAgentCommunityBasedAccessEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentCommunityBasedAccessEnabled.setStatus('current')
snmpAgentSNMPAccessForUserMBeansEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentSNMPAccessForUserMBeansEnabled.setStatus('current')
snmpAgentInformEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentInformEnabled.setStatus('current')
snmpAgentPrivacyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentPrivacyProtocol.setStatus('current')
snmpAgentSNMPEngineId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentSNMPEngineId.setStatus('current')
snmpAgentAuthenticationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentAuthenticationProtocol.setStatus('current')
snmpAgentLocalizedKeyCacheInvalidationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 740, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentLocalizedKeyCacheInvalidationInterval.setStatus('current')
sslTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 745), )
if mibBuilder.loadTexts: sslTable.setStatus('current')
sslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 745, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "sslIndex"))
if mibBuilder.loadTexts: sslEntry.setStatus('current')
sslIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslIndex.setStatus('current')
sslObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslObjectName.setStatus('current')
sslType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslType.setStatus('current')
sslName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslName.setStatus('current')
sslParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslParent.setStatus('current')
sslExportKeyLifespan = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslExportKeyLifespan.setStatus('current')
sslHostnameVerifier = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHostnameVerifier.setStatus('current')
sslIdentityAndTrustLocations = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslIdentityAndTrustLocations.setStatus('current')
sslListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslListenPort.setStatus('current')
sslLoginTimeoutMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslLoginTimeoutMillis.setStatus('current')
sslServerCertificateChainFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslServerCertificateChainFileName.setStatus('current')
sslServerCertificateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslServerCertificateFileName.setStatus('current')
sslServerPrivateKeyAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslServerPrivateKeyAlias.setStatus('current')
sslClientCertificateEnforced = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertificateEnforced.setStatus('current')
sslEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslEnabled.setStatus('current')
sslHostnameVerificationIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHostnameVerificationIgnored.setStatus('current')
sslSSLRejectionLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSSLRejectionLoggingEnabled.setStatus('current')
sslTwoWaySSLEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTwoWaySSLEnabled.setStatus('current')
sslOutboundCertificateValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOutboundCertificateValidation.setStatus('current')
sslInboundCertificateValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslInboundCertificateValidation.setStatus('current')
sslCertAuthenticator = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCertAuthenticator.setStatus('current')
sslUseServerCerts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslUseServerCerts.setStatus('current')
sslAllowUnencryptedNullCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslAllowUnencryptedNullCipher.setStatus('current')
sslTrustedCAFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslTrustedCAFileName.setStatus('current')
sslPeerValidationEnforced = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslPeerValidationEnforced.setStatus('current')
sslServerKeyFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslServerKeyFileName.setStatus('current')
sslCiphersuites = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCiphersuites.setStatus('current')
sslJSSEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 745, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslJSSEEnabled.setStatus('current')
startupClassTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 750), )
if mibBuilder.loadTexts: startupClassTable.setStatus('current')
startupClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 750, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "startupClassIndex"))
if mibBuilder.loadTexts: startupClassEntry.setStatus('current')
startupClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassIndex.setStatus('current')
startupClassObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassObjectName.setStatus('current')
startupClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassType.setStatus('current')
startupClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassName.setStatus('current')
startupClassParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassParent.setStatus('current')
startupClassFailureIsFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassFailureIsFatal.setStatus('current')
startupClassDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassDeploymentOrder.setStatus('current')
startupClassLoadBeforeAppDeployments = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassLoadBeforeAppDeployments.setStatus('current')
startupClassArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassArguments.setStatus('current')
startupClassClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassClassName.setStatus('current')
startupClassLoadBeforeAppActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassLoadBeforeAppActivation.setStatus('current')
startupClassLoadAfterAppsRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 750, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startupClassLoadAfterAppsRunning.setStatus('current')
webAppComponentTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 760), )
if mibBuilder.loadTexts: webAppComponentTable.setStatus('current')
webAppComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 760, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webAppComponentIndex"))
if mibBuilder.loadTexts: webAppComponentEntry.setStatus('current')
webAppComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentIndex.setStatus('current')
webAppComponentObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentObjectName.setStatus('current')
webAppComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentType.setStatus('current')
webAppComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentName.setStatus('current')
webAppComponentParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentParent.setStatus('current')
webAppComponentApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentApplication.setStatus('current')
webAppComponentURI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentURI.setStatus('current')
webAppComponentWebServers = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentWebServers.setStatus('current')
webAppComponentIndexDirectoryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentIndexDirectoryEnabled.setStatus('current')
webAppComponentServletExtensionCaseSensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentServletExtensionCaseSensitive.setStatus('current')
webAppComponentServletReloadCheckSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentServletReloadCheckSecs.setStatus('current')
webAppComponentSingleThreadedServletPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentSingleThreadedServletPoolSize.setStatus('current')
webAppComponentAuthRealmName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 760, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppComponentAuthRealmName.setStatus('current')
webServerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 770), )
if mibBuilder.loadTexts: webServerTable.setStatus('current')
webServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 770, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServerIndex"))
if mibBuilder.loadTexts: webServerEntry.setStatus('current')
webServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerIndex.setStatus('current')
webServerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerObjectName.setStatus('current')
webServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerType.setStatus('current')
webServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerName.setStatus('current')
webServerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerParent.setStatus('current')
webServerKeepAliveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerKeepAliveEnabled.setStatus('current')
webServerKeepAliveSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerKeepAliveSecs.setStatus('current')
webServerHttpsKeepAliveSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerHttpsKeepAliveSecs.setStatus('current')
webServerPostTimeoutSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerPostTimeoutSecs.setStatus('current')
webServerMaxPostTimeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerMaxPostTimeSecs.setStatus('current')
webServerMaxPostSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerMaxPostSize.setStatus('current')
webServerWAPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerWAPEnabled.setStatus('current')
webServerSingleSignonDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 126), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerSingleSignonDisabled.setStatus('current')
webServerSendServerHeaderEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 127), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerSendServerHeaderEnabled.setStatus('current')
webServerOverloadResponseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 128), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerOverloadResponseCode.setStatus('current')
webServerClientIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 129), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerClientIpHeader.setStatus('current')
webServerFrontendHTTPSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerFrontendHTTPSPort.setStatus('current')
webServerFrontendHost = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 131), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerFrontendHost.setStatus('current')
webServerAuthCookieEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 132), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerAuthCookieEnabled.setStatus('current')
webServerFrontendHTTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 133), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerFrontendHTTPPort.setStatus('current')
webServerChunkedTransferDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 134), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerChunkedTransferDisabled.setStatus('current')
webServerUseHighestCompatibleHTTPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 135), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerUseHighestCompatibleHTTPVersion.setStatus('current')
webServerWriteChunkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 136), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerWriteChunkBytes.setStatus('current')
webServerAcceptContextPathInGetRealPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 137), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerAcceptContextPathInGetRealPath.setStatus('current')
webServerUseHeaderEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 138), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerUseHeaderEncoding.setStatus('current')
webServerDefaultWebAppContextRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 139), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerDefaultWebAppContextRoot.setStatus('current')
webServerDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 770, 1, 140), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerDeploymentOrder.setStatus('current')
wlecConnectionPoolTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 780), )
if mibBuilder.loadTexts: wlecConnectionPoolTable.setStatus('current')
wlecConnectionPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 780, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlecConnectionPoolIndex"))
if mibBuilder.loadTexts: wlecConnectionPoolEntry.setStatus('current')
wlecConnectionPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 780, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolIndex.setStatus('current')
wlecConnectionPoolObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 780, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolObjectName.setStatus('current')
wlecConnectionPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 780, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolType.setStatus('current')
wlecConnectionPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 780, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolName.setStatus('current')
wlecConnectionPoolParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 780, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolParent.setStatus('current')
wlecConnectionPoolDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 780, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlecConnectionPoolDeploymentOrder.setStatus('current')
bridgeDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 782), )
if mibBuilder.loadTexts: bridgeDestinationTable.setStatus('current')
bridgeDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 782, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "bridgeDestinationIndex"))
if mibBuilder.loadTexts: bridgeDestinationEntry.setStatus('current')
bridgeDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 782, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationIndex.setStatus('current')
bridgeDestinationObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 782, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationObjectName.setStatus('current')
bridgeDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 782, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationType.setStatus('current')
bridgeDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 782, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationName.setStatus('current')
bridgeDestinationParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 782, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationParent.setStatus('current')
bridgeDestinationAdapterJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 782, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationAdapterJNDIName.setStatus('current')
bridgeDestinationClasspath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 782, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationClasspath.setStatus('current')
bridgeDestinationUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 782, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDestinationUserName.setStatus('current')
messagingBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 786), )
if mibBuilder.loadTexts: messagingBridgeTable.setStatus('current')
messagingBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 786, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "messagingBridgeIndex"))
if mibBuilder.loadTexts: messagingBridgeEntry.setStatus('current')
messagingBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeIndex.setStatus('current')
messagingBridgeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeObjectName.setStatus('current')
messagingBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeType.setStatus('current')
messagingBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeName.setStatus('current')
messagingBridgeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeParent.setStatus('current')
messagingBridgeSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeSelector.setStatus('current')
messagingBridgeQualityOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeQualityOfService.setStatus('current')
messagingBridgeIdleTimeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeIdleTimeMaximum.setStatus('current')
messagingBridgeTransactionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeTransactionTimeout.setStatus('current')
messagingBridgeQOSDegradationAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeQOSDegradationAllowed.setStatus('current')
messagingBridgeDurabilityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 101), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeDurabilityEnabled.setStatus('current')
messagingBridgeReconnectDelayMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeReconnectDelayMinimum.setStatus('current')
messagingBridgePreserveMsgProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 103), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgePreserveMsgProperty.setStatus('current')
messagingBridgeBatchSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeBatchSize.setStatus('current')
messagingBridgeReconnectDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeReconnectDelayMaximum.setStatus('current')
messagingBridgeDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeDeploymentOrder.setStatus('current')
messagingBridgeAsyncEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 107), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeAsyncEnabled.setStatus('current')
messagingBridgeBatchInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeBatchInterval.setStatus('current')
messagingBridgeStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 109), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeStarted.setStatus('current')
messagingBridgeReconnectDelayIncrease = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 786, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messagingBridgeReconnectDelayIncrease.setStatus('current')
virtualHostTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 790), )
if mibBuilder.loadTexts: virtualHostTable.setStatus('current')
virtualHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 790, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "virtualHostIndex"))
if mibBuilder.loadTexts: virtualHostEntry.setStatus('current')
virtualHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostIndex.setStatus('current')
virtualHostObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostObjectName.setStatus('current')
virtualHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostType.setStatus('current')
virtualHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostName.setStatus('current')
virtualHostParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostParent.setStatus('current')
virtualHostKeepAliveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostKeepAliveEnabled.setStatus('current')
virtualHostKeepAliveSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostKeepAliveSecs.setStatus('current')
virtualHostHttpsKeepAliveSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostHttpsKeepAliveSecs.setStatus('current')
virtualHostPostTimeoutSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostPostTimeoutSecs.setStatus('current')
virtualHostMaxPostTimeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostMaxPostTimeSecs.setStatus('current')
virtualHostMaxPostSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostMaxPostSize.setStatus('current')
virtualHostWAPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostWAPEnabled.setStatus('current')
virtualHostVirtualHostNames = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 130), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostVirtualHostNames.setStatus('current')
virtualHostFrontendHTTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 131), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostFrontendHTTPPort.setStatus('current')
virtualHostAuthCookieEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 132), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostAuthCookieEnabled.setStatus('current')
virtualHostSingleSignonDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 133), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostSingleSignonDisabled.setStatus('current')
virtualHostChunkedTransferDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 134), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostChunkedTransferDisabled.setStatus('current')
virtualHostAcceptContextPathInGetRealPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 135), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostAcceptContextPathInGetRealPath.setStatus('current')
virtualHostOverloadResponseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 136), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostOverloadResponseCode.setStatus('current')
virtualHostDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 137), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostDeploymentOrder.setStatus('current')
virtualHostNetworkAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 138), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostNetworkAccessPoint.setStatus('current')
virtualHostSendServerHeaderEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 139), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostSendServerHeaderEnabled.setStatus('current')
virtualHostFrontendHost = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 140), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostFrontendHost.setStatus('current')
virtualHostWriteChunkBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 141), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostWriteChunkBytes.setStatus('current')
virtualHostFrontendHTTPSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 142), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostFrontendHTTPSPort.setStatus('current')
virtualHostUseHeaderEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 143), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostUseHeaderEncoding.setStatus('current')
virtualHostUseHighestCompatibleHTTPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 144), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostUseHighestCompatibleHTTPVersion.setStatus('current')
virtualHostDefaultWebAppContextRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 145), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostDefaultWebAppContextRoot.setStatus('current')
virtualHostClientIpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 790, 1, 146), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualHostClientIpHeader.setStatus('current')
xmlEntityCacheTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 794), )
if mibBuilder.loadTexts: xmlEntityCacheTable.setStatus('current')
xmlEntityCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 794, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "xmlEntityCacheIndex"))
if mibBuilder.loadTexts: xmlEntityCacheEntry.setStatus('current')
xmlEntityCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 794, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntityCacheIndex.setStatus('current')
xmlEntityCacheObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 794, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntityCacheObjectName.setStatus('current')
xmlEntityCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 794, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntityCacheType.setStatus('current')
xmlEntityCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 794, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntityCacheName.setStatus('current')
xmlEntityCacheParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 794, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntityCacheParent.setStatus('current')
xmlEntityCacheCacheMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 794, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntityCacheCacheMemorySize.setStatus('current')
xmlEntityCacheCacheDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 794, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntityCacheCacheDiskSize.setStatus('current')
xmlEntityCacheCacheTimeoutInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 794, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntityCacheCacheTimeoutInterval.setStatus('current')
xmlEntityCacheCacheLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 794, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntityCacheCacheLocation.setStatus('current')
xmlEntityCacheMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 794, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntityCacheMaxSize.setStatus('current')
xmlEntitySpecRegistryTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 796), )
if mibBuilder.loadTexts: xmlEntitySpecRegistryTable.setStatus('current')
xmlEntitySpecRegistryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 796, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "xmlEntitySpecRegistryIndex"))
if mibBuilder.loadTexts: xmlEntitySpecRegistryEntry.setStatus('current')
xmlEntitySpecRegistryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistryIndex.setStatus('current')
xmlEntitySpecRegistryObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistryObjectName.setStatus('current')
xmlEntitySpecRegistryType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistryType.setStatus('current')
xmlEntitySpecRegistryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistryName.setStatus('current')
xmlEntitySpecRegistryParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistryParent.setStatus('current')
xmlEntitySpecRegistryPublicId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistryPublicId.setStatus('current')
xmlEntitySpecRegistrySystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistrySystemId.setStatus('current')
xmlEntitySpecRegistryEntityURI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistryEntityURI.setStatus('current')
xmlEntitySpecRegistryWhenToCache = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistryWhenToCache.setStatus('current')
xmlEntitySpecRegistryCacheTimeoutInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistryCacheTimeoutInterval.setStatus('current')
xmlEntitySpecRegistryHandleEntityInvalidation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 796, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlEntitySpecRegistryHandleEntityInvalidation.setStatus('current')
xmlParserSelectRegistryTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 798), )
if mibBuilder.loadTexts: xmlParserSelectRegistryTable.setStatus('current')
xmlParserSelectRegistryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 798, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "xmlParserSelectRegistryIndex"))
if mibBuilder.loadTexts: xmlParserSelectRegistryEntry.setStatus('current')
xmlParserSelectRegistryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistryIndex.setStatus('current')
xmlParserSelectRegistryObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistryObjectName.setStatus('current')
xmlParserSelectRegistryType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistryType.setStatus('current')
xmlParserSelectRegistryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistryName.setStatus('current')
xmlParserSelectRegistryParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistryParent.setStatus('current')
xmlParserSelectRegistryPublicId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistryPublicId.setStatus('current')
xmlParserSelectRegistrySystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistrySystemId.setStatus('current')
xmlParserSelectRegistryRootElementTag = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistryRootElementTag.setStatus('current')
xmlParserSelectRegistryDocumentBuilderFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistryDocumentBuilderFactory.setStatus('current')
xmlParserSelectRegistrySAXParserFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistrySAXParserFactory.setStatus('current')
xmlParserSelectRegistryTransformerFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistryTransformerFactory.setStatus('current')
xmlParserSelectRegistryParserClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 798, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlParserSelectRegistryParserClassName.setStatus('current')
xmlRegistryTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 800), )
if mibBuilder.loadTexts: xmlRegistryTable.setStatus('current')
xmlRegistryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 800, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "xmlRegistryIndex"))
if mibBuilder.loadTexts: xmlRegistryEntry.setStatus('current')
xmlRegistryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 800, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlRegistryIndex.setStatus('current')
xmlRegistryObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 800, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlRegistryObjectName.setStatus('current')
xmlRegistryType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 800, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlRegistryType.setStatus('current')
xmlRegistryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 800, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlRegistryName.setStatus('current')
xmlRegistryParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 800, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlRegistryParent.setStatus('current')
xmlRegistryDocumentBuilderFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 800, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlRegistryDocumentBuilderFactory.setStatus('current')
xmlRegistrySAXParserFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 800, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlRegistrySAXParserFactory.setStatus('current')
xmlRegistryTransformerFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 800, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlRegistryTransformerFactory.setStatus('current')
xmlRegistryWhenToCache = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 800, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlRegistryWhenToCache.setStatus('current')
xmlRegistryHandleEntityInvalidation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 800, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmlRegistryHandleEntityInvalidation.setStatus('current')
wtctBridgeGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 805), )
if mibBuilder.loadTexts: wtctBridgeGlobalTable.setStatus('current')
wtctBridgeGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 805, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wtctBridgeGlobalIndex"))
if mibBuilder.loadTexts: wtctBridgeGlobalEntry.setStatus('current')
wtctBridgeGlobalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalIndex.setStatus('current')
wtctBridgeGlobalObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalObjectName.setStatus('current')
wtctBridgeGlobalType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalType.setStatus('current')
wtctBridgeGlobalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalName.setStatus('current')
wtctBridgeGlobalParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalParent.setStatus('current')
wtctBridgeGlobalAllowNonStandardTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalAllowNonStandardTypes.setStatus('current')
wtctBridgeGlobalDefaultReplyDeliveryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalDefaultReplyDeliveryMode.setStatus('current')
wtctBridgeGlobalDeliveryModeOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalDeliveryModeOverride.setStatus('current')
wtctBridgeGlobalJmsFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalJmsFactory.setStatus('current')
wtctBridgeGlobalJmsToTuxPriorityMap = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalJmsToTuxPriorityMap.setStatus('current')
wtctBridgeGlobalJndiFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalJndiFactory.setStatus('current')
wtctBridgeGlobalRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalRetries.setStatus('current')
wtctBridgeGlobalRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalRetryDelay.setStatus('current')
wtctBridgeGlobalTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalTimeout.setStatus('current')
wtctBridgeGlobalTransactional = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalTransactional.setStatus('current')
wtctBridgeGlobalTuxErrorQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalTuxErrorQueue.setStatus('current')
wtctBridgeGlobalTuxFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalTuxFactory.setStatus('current')
wtctBridgeGlobalTuxToJmsPriorityMap = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalTuxToJmsPriorityMap.setStatus('current')
wtctBridgeGlobalUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalUserId.setStatus('current')
wtctBridgeGlobalWlsErrorDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 805, 1, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeGlobalWlsErrorDestination.setStatus('current')
wtcExportTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 810), )
if mibBuilder.loadTexts: wtcExportTable.setStatus('current')
wtcExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 810, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wtcExportIndex"))
if mibBuilder.loadTexts: wtcExportEntry.setStatus('current')
wtcExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 810, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcExportIndex.setStatus('current')
wtcExportObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 810, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcExportObjectName.setStatus('current')
wtcExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 810, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcExportType.setStatus('current')
wtcExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 810, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcExportName.setStatus('current')
wtcExportParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 810, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcExportParent.setStatus('current')
wtcExportEJBName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 810, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcExportEJBName.setStatus('current')
wtcExportLocalAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 810, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcExportLocalAccessPoint.setStatus('current')
wtcExportRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 810, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcExportRemoteName.setStatus('current')
wtcExportResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 810, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcExportResourceName.setStatus('current')
wtcImportTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 815), )
if mibBuilder.loadTexts: wtcImportTable.setStatus('current')
wtcImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 815, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wtcImportIndex"))
if mibBuilder.loadTexts: wtcImportEntry.setStatus('current')
wtcImportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 815, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcImportIndex.setStatus('current')
wtcImportObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 815, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcImportObjectName.setStatus('current')
wtcImportType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 815, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcImportType.setStatus('current')
wtcImportName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 815, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcImportName.setStatus('current')
wtcImportParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 815, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcImportParent.setStatus('current')
wtcImportRemoteAccessPointList = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 815, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcImportRemoteAccessPointList.setStatus('current')
wtcImportLocalAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 815, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcImportLocalAccessPoint.setStatus('current')
wtcImportRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 815, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcImportRemoteName.setStatus('current')
wtcImportResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 815, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcImportResourceName.setStatus('current')
wtcLocalTuxDomTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 817), )
if mibBuilder.loadTexts: wtcLocalTuxDomTable.setStatus('current')
wtcLocalTuxDomEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 817, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wtcLocalTuxDomIndex"))
if mibBuilder.loadTexts: wtcLocalTuxDomEntry.setStatus('current')
wtcLocalTuxDomIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomIndex.setStatus('current')
wtcLocalTuxDomObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomObjectName.setStatus('current')
wtcLocalTuxDomType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomType.setStatus('current')
wtcLocalTuxDomName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomName.setStatus('current')
wtcLocalTuxDomParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomParent.setStatus('current')
wtcLocalTuxDomAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomAccessPoint.setStatus('current')
wtcLocalTuxDomAccessPointId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomAccessPointId.setStatus('current')
wtcLocalTuxDomBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomBlockTime.setStatus('current')
wtcLocalTuxDomCmpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomCmpLimit.setStatus('current')
wtcLocalTuxDomConnectionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomConnectionPolicy.setStatus('current')
wtcLocalTuxDomConnPrincipalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomConnPrincipalName.setStatus('current')
wtcLocalTuxDomInteroperate = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomInteroperate.setStatus('current')
wtcLocalTuxDomMaxEncryptBits = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomMaxEncryptBits.setStatus('current')
wtcLocalTuxDomMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomMaxRetries.setStatus('current')
wtcLocalTuxDomMinEncryptBits = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomMinEncryptBits.setStatus('current')
wtcLocalTuxDomNWAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomNWAddr.setStatus('current')
wtcLocalTuxDomRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomRetryInterval.setStatus('current')
wtcLocalTuxDomSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomSecurity.setStatus('current')
wtcLocalTuxDomKeyStoresLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 86), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomKeyStoresLocation.setStatus('current')
wtcLocalTuxDomUseSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 88), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomUseSSL.setStatus('current')
wtcLocalTuxDomKeepAliveWait = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomKeepAliveWait.setStatus('current')
wtcLocalTuxDomTrustKeyStoreFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 90), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomTrustKeyStoreFileName.setStatus('current')
wtcLocalTuxDomKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomKeepAlive.setStatus('current')
wtcLocalTuxDomPrivateKeyAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 92), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomPrivateKeyAlias.setStatus('current')
wtcLocalTuxDomIdentityKeyStoreFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 817, 1, 93), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcLocalTuxDomIdentityKeyStoreFileName.setStatus('current')
wtcRemoteTuxDomTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 820), )
if mibBuilder.loadTexts: wtcRemoteTuxDomTable.setStatus('current')
wtcRemoteTuxDomEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 820, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wtcRemoteTuxDomIndex"))
if mibBuilder.loadTexts: wtcRemoteTuxDomEntry.setStatus('current')
wtcRemoteTuxDomIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomIndex.setStatus('current')
wtcRemoteTuxDomObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomObjectName.setStatus('current')
wtcRemoteTuxDomType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomType.setStatus('current')
wtcRemoteTuxDomName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomName.setStatus('current')
wtcRemoteTuxDomParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomParent.setStatus('current')
wtcRemoteTuxDomAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomAccessPoint.setStatus('current')
wtcRemoteTuxDomAccessPointId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomAccessPointId.setStatus('current')
wtcRemoteTuxDomAclPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomAclPolicy.setStatus('current')
wtcRemoteTuxDomCmpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomCmpLimit.setStatus('current')
wtcRemoteTuxDomConnectionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomConnectionPolicy.setStatus('current')
wtcRemoteTuxDomConnPrincipalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomConnPrincipalName.setStatus('current')
wtcRemoteTuxDomCredentialPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomCredentialPolicy.setStatus('current')
wtcRemoteTuxDomMaxEncryptBits = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomMaxEncryptBits.setStatus('current')
wtcRemoteTuxDomMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomMaxRetries.setStatus('current')
wtcRemoteTuxDomMinEncryptBits = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomMinEncryptBits.setStatus('current')
wtcRemoteTuxDomNWAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomNWAddr.setStatus('current')
wtcRemoteTuxDomRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomRetryInterval.setStatus('current')
wtcRemoteTuxDomTpUsrFile = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomTpUsrFile.setStatus('current')
wtcRemoteTuxDomFederationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomFederationName.setStatus('current')
wtcRemoteTuxDomFederationURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 105), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomFederationURL.setStatus('current')
wtcRemoteTuxDomLocalAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomLocalAccessPoint.setStatus('current')
wtcRemoteTuxDomDefaultAppKey = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomDefaultAppKey.setStatus('current')
wtcRemoteTuxDomCustomAppKeyClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 112), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomCustomAppKeyClass.setStatus('current')
wtcRemoteTuxDomTuxedoGidKw = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 113), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomTuxedoGidKw.setStatus('current')
wtcRemoteTuxDomAllowAnonymous = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 114), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomAllowAnonymous.setStatus('current')
wtcRemoteTuxDomKeepAliveWait = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomKeepAliveWait.setStatus('current')
wtcRemoteTuxDomCustomAppKeyClassParam = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 116), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomCustomAppKeyClassParam.setStatus('current')
wtcRemoteTuxDomTuxedoUidKw = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 117), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomTuxedoUidKw.setStatus('current')
wtcRemoteTuxDomKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 118), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomKeepAlive.setStatus('current')
wtcRemoteTuxDomAppKey = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 820, 1, 119), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRemoteTuxDomAppKey.setStatus('current')
wtctBridgeRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 825), )
if mibBuilder.loadTexts: wtctBridgeRedirectTable.setStatus('current')
wtctBridgeRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 825, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wtctBridgeRedirectIndex"))
if mibBuilder.loadTexts: wtctBridgeRedirectEntry.setStatus('current')
wtctBridgeRedirectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectIndex.setStatus('current')
wtctBridgeRedirectObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectObjectName.setStatus('current')
wtctBridgeRedirectType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectType.setStatus('current')
wtctBridgeRedirectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectName.setStatus('current')
wtctBridgeRedirectParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectParent.setStatus('current')
wtctBridgeRedirectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectDirection.setStatus('current')
wtctBridgeRedirectMetaDataFile = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectMetaDataFile.setStatus('current')
wtctBridgeRedirectReplyQ = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectReplyQ.setStatus('current')
wtctBridgeRedirectSourceAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectSourceAccessPoint.setStatus('current')
wtctBridgeRedirectSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectSourceName.setStatus('current')
wtctBridgeRedirectSourceQspace = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectSourceQspace.setStatus('current')
wtctBridgeRedirectTargetAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectTargetAccessPoint.setStatus('current')
wtctBridgeRedirectTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectTargetName.setStatus('current')
wtctBridgeRedirectTargetQspace = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectTargetQspace.setStatus('current')
wtctBridgeRedirectTranslateFML = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 825, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtctBridgeRedirectTranslateFML.setStatus('current')
wsReliableDeliveryPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 827), )
if mibBuilder.loadTexts: wsReliableDeliveryPolicyTable.setStatus('current')
wsReliableDeliveryPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 827, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wsReliableDeliveryPolicyIndex"))
if mibBuilder.loadTexts: wsReliableDeliveryPolicyEntry.setStatus('current')
wsReliableDeliveryPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 827, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsReliableDeliveryPolicyIndex.setStatus('current')
wsReliableDeliveryPolicyObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 827, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsReliableDeliveryPolicyObjectName.setStatus('current')
wsReliableDeliveryPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 827, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsReliableDeliveryPolicyType.setStatus('current')
wsReliableDeliveryPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 827, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsReliableDeliveryPolicyName.setStatus('current')
wsReliableDeliveryPolicyParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 827, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsReliableDeliveryPolicyParent.setStatus('current')
wsReliableDeliveryPolicyDefaultRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 827, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsReliableDeliveryPolicyDefaultRetryCount.setStatus('current')
wsReliableDeliveryPolicyDefaultRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 827, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsReliableDeliveryPolicyDefaultRetryInterval.setStatus('current')
wsReliableDeliveryPolicyDefaultTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 827, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsReliableDeliveryPolicyDefaultTimeToLive.setStatus('current')
wtcPasswordTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 829), )
if mibBuilder.loadTexts: wtcPasswordTable.setStatus('current')
wtcPasswordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 829, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wtcPasswordIndex"))
if mibBuilder.loadTexts: wtcPasswordEntry.setStatus('current')
wtcPasswordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordIndex.setStatus('current')
wtcPasswordObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordObjectName.setStatus('current')
wtcPasswordType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordType.setStatus('current')
wtcPasswordName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordName.setStatus('current')
wtcPasswordParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordParent.setStatus('current')
wtcPasswordLocalAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordLocalAccessPoint.setStatus('current')
wtcPasswordRemoteAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordRemoteAccessPoint.setStatus('current')
wtcPasswordRemotePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordRemotePassword.setStatus('current')
wtcPasswordRemotePasswordIV = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordRemotePasswordIV.setStatus('current')
wtcPasswordLocalPasswordIV = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordLocalPasswordIV.setStatus('current')
wtcPasswordLocalPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 829, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcPasswordLocalPassword.setStatus('current')
wtcResourcesTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 831), )
if mibBuilder.loadTexts: wtcResourcesTable.setStatus('current')
wtcResourcesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 831, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wtcResourcesIndex"))
if mibBuilder.loadTexts: wtcResourcesEntry.setStatus('current')
wtcResourcesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesIndex.setStatus('current')
wtcResourcesObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesObjectName.setStatus('current')
wtcResourcesType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesType.setStatus('current')
wtcResourcesName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesName.setStatus('current')
wtcResourcesParent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesParent.setStatus('current')
wtcResourcesFldTbl16Classes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesFldTbl16Classes.setStatus('current')
wtcResourcesFldTbl32Classes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesFldTbl32Classes.setStatus('current')
wtcResourcesTpUsrFile = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesTpUsrFile.setStatus('current')
wtcResourcesViewTbl16Classes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesViewTbl16Classes.setStatus('current')
wtcResourcesViewTbl32Classes = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesViewTbl32Classes.setStatus('current')
wtcResourcesAppPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesAppPassword.setStatus('current')
wtcResourcesRemoteMBEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesRemoteMBEncoding.setStatus('current')
wtcResourcesMBEncodingMapFile = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesMBEncodingMapFile.setStatus('current')
wtcResourcesAppPasswordIV = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 831, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcResourcesAppPasswordIV.setStatus('current')
adminConsoleTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 840), )
if mibBuilder.loadTexts: adminConsoleTable.setStatus('current')
adminConsoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 840, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "adminConsoleIndex"))
if mibBuilder.loadTexts: adminConsoleEntry.setStatus('current')
adminConsoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 840, 1, 1), OctetString())
if mibBuilder.loadTexts: adminConsoleIndex.setStatus('current')
adminConsoleObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 840, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminConsoleObjectName.setStatus('current')
adminConsoleType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 840, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminConsoleType.setStatus('current')
adminConsoleSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 840, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminConsoleSessionTimeout.setStatus('current')
adminConsoleCookieName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 840, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminConsoleCookieName.setStatus('current')
adminConsoleName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 840, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminConsoleName.setStatus('current')
capacityTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 850), )
if mibBuilder.loadTexts: capacityTable.setStatus('current')
capacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 850, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "capacityIndex"))
if mibBuilder.loadTexts: capacityEntry.setStatus('current')
capacityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 850, 1, 1), OctetString())
if mibBuilder.loadTexts: capacityIndex.setStatus('current')
capacityObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 850, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityObjectName.setStatus('current')
capacityType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 850, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityType.setStatus('current')
capacityDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 850, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityDeploymentOrder.setStatus('current')
capacityCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 850, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityCount.setStatus('current')
capacityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 850, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacityName.setStatus('current')
configurationPropertyTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 855), )
if mibBuilder.loadTexts: configurationPropertyTable.setStatus('current')
configurationPropertyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 855, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "configurationPropertyIndex"))
if mibBuilder.loadTexts: configurationPropertyEntry.setStatus('current')
configurationPropertyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 855, 1, 1), OctetString())
if mibBuilder.loadTexts: configurationPropertyIndex.setStatus('current')
configurationPropertyObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 855, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationPropertyObjectName.setStatus('current')
configurationPropertyType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 855, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationPropertyType.setStatus('current')
configurationPropertyEncryptValueRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 855, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationPropertyEncryptValueRequired.setStatus('current')
configurationPropertyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 855, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationPropertyValue.setStatus('current')
configurationPropertyName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 855, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationPropertyName.setStatus('current')
contextCaseTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 860), )
if mibBuilder.loadTexts: contextCaseTable.setStatus('current')
contextCaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 860, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "contextCaseIndex"))
if mibBuilder.loadTexts: contextCaseEntry.setStatus('current')
contextCaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 860, 1, 1), OctetString())
if mibBuilder.loadTexts: contextCaseIndex.setStatus('current')
contextCaseObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 860, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextCaseObjectName.setStatus('current')
contextCaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 860, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextCaseType.setStatus('current')
contextCaseRequestClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 860, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextCaseRequestClassName.setStatus('current')
contextCaseDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 860, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextCaseDeploymentOrder.setStatus('current')
contextCaseGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 860, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextCaseGroupName.setStatus('current')
contextCaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 860, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextCaseName.setStatus('current')
contextCaseUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 860, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextCaseUserName.setStatus('current')
contextRequestClassTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 865), )
if mibBuilder.loadTexts: contextRequestClassTable.setStatus('current')
contextRequestClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 865, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "contextRequestClassIndex"))
if mibBuilder.loadTexts: contextRequestClassEntry.setStatus('current')
contextRequestClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 865, 1, 1), OctetString())
if mibBuilder.loadTexts: contextRequestClassIndex.setStatus('current')
contextRequestClassObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 865, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextRequestClassObjectName.setStatus('current')
contextRequestClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 865, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextRequestClassType.setStatus('current')
contextRequestClassDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 865, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextRequestClassDeploymentOrder.setStatus('current')
contextRequestClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 865, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextRequestClassName.setStatus('current')
customResourceTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 875), )
if mibBuilder.loadTexts: customResourceTable.setStatus('current')
customResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 875, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "customResourceIndex"))
if mibBuilder.loadTexts: customResourceEntry.setStatus('current')
customResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 1), OctetString())
if mibBuilder.loadTexts: customResourceIndex.setStatus('current')
customResourceObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceObjectName.setStatus('current')
customResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceType.setStatus('current')
customResourceResourceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceResourceClass.setStatus('current')
customResourceCompatibilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceCompatibilityName.setStatus('current')
customResourceDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceDeploymentOrder.setStatus('current')
customResourceDescriptorBeanClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceDescriptorBeanClass.setStatus('current')
customResourceDeploymentPrincipalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceDeploymentPrincipalName.setStatus('current')
customResourceDescriptorFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceDescriptorFileName.setStatus('current')
customResourceModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceModuleType.setStatus('current')
customResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceName.setStatus('current')
customResourceSourcePath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 875, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: customResourceSourcePath.setStatus('current')
databaseLessLeasingBasisTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 880), )
if mibBuilder.loadTexts: databaseLessLeasingBasisTable.setStatus('current')
databaseLessLeasingBasisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 880, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "databaseLessLeasingBasisIndex"))
if mibBuilder.loadTexts: databaseLessLeasingBasisEntry.setStatus('current')
databaseLessLeasingBasisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 880, 1, 1), OctetString())
if mibBuilder.loadTexts: databaseLessLeasingBasisIndex.setStatus('current')
databaseLessLeasingBasisObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 880, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseLessLeasingBasisObjectName.setStatus('current')
databaseLessLeasingBasisType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 880, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseLessLeasingBasisType.setStatus('current')
databaseLessLeasingBasisMemberDiscoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 880, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseLessLeasingBasisMemberDiscoveryTimeout.setStatus('current')
databaseLessLeasingBasisName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 880, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseLessLeasingBasisName.setStatus('current')
defaultFileStoreTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 890), )
if mibBuilder.loadTexts: defaultFileStoreTable.setStatus('current')
defaultFileStoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 890, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "defaultFileStoreIndex"))
if mibBuilder.loadTexts: defaultFileStoreEntry.setStatus('current')
defaultFileStoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 1), OctetString())
if mibBuilder.loadTexts: defaultFileStoreIndex.setStatus('current')
defaultFileStoreObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreObjectName.setStatus('current')
defaultFileStoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreType.setStatus('current')
defaultFileStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreName.setStatus('current')
defaultFileStoreMinWindowBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreMinWindowBufferSize.setStatus('current')
defaultFileStoreInitialSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreInitialSize.setStatus('current')
defaultFileStoreBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreBlockSize.setStatus('current')
defaultFileStoreMaxFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreMaxFileSize.setStatus('current')
defaultFileStoreIoBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreIoBufferSize.setStatus('current')
defaultFileStoreMaxWindowBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreMaxWindowBufferSize.setStatus('current')
defaultFileStoreSynchronousWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreSynchronousWritePolicy.setStatus('current')
defaultFileStoreDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreDirectory.setStatus('current')
defaultFileStoreFileLockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreFileLockingEnabled.setStatus('current')
defaultFileStoreCacheDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 890, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultFileStoreCacheDirectory.setStatus('current')
deploymentConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 895), )
if mibBuilder.loadTexts: deploymentConfigurationTable.setStatus('current')
deploymentConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 895, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "deploymentConfigurationIndex"))
if mibBuilder.loadTexts: deploymentConfigurationEntry.setStatus('current')
deploymentConfigurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 895, 1, 1), OctetString())
if mibBuilder.loadTexts: deploymentConfigurationIndex.setStatus('current')
deploymentConfigurationObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 895, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentConfigurationObjectName.setStatus('current')
deploymentConfigurationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 895, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentConfigurationType.setStatus('current')
deploymentConfigurationRemoteDeployerEJBEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 895, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentConfigurationRemoteDeployerEJBEnabled.setStatus('current')
deploymentConfigurationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 895, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentConfigurationName.setStatus('current')
deploymentConfigurationRestageOnlyOnRedeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 895, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentConfigurationRestageOnlyOnRedeploy.setStatus('current')
domainLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 900), )
if mibBuilder.loadTexts: domainLibraryTable.setStatus('current')
domainLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 900, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "domainLibraryIndex"))
if mibBuilder.loadTexts: domainLibraryEntry.setStatus('current')
domainLibraryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 1), OctetString())
if mibBuilder.loadTexts: domainLibraryIndex.setStatus('current')
domainLibraryObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryObjectName.setStatus('current')
domainLibraryType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryType.setStatus('current')
domainLibraryCompatibilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryCompatibilityName.setStatus('current')
domainLibraryApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryApplicationName.setStatus('current')
domainLibraryAbsolutePlanDir = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryAbsolutePlanDir.setStatus('current')
domainLibraryAbsolutePlanPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryAbsolutePlanPath.setStatus('current')
domainLibraryStagingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryStagingMode.setStatus('current')
domainLibraryInstallDir = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryInstallDir.setStatus('current')
domainLibraryValidateDDSecurityData = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryValidateDDSecurityData.setStatus('current')
domainLibraryName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryName.setStatus('current')
domainLibraryAbsoluteSourcePath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryAbsoluteSourcePath.setStatus('current')
domainLibrarySourcePath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibrarySourcePath.setStatus('current')
domainLibraryAbsoluteInstallDir = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryAbsoluteInstallDir.setStatus('current')
domainLibraryDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryDeploymentOrder.setStatus('current')
domainLibrarySecurityDDModel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibrarySecurityDDModel.setStatus('current')
domainLibraryApplicationIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryApplicationIdentifier.setStatus('current')
domainLibraryDeploymentPrincipalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryDeploymentPrincipalName.setStatus('current')
domainLibraryPlanDir = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryPlanDir.setStatus('current')
domainLibraryPlanPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryPlanPath.setStatus('current')
domainLibraryVersionIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryVersionIdentifier.setStatus('current')
domainLibraryModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 900, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainLibraryModuleType.setStatus('current')
embeddedLDAPTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 905), )
if mibBuilder.loadTexts: embeddedLDAPTable.setStatus('current')
embeddedLDAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 905, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "embeddedLDAPIndex"))
if mibBuilder.loadTexts: embeddedLDAPEntry.setStatus('current')
embeddedLDAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 1), OctetString())
if mibBuilder.loadTexts: embeddedLDAPIndex.setStatus('current')
embeddedLDAPObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPObjectName.setStatus('current')
embeddedLDAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPType.setStatus('current')
embeddedLDAPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPTimeout.setStatus('current')
embeddedLDAPAnonymousBindAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPAnonymousBindAllowed.setStatus('current')
embeddedLDAPMasterFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPMasterFirst.setStatus('current')
embeddedLDAPCacheTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPCacheTTL.setStatus('current')
embeddedLDAPBackupCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPBackupCopies.setStatus('current')
embeddedLDAPRefreshReplicaAtStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPRefreshReplicaAtStartup.setStatus('current')
embeddedLDAPBackupMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPBackupMinute.setStatus('current')
embeddedLDAPCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPCacheSize.setStatus('current')
embeddedLDAPBackupHour = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPBackupHour.setStatus('current')
embeddedLDAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPName.setStatus('current')
embeddedLDAPCacheEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 905, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: embeddedLDAPCacheEnabled.setStatus('current')
errorHandlingTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 910), )
if mibBuilder.loadTexts: errorHandlingTable.setStatus('current')
errorHandlingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 910, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "errorHandlingIndex"))
if mibBuilder.loadTexts: errorHandlingEntry.setStatus('current')
errorHandlingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 910, 1, 1), OctetString())
if mibBuilder.loadTexts: errorHandlingIndex.setStatus('current')
errorHandlingObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 910, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorHandlingObjectName.setStatus('current')
errorHandlingType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 910, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorHandlingType.setStatus('current')
errorHandlingLogPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 910, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorHandlingLogPolicy.setStatus('current')
errorHandlingPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 910, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorHandlingPolicy.setStatus('current')
errorHandlingName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 910, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorHandlingName.setStatus('current')
fairShareRequestClassTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 915), )
if mibBuilder.loadTexts: fairShareRequestClassTable.setStatus('current')
fairShareRequestClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 915, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "fairShareRequestClassIndex"))
if mibBuilder.loadTexts: fairShareRequestClassEntry.setStatus('current')
fairShareRequestClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 915, 1, 1), OctetString())
if mibBuilder.loadTexts: fairShareRequestClassIndex.setStatus('current')
fairShareRequestClassObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 915, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fairShareRequestClassObjectName.setStatus('current')
fairShareRequestClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 915, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fairShareRequestClassType.setStatus('current')
fairShareRequestClassDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 915, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fairShareRequestClassDeploymentOrder.setStatus('current')
fairShareRequestClassFairShare = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 915, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fairShareRequestClassFairShare.setStatus('current')
fairShareRequestClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 915, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fairShareRequestClassName.setStatus('current')
federationServicesTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 920), )
if mibBuilder.loadTexts: federationServicesTable.setStatus('current')
federationServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 920, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "federationServicesIndex"))
if mibBuilder.loadTexts: federationServicesEntry.setStatus('current')
federationServicesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 1), OctetString())
if mibBuilder.loadTexts: federationServicesIndex.setStatus('current')
federationServicesObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesObjectName.setStatus('current')
federationServicesType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesType.setStatus('current')
federationServicesSourceIdHex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesSourceIdHex.setStatus('current')
federationServicesAssertionStoreClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesAssertionStoreClassName.setStatus('current')
federationServicesITSRequiresSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesITSRequiresSSL.setStatus('current')
federationServicesARSRequiresTwoWaySSL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesARSRequiresTwoWaySSL.setStatus('current')
federationServicesPOSTRecipientCheckEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesPOSTRecipientCheckEnabled.setStatus('current')
federationServicesACSRequiresSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesACSRequiresSSL.setStatus('current')
federationServicesSourceSiteURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesSourceSiteURL.setStatus('current')
federationServicesSigningKeyAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesSigningKeyAlias.setStatus('current')
federationServicesName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesName.setStatus('current')
federationServicesSSLClientIdentityAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesSSLClientIdentityAlias.setStatus('current')
federationServicesSourceIdBase64 = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesSourceIdBase64.setStatus('current')
federationServicesDestinationSiteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesDestinationSiteEnabled.setStatus('current')
federationServicesPOSTOneUseCheckEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesPOSTOneUseCheckEnabled.setStatus('current')
federationServicesUsedAssertionCacheClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesUsedAssertionCacheClassName.setStatus('current')
federationServicesARSRequiresSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesARSRequiresSSL.setStatus('current')
federationServicesSourceSiteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesSourceSiteEnabled.setStatus('current')
federationServicesAssertionConsumerURIs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesAssertionConsumerURIs.setStatus('current')
federationServicesAssertionRetrievalURIs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesAssertionRetrievalURIs.setStatus('current')
federationServicesIntersiteTransferURIs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 920, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: federationServicesIntersiteTransferURIs.setStatus('current')
fileStoreTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 925), )
if mibBuilder.loadTexts: fileStoreTable.setStatus('current')
fileStoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 925, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "fileStoreIndex"))
if mibBuilder.loadTexts: fileStoreEntry.setStatus('current')
fileStoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 1), OctetString())
if mibBuilder.loadTexts: fileStoreIndex.setStatus('current')
fileStoreObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreObjectName.setStatus('current')
fileStoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreType.setStatus('current')
fileStoreDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreDeploymentOrder.setStatus('current')
fileStoreLogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreLogicalName.setStatus('current')
fileStoreXAResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreXAResourceName.setStatus('current')
fileStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreName.setStatus('current')
fileStoreMinWindowBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreMinWindowBufferSize.setStatus('current')
fileStoreInitialSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreInitialSize.setStatus('current')
fileStoreBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreBlockSize.setStatus('current')
fileStoreMaxFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreMaxFileSize.setStatus('current')
fileStoreIoBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreIoBufferSize.setStatus('current')
fileStoreMaxWindowBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreMaxWindowBufferSize.setStatus('current')
fileStoreSynchronousWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreSynchronousWritePolicy.setStatus('current')
fileStoreDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreDirectory.setStatus('current')
fileStoreFileLockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreFileLockingEnabled.setStatus('current')
fileStoreCacheDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 925, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileStoreCacheDirectory.setStatus('current')
foreignJNDILinkTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 930), )
if mibBuilder.loadTexts: foreignJNDILinkTable.setStatus('current')
foreignJNDILinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 930, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "foreignJNDILinkIndex"))
if mibBuilder.loadTexts: foreignJNDILinkEntry.setStatus('current')
foreignJNDILinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 930, 1, 1), OctetString())
if mibBuilder.loadTexts: foreignJNDILinkIndex.setStatus('current')
foreignJNDILinkObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 930, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDILinkObjectName.setStatus('current')
foreignJNDILinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 930, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDILinkType.setStatus('current')
foreignJNDILinkLocalJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 930, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDILinkLocalJNDIName.setStatus('current')
foreignJNDILinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 930, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDILinkName.setStatus('current')
foreignJNDILinkRemoteJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 930, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDILinkRemoteJNDIName.setStatus('current')
foreignJNDIProviderTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 935), )
if mibBuilder.loadTexts: foreignJNDIProviderTable.setStatus('current')
foreignJNDIProviderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 935, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "foreignJNDIProviderIndex"))
if mibBuilder.loadTexts: foreignJNDIProviderEntry.setStatus('current')
foreignJNDIProviderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 935, 1, 1), OctetString())
if mibBuilder.loadTexts: foreignJNDIProviderIndex.setStatus('current')
foreignJNDIProviderObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 935, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDIProviderObjectName.setStatus('current')
foreignJNDIProviderType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 935, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDIProviderType.setStatus('current')
foreignJNDIProviderInitialContextFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 935, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDIProviderInitialContextFactory.setStatus('current')
foreignJNDIProviderUser = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 935, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDIProviderUser.setStatus('current')
foreignJNDIProviderProviderURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 935, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDIProviderProviderURL.setStatus('current')
foreignJNDIProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 935, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDIProviderName.setStatus('current')
foreignJNDIProviderDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 935, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreignJNDIProviderDeploymentOrder.setStatus('current')
httpProxyTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 940), )
if mibBuilder.loadTexts: httpProxyTable.setStatus('current')
httpProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 940, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "httpProxyIndex"))
if mibBuilder.loadTexts: httpProxyEntry.setStatus('current')
httpProxyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 1), OctetString())
if mibBuilder.loadTexts: httpProxyIndex.setStatus('current')
httpProxyObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyObjectName.setStatus('current')
httpProxyType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyType.setStatus('current')
httpProxyServerList = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyServerList.setStatus('current')
httpProxyDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyDeploymentOrder.setStatus('current')
httpProxyMaxHealthCheckInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyMaxHealthCheckInterval.setStatus('current')
httpProxyHealthCheckInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyHealthCheckInterval.setStatus('current')
httpProxyInitialConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyInitialConnections.setStatus('current')
httpProxyMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyMaxConnections.setStatus('current')
httpProxyName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyName.setStatus('current')
httpProxyMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 940, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProxyMaxRetries.setStatus('current')
jdbcStoreTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 950), )
if mibBuilder.loadTexts: jdbcStoreTable.setStatus('current')
jdbcStoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 950, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jdbcStoreIndex"))
if mibBuilder.loadTexts: jdbcStoreEntry.setStatus('current')
jdbcStoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 1), OctetString())
if mibBuilder.loadTexts: jdbcStoreIndex.setStatus('current')
jdbcStoreObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStoreObjectName.setStatus('current')
jdbcStoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStoreType.setStatus('current')
jdbcStoreDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStoreDeploymentOrder.setStatus('current')
jdbcStoreDeletesPerBatchMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStoreDeletesPerBatchMaximum.setStatus('current')
jdbcStoreLogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStoreLogicalName.setStatus('current')
jdbcStoreXAResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStoreXAResourceName.setStatus('current')
jdbcStoreDeletesPerStatementMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStoreDeletesPerStatementMaximum.setStatus('current')
jdbcStoreInsertsPerBatchMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStoreInsertsPerBatchMaximum.setStatus('current')
jdbcStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStoreName.setStatus('current')
jdbcStoreCreateTableDDLFile = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStoreCreateTableDDLFile.setStatus('current')
jdbcStorePrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 950, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcStorePrefixName.setStatus('current')
jdbcSystemResourceTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 955), )
if mibBuilder.loadTexts: jdbcSystemResourceTable.setStatus('current')
jdbcSystemResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 955, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jdbcSystemResourceIndex"))
if mibBuilder.loadTexts: jdbcSystemResourceEntry.setStatus('current')
jdbcSystemResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 955, 1, 1), OctetString())
if mibBuilder.loadTexts: jdbcSystemResourceIndex.setStatus('current')
jdbcSystemResourceObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 955, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcSystemResourceObjectName.setStatus('current')
jdbcSystemResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 955, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcSystemResourceType.setStatus('current')
jdbcSystemResourceCompatibilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 955, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcSystemResourceCompatibilityName.setStatus('current')
jdbcSystemResourceDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 955, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcSystemResourceDeploymentOrder.setStatus('current')
jdbcSystemResourceDeploymentPrincipalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 955, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcSystemResourceDeploymentPrincipalName.setStatus('current')
jdbcSystemResourceDescriptorFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 955, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcSystemResourceDescriptorFileName.setStatus('current')
jdbcSystemResourceModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 955, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcSystemResourceModuleType.setStatus('current')
jdbcSystemResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 955, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcSystemResourceName.setStatus('current')
jdbcSystemResourceSourcePath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 955, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcSystemResourceSourcePath.setStatus('current')
jmsInteropModuleTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 960), )
if mibBuilder.loadTexts: jmsInteropModuleTable.setStatus('current')
jmsInteropModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 960, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsInteropModuleIndex"))
if mibBuilder.loadTexts: jmsInteropModuleEntry.setStatus('current')
jmsInteropModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 960, 1, 1), OctetString())
if mibBuilder.loadTexts: jmsInteropModuleIndex.setStatus('current')
jmsInteropModuleObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 960, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsInteropModuleObjectName.setStatus('current')
jmsInteropModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 960, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsInteropModuleType.setStatus('current')
jmsInteropModuleCompatibilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 960, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsInteropModuleCompatibilityName.setStatus('current')
jmsInteropModuleDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 960, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsInteropModuleDeploymentOrder.setStatus('current')
jmsInteropModuleDeploymentPrincipalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 960, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsInteropModuleDeploymentPrincipalName.setStatus('current')
jmsInteropModuleDescriptorFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 960, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsInteropModuleDescriptorFileName.setStatus('current')
jmsInteropModuleModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 960, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsInteropModuleModuleType.setStatus('current')
jmsInteropModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 960, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsInteropModuleName.setStatus('current')
jmsInteropModuleSourcePath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 960, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsInteropModuleSourcePath.setStatus('current')
jmsMessageLogFileTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 965), )
if mibBuilder.loadTexts: jmsMessageLogFileTable.setStatus('current')
jmsMessageLogFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 965, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsMessageLogFileIndex"))
if mibBuilder.loadTexts: jmsMessageLogFileEntry.setStatus('current')
jmsMessageLogFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 1), OctetString())
if mibBuilder.loadTexts: jmsMessageLogFileIndex.setStatus('current')
jmsMessageLogFileObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileObjectName.setStatus('current')
jmsMessageLogFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileType.setStatus('current')
jmsMessageLogFileNumberOfFilesLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileNumberOfFilesLimited.setStatus('current')
jmsMessageLogFileFileTimeSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileFileTimeSpan.setStatus('current')
jmsMessageLogFileRotationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileRotationType.setStatus('current')
jmsMessageLogFileFileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileFileCount.setStatus('current')
jmsMessageLogFileFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileFileName.setStatus('current')
jmsMessageLogFileFileMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileFileMinSize.setStatus('current')
jmsMessageLogFileBufferSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileBufferSizeKB.setStatus('current')
jmsMessageLogFileDateFormatPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileDateFormatPattern.setStatus('current')
jmsMessageLogFileRotationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileRotationTime.setStatus('current')
jmsMessageLogFileRotateLogOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileRotateLogOnStartup.setStatus('current')
jmsMessageLogFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileName.setStatus('current')
jmsMessageLogFileLogFileRotationDir = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 965, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsMessageLogFileLogFileRotationDir.setStatus('current')
jmsSAFMessageLogFileTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 970), )
if mibBuilder.loadTexts: jmsSAFMessageLogFileTable.setStatus('current')
jmsSAFMessageLogFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 970, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsSAFMessageLogFileIndex"))
if mibBuilder.loadTexts: jmsSAFMessageLogFileEntry.setStatus('current')
jmsSAFMessageLogFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 1), OctetString())
if mibBuilder.loadTexts: jmsSAFMessageLogFileIndex.setStatus('current')
jmsSAFMessageLogFileObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileObjectName.setStatus('current')
jmsSAFMessageLogFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileType.setStatus('current')
jmsSAFMessageLogFileNumberOfFilesLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileNumberOfFilesLimited.setStatus('current')
jmsSAFMessageLogFileFileTimeSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileFileTimeSpan.setStatus('current')
jmsSAFMessageLogFileRotationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileRotationType.setStatus('current')
jmsSAFMessageLogFileFileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileFileCount.setStatus('current')
jmsSAFMessageLogFileFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileFileName.setStatus('current')
jmsSAFMessageLogFileFileMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileFileMinSize.setStatus('current')
jmsSAFMessageLogFileBufferSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileBufferSizeKB.setStatus('current')
jmsSAFMessageLogFileDateFormatPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileDateFormatPattern.setStatus('current')
jmsSAFMessageLogFileRotationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileRotationTime.setStatus('current')
jmsSAFMessageLogFileRotateLogOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileRotateLogOnStartup.setStatus('current')
jmsSAFMessageLogFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileName.setStatus('current')
jmsSAFMessageLogFileLogFileRotationDir = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 970, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsSAFMessageLogFileLogFileRotationDir.setStatus('current')
jmxTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 975), )
if mibBuilder.loadTexts: jmxTable.setStatus('current')
jmxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 975, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmxIndex"))
if mibBuilder.loadTexts: jmxEntry.setStatus('current')
jmxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 1), OctetString())
if mibBuilder.loadTexts: jmxIndex.setStatus('current')
jmxObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxObjectName.setStatus('current')
jmxType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxType.setStatus('current')
jmxCompatibilityMBeanServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxCompatibilityMBeanServerEnabled.setStatus('current')
jmxManagementEJBEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxManagementEJBEnabled.setStatus('current')
jmxPlatformMBeanServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxPlatformMBeanServerEnabled.setStatus('current')
jmxInvocationTimeoutSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxInvocationTimeoutSeconds.setStatus('current')
jmxRuntimeMBeanServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxRuntimeMBeanServerEnabled.setStatus('current')
jmxDomainMBeanServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxDomainMBeanServerEnabled.setStatus('current')
jmxName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxName.setStatus('current')
jmxEditMBeanServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxEditMBeanServerEnabled.setStatus('current')
jmxPlatformMBeanServerUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 975, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmxPlatformMBeanServerUsed.setStatus('current')
jtaMigratableTargetTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 980), )
if mibBuilder.loadTexts: jtaMigratableTargetTable.setStatus('current')
jtaMigratableTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 980, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jtaMigratableTargetIndex"))
if mibBuilder.loadTexts: jtaMigratableTargetEntry.setStatus('current')
jtaMigratableTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 1), OctetString())
if mibBuilder.loadTexts: jtaMigratableTargetIndex.setStatus('current')
jtaMigratableTargetObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetObjectName.setStatus('current')
jtaMigratableTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetType.setStatus('current')
jtaMigratableTargetPostScript = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetPostScript.setStatus('current')
jtaMigratableTargetMillisToSleepBetweenAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetMillisToSleepBetweenAttempts.setStatus('current')
jtaMigratableTargetNonLocalPostAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetNonLocalPostAllowed.setStatus('current')
jtaMigratableTargetSecondsBetweenRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetSecondsBetweenRestarts.setStatus('current')
jtaMigratableTargetPostScriptFailureFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetPostScriptFailureFatal.setStatus('current')
jtaMigratableTargetPreScript = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetPreScript.setStatus('current')
jtaMigratableTargetMigrationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetMigrationPolicy.setStatus('current')
jtaMigratableTargetRestartOnFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetRestartOnFailure.setStatus('current')
jtaMigratableTargetStrictOwnershipCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetStrictOwnershipCheck.setStatus('current')
jtaMigratableTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetName.setStatus('current')
jtaMigratableTargetAdditionalMigrationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetAdditionalMigrationAttempts.setStatus('current')
jtaMigratableTargetNumberOfRestartAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 980, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jtaMigratableTargetNumberOfRestartAttempts.setStatus('current')
joltConnectionPoolTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 985), )
if mibBuilder.loadTexts: joltConnectionPoolTable.setStatus('current')
joltConnectionPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 985, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "joltConnectionPoolIndex"))
if mibBuilder.loadTexts: joltConnectionPoolEntry.setStatus('current')
joltConnectionPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 1), OctetString())
if mibBuilder.loadTexts: joltConnectionPoolIndex.setStatus('current')
joltConnectionPoolObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolObjectName.setStatus('current')
joltConnectionPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolType.setStatus('current')
joltConnectionPoolMinimumPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolMinimumPoolSize.setStatus('current')
joltConnectionPoolMaximumPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolMaximumPoolSize.setStatus('current')
joltConnectionPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolName.setStatus('current')
joltConnectionPoolUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolUserName.setStatus('current')
joltConnectionPoolDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolDeploymentOrder.setStatus('current')
joltConnectionPoolRecvTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolRecvTimeout.setStatus('current')
joltConnectionPoolSecurityContextEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolSecurityContextEnabled.setStatus('current')
joltConnectionPoolTrustStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolTrustStoreName.setStatus('current')
joltConnectionPoolUserRole = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolUserRole.setStatus('current')
joltConnectionPoolKeyStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolKeyStoreName.setStatus('current')
joltConnectionPoolFailoverAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolFailoverAddresses.setStatus('current')
joltConnectionPoolPrimaryAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 985, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: joltConnectionPoolPrimaryAddresses.setStatus('current')
logFilterTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 990), )
if mibBuilder.loadTexts: logFilterTable.setStatus('current')
logFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 990, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "logFilterIndex"))
if mibBuilder.loadTexts: logFilterEntry.setStatus('current')
logFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 990, 1, 1), OctetString())
if mibBuilder.loadTexts: logFilterIndex.setStatus('current')
logFilterObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 990, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFilterObjectName.setStatus('current')
logFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 990, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFilterType.setStatus('current')
logFilterFilterExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 990, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFilterFilterExpression.setStatus('current')
logFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 990, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFilterName.setStatus('current')
mailSessionTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 995), )
if mibBuilder.loadTexts: mailSessionTable.setStatus('current')
mailSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 995, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "mailSessionIndex"))
if mibBuilder.loadTexts: mailSessionEntry.setStatus('current')
mailSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 995, 1, 1), OctetString())
if mibBuilder.loadTexts: mailSessionIndex.setStatus('current')
mailSessionObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 995, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailSessionObjectName.setStatus('current')
mailSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 995, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailSessionType.setStatus('current')
mailSessionDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 995, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailSessionDeploymentOrder.setStatus('current')
mailSessionJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 995, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailSessionJNDIName.setStatus('current')
mailSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 995, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailSessionName.setStatus('current')
maxThreadsConstraintTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1000), )
if mibBuilder.loadTexts: maxThreadsConstraintTable.setStatus('current')
maxThreadsConstraintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1000, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "maxThreadsConstraintIndex"))
if mibBuilder.loadTexts: maxThreadsConstraintEntry.setStatus('current')
maxThreadsConstraintIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1000, 1, 1), OctetString())
if mibBuilder.loadTexts: maxThreadsConstraintIndex.setStatus('current')
maxThreadsConstraintObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1000, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintObjectName.setStatus('current')
maxThreadsConstraintType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1000, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintType.setStatus('current')
maxThreadsConstraintDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1000, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintDeploymentOrder.setStatus('current')
maxThreadsConstraintCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1000, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintCount.setStatus('current')
maxThreadsConstraintName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1000, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintName.setStatus('current')
maxThreadsConstraintConnectionPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1000, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxThreadsConstraintConnectionPoolName.setStatus('current')
minThreadsConstraintTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1010), )
if mibBuilder.loadTexts: minThreadsConstraintTable.setStatus('current')
minThreadsConstraintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1010, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "minThreadsConstraintIndex"))
if mibBuilder.loadTexts: minThreadsConstraintEntry.setStatus('current')
minThreadsConstraintIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1010, 1, 1), OctetString())
if mibBuilder.loadTexts: minThreadsConstraintIndex.setStatus('current')
minThreadsConstraintObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1010, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintObjectName.setStatus('current')
minThreadsConstraintType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1010, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintType.setStatus('current')
minThreadsConstraintDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1010, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintDeploymentOrder.setStatus('current')
minThreadsConstraintCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1010, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintCount.setStatus('current')
minThreadsConstraintName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1010, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minThreadsConstraintName.setStatus('current')
overloadProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1015), )
if mibBuilder.loadTexts: overloadProtectionTable.setStatus('current')
overloadProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1015, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "overloadProtectionIndex"))
if mibBuilder.loadTexts: overloadProtectionEntry.setStatus('current')
overloadProtectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1015, 1, 1), OctetString())
if mibBuilder.loadTexts: overloadProtectionIndex.setStatus('current')
overloadProtectionObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1015, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overloadProtectionObjectName.setStatus('current')
overloadProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1015, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overloadProtectionType.setStatus('current')
overloadProtectionSharedCapacityForWorkManagers = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1015, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overloadProtectionSharedCapacityForWorkManagers.setStatus('current')
overloadProtectionFreeMemoryPercentLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1015, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overloadProtectionFreeMemoryPercentLowThreshold.setStatus('current')
overloadProtectionFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1015, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overloadProtectionFailureAction.setStatus('current')
overloadProtectionFreeMemoryPercentHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1015, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overloadProtectionFreeMemoryPercentHighThreshold.setStatus('current')
overloadProtectionName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1015, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overloadProtectionName.setStatus('current')
overloadProtectionPanicAction = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1015, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overloadProtectionPanicAction.setStatus('current')
pathServiceTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1020), )
if mibBuilder.loadTexts: pathServiceTable.setStatus('current')
pathServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1020, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "pathServiceIndex"))
if mibBuilder.loadTexts: pathServiceEntry.setStatus('current')
pathServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1020, 1, 1), OctetString())
if mibBuilder.loadTexts: pathServiceIndex.setStatus('current')
pathServiceObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1020, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathServiceObjectName.setStatus('current')
pathServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1020, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathServiceType.setStatus('current')
pathServiceDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1020, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathServiceDeploymentOrder.setStatus('current')
pathServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1020, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathServiceName.setStatus('current')
remoteSAFContextTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1025), )
if mibBuilder.loadTexts: remoteSAFContextTable.setStatus('current')
remoteSAFContextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "remoteSAFContextIndex"))
if mibBuilder.loadTexts: remoteSAFContextEntry.setStatus('current')
remoteSAFContextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1, 1), OctetString())
if mibBuilder.loadTexts: remoteSAFContextIndex.setStatus('current')
remoteSAFContextObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSAFContextObjectName.setStatus('current')
remoteSAFContextType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSAFContextType.setStatus('current')
remoteSAFContextProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSAFContextProtocol.setStatus('current')
remoteSAFContextUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSAFContextUrl.setStatus('current')
remoteSAFContextPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSAFContextPassword.setStatus('current')
remoteSAFContextJndiInitialContextFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSAFContextJndiInitialContextFactory.setStatus('current')
remoteSAFContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSAFContextName.setStatus('current')
remoteSAFContextJndiProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSAFContextJndiProperty.setStatus('current')
remoteSAFContextUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1025, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSAFContextUsername.setStatus('current')
responseTimeRequestClassTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1030), )
if mibBuilder.loadTexts: responseTimeRequestClassTable.setStatus('current')
responseTimeRequestClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1030, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "responseTimeRequestClassIndex"))
if mibBuilder.loadTexts: responseTimeRequestClassEntry.setStatus('current')
responseTimeRequestClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1030, 1, 1), OctetString())
if mibBuilder.loadTexts: responseTimeRequestClassIndex.setStatus('current')
responseTimeRequestClassObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1030, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responseTimeRequestClassObjectName.setStatus('current')
responseTimeRequestClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1030, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responseTimeRequestClassType.setStatus('current')
responseTimeRequestClassDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1030, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responseTimeRequestClassDeploymentOrder.setStatus('current')
responseTimeRequestClassGoalMs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1030, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responseTimeRequestClassGoalMs.setStatus('current')
responseTimeRequestClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1030, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responseTimeRequestClassName.setStatus('current')
safAgentTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1035), )
if mibBuilder.loadTexts: safAgentTable.setStatus('current')
safAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "safAgentIndex"))
if mibBuilder.loadTexts: safAgentEntry.setStatus('current')
safAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 1), OctetString())
if mibBuilder.loadTexts: safAgentIndex.setStatus('current')
safAgentObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentObjectName.setStatus('current')
safAgentType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentType.setStatus('current')
safAgentForwardingPausedAtStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentForwardingPausedAtStartup.setStatus('current')
safAgentDefaultRetryDelayMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentDefaultRetryDelayMultiplier.setStatus('current')
safAgentLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentLoggingEnabled.setStatus('current')
safAgentBytesThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentBytesThresholdHigh.setStatus('current')
safAgentWindowInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentWindowInterval.setStatus('current')
safAgentBytesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentBytesMaximum.setStatus('current')
safAgentServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentServiceType.setStatus('current')
safAgentMessagesThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentMessagesThresholdLow.setStatus('current')
safAgentMessagesThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentMessagesThresholdHigh.setStatus('current')
safAgentIncomingPausedAtStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentIncomingPausedAtStartup.setStatus('current')
safAgentReceivingPausedAtStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentReceivingPausedAtStartup.setStatus('current')
safAgentMessagesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentMessagesMaximum.setStatus('current')
safAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentName.setStatus('current')
safAgentConversationIdleTimeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentConversationIdleTimeMaximum.setStatus('current')
safAgentDefaultRetryDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentDefaultRetryDelayMaximum.setStatus('current')
safAgentMaximumMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentMaximumMessageSize.setStatus('current')
safAgentAcknowledgeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentAcknowledgeInterval.setStatus('current')
safAgentDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentDeploymentOrder.setStatus('current')
safAgentMessageBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentMessageBufferSize.setStatus('current')
safAgentWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentWindowSize.setStatus('current')
safAgentDefaultTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentDefaultTimeToLive.setStatus('current')
safAgentPagingDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentPagingDirectory.setStatus('current')
safAgentBytesThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentBytesThresholdLow.setStatus('current')
safAgentDefaultRetryDelayBase = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1035, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAgentDefaultRetryDelayBase.setStatus('current')
wlssnmpAgentDeploymentTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1040), )
if mibBuilder.loadTexts: wlssnmpAgentDeploymentTable.setStatus('current')
wlssnmpAgentDeploymentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlssnmpAgentDeploymentIndex"))
if mibBuilder.loadTexts: wlssnmpAgentDeploymentEntry.setStatus('current')
wlssnmpAgentDeploymentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 1), OctetString())
if mibBuilder.loadTexts: wlssnmpAgentDeploymentIndex.setStatus('current')
wlssnmpAgentDeploymentObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentObjectName.setStatus('current')
wlssnmpAgentDeploymentType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentType.setStatus('current')
wlssnmpAgentDeploymentCommunityPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentCommunityPrefix.setStatus('current')
wlssnmpAgentDeploymentAuthenticationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentAuthenticationProtocol.setStatus('current')
wlssnmpAgentDeploymentSNMPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentSNMPPort.setStatus('current')
wlssnmpAgentDeploymentSNMPEngineId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentSNMPEngineId.setStatus('current')
wlssnmpAgentDeploymentSNMPAccessForUserMBeansEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentSNMPAccessForUserMBeansEnabled.setStatus('current')
wlssnmpAgentDeploymentLocalizedKeyCacheInvalidationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentLocalizedKeyCacheInvalidationInterval.setStatus('current')
wlssnmpAgentDeploymentEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentEnabled.setStatus('current')
wlssnmpAgentDeploymentName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentName.setStatus('current')
wlssnmpAgentDeploymentInformEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentInformEnabled.setStatus('current')
wlssnmpAgentDeploymentSendAutomaticTrapsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentSendAutomaticTrapsEnabled.setStatus('current')
wlssnmpAgentDeploymentInformRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentInformRetryInterval.setStatus('current')
wlssnmpAgentDeploymentDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentDeploymentOrder.setStatus('current')
wlssnmpAgentDeploymentPrivacyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentPrivacyProtocol.setStatus('current')
wlssnmpAgentDeploymentMasterAgentXPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentMasterAgentXPort.setStatus('current')
wlssnmpAgentDeploymentSNMPTrapVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentSNMPTrapVersion.setStatus('current')
wlssnmpAgentDeploymentMaxInformRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentMaxInformRetryCount.setStatus('current')
wlssnmpAgentDeploymentCommunityBasedAccessEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentCommunityBasedAccessEnabled.setStatus('current')
wlssnmpAgentDeploymentMibDataRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentMibDataRefreshInterval.setStatus('current')
wlssnmpAgentDeploymentDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentDebugLevel.setStatus('current')
wlssnmpAgentDeploymentServerStatusCheckIntervalFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1040, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentDeploymentServerStatusCheckIntervalFactor.setStatus('current')
wlssnmpAttributeChangeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1045), )
if mibBuilder.loadTexts: wlssnmpAttributeChangeTable.setStatus('current')
wlssnmpAttributeChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1045, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlssnmpAttributeChangeIndex"))
if mibBuilder.loadTexts: wlssnmpAttributeChangeEntry.setStatus('current')
wlssnmpAttributeChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1045, 1, 1), OctetString())
if mibBuilder.loadTexts: wlssnmpAttributeChangeIndex.setStatus('current')
wlssnmpAttributeChangeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1045, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAttributeChangeObjectName.setStatus('current')
wlssnmpAttributeChangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1045, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAttributeChangeType.setStatus('current')
wlssnmpAttributeChangeAttributeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1045, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAttributeChangeAttributeName.setStatus('current')
wlssnmpAttributeChangeAttributeMBeanName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1045, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAttributeChangeAttributeMBeanName.setStatus('current')
wlssnmpAttributeChangeAttributeMBeanType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1045, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAttributeChangeAttributeMBeanType.setStatus('current')
wlssnmpAttributeChangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1045, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAttributeChangeName.setStatus('current')
wlssnmpCounterMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1050), )
if mibBuilder.loadTexts: wlssnmpCounterMonitorTable.setStatus('current')
wlssnmpCounterMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlssnmpCounterMonitorIndex"))
if mibBuilder.loadTexts: wlssnmpCounterMonitorEntry.setStatus('current')
wlssnmpCounterMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 1), OctetString())
if mibBuilder.loadTexts: wlssnmpCounterMonitorIndex.setStatus('current')
wlssnmpCounterMonitorObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpCounterMonitorObjectName.setStatus('current')
wlssnmpCounterMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpCounterMonitorType.setStatus('current')
wlssnmpCounterMonitorMonitoredAttributeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpCounterMonitorMonitoredAttributeName.setStatus('current')
wlssnmpCounterMonitorMonitoredMBeanType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpCounterMonitorMonitoredMBeanType.setStatus('current')
wlssnmpCounterMonitorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpCounterMonitorOffset.setStatus('current')
wlssnmpCounterMonitorModulus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpCounterMonitorModulus.setStatus('current')
wlssnmpCounterMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpCounterMonitorName.setStatus('current')
wlssnmpCounterMonitorPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpCounterMonitorPollingInterval.setStatus('current')
wlssnmpCounterMonitorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpCounterMonitorThreshold.setStatus('current')
wlssnmpCounterMonitorMonitoredMBeanName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1050, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpCounterMonitorMonitoredMBeanName.setStatus('current')
wlssnmpGaugeMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1055), )
if mibBuilder.loadTexts: wlssnmpGaugeMonitorTable.setStatus('current')
wlssnmpGaugeMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlssnmpGaugeMonitorIndex"))
if mibBuilder.loadTexts: wlssnmpGaugeMonitorEntry.setStatus('current')
wlssnmpGaugeMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1, 1), OctetString())
if mibBuilder.loadTexts: wlssnmpGaugeMonitorIndex.setStatus('current')
wlssnmpGaugeMonitorObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpGaugeMonitorObjectName.setStatus('current')
wlssnmpGaugeMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpGaugeMonitorType.setStatus('current')
wlssnmpGaugeMonitorThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpGaugeMonitorThresholdLow.setStatus('current')
wlssnmpGaugeMonitorMonitoredAttributeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpGaugeMonitorMonitoredAttributeName.setStatus('current')
wlssnmpGaugeMonitorThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpGaugeMonitorThresholdHigh.setStatus('current')
wlssnmpGaugeMonitorMonitoredMBeanType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpGaugeMonitorMonitoredMBeanType.setStatus('current')
wlssnmpGaugeMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpGaugeMonitorName.setStatus('current')
wlssnmpGaugeMonitorPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpGaugeMonitorPollingInterval.setStatus('current')
wlssnmpGaugeMonitorMonitoredMBeanName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1055, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpGaugeMonitorMonitoredMBeanName.setStatus('current')
wlssnmpLogFilterTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1060), )
if mibBuilder.loadTexts: wlssnmpLogFilterTable.setStatus('current')
wlssnmpLogFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1060, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlssnmpLogFilterIndex"))
if mibBuilder.loadTexts: wlssnmpLogFilterEntry.setStatus('current')
wlssnmpLogFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1060, 1, 1), OctetString())
if mibBuilder.loadTexts: wlssnmpLogFilterIndex.setStatus('current')
wlssnmpLogFilterObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1060, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpLogFilterObjectName.setStatus('current')
wlssnmpLogFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1060, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpLogFilterType.setStatus('current')
wlssnmpLogFilterSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1060, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpLogFilterSeverityLevel.setStatus('current')
wlssnmpLogFilterMessageSubstring = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1060, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpLogFilterMessageSubstring.setStatus('current')
wlssnmpLogFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1060, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpLogFilterName.setStatus('current')
wlssnmpLogFilterUserIds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1060, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpLogFilterUserIds.setStatus('current')
wlssnmpLogFilterSubsystemNames = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1060, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpLogFilterSubsystemNames.setStatus('current')
wlssnmpLogFilterMessageIds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1060, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpLogFilterMessageIds.setStatus('current')
wlssnmpProxyTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1065), )
if mibBuilder.loadTexts: wlssnmpProxyTable.setStatus('current')
wlssnmpProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlssnmpProxyIndex"))
if mibBuilder.loadTexts: wlssnmpProxyEntry.setStatus('current')
wlssnmpProxyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1, 1), OctetString())
if mibBuilder.loadTexts: wlssnmpProxyIndex.setStatus('current')
wlssnmpProxyObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpProxyObjectName.setStatus('current')
wlssnmpProxyType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpProxyType.setStatus('current')
wlssnmpProxyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpProxyTimeout.setStatus('current')
wlssnmpProxySecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpProxySecurityName.setStatus('current')
wlssnmpProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpProxyPort.setStatus('current')
wlssnmpProxySecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpProxySecurityLevel.setStatus('current')
wlssnmpProxyOidRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpProxyOidRoot.setStatus('current')
wlssnmpProxyCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpProxyCommunity.setStatus('current')
wlssnmpProxyName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1065, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpProxyName.setStatus('current')
wlssnmpStringMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1070), )
if mibBuilder.loadTexts: wlssnmpStringMonitorTable.setStatus('current')
wlssnmpStringMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlssnmpStringMonitorIndex"))
if mibBuilder.loadTexts: wlssnmpStringMonitorEntry.setStatus('current')
wlssnmpStringMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 1), OctetString())
if mibBuilder.loadTexts: wlssnmpStringMonitorIndex.setStatus('current')
wlssnmpStringMonitorObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpStringMonitorObjectName.setStatus('current')
wlssnmpStringMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpStringMonitorType.setStatus('current')
wlssnmpStringMonitorMonitoredAttributeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpStringMonitorMonitoredAttributeName.setStatus('current')
wlssnmpStringMonitorMonitoredMBeanType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpStringMonitorMonitoredMBeanType.setStatus('current')
wlssnmpStringMonitorNotifyDiffer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpStringMonitorNotifyDiffer.setStatus('current')
wlssnmpStringMonitorNotifyMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpStringMonitorNotifyMatch.setStatus('current')
wlssnmpStringMonitorStringToCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpStringMonitorStringToCompare.setStatus('current')
wlssnmpStringMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpStringMonitorName.setStatus('current')
wlssnmpStringMonitorPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpStringMonitorPollingInterval.setStatus('current')
wlssnmpStringMonitorMonitoredMBeanName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1070, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpStringMonitorMonitoredMBeanName.setStatus('current')
wlssnmpTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1075), )
if mibBuilder.loadTexts: wlssnmpTrapDestinationTable.setStatus('current')
wlssnmpTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1075, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlssnmpTrapDestinationIndex"))
if mibBuilder.loadTexts: wlssnmpTrapDestinationEntry.setStatus('current')
wlssnmpTrapDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1075, 1, 1), OctetString())
if mibBuilder.loadTexts: wlssnmpTrapDestinationIndex.setStatus('current')
wlssnmpTrapDestinationObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1075, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpTrapDestinationObjectName.setStatus('current')
wlssnmpTrapDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1075, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpTrapDestinationType.setStatus('current')
wlssnmpTrapDestinationHost = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1075, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpTrapDestinationHost.setStatus('current')
wlssnmpTrapDestinationSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1075, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpTrapDestinationSecurityName.setStatus('current')
wlssnmpTrapDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1075, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpTrapDestinationPort.setStatus('current')
wlssnmpTrapDestinationSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1075, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpTrapDestinationSecurityLevel.setStatus('current')
wlssnmpTrapDestinationCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1075, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpTrapDestinationCommunity.setStatus('current')
wlssnmpTrapDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1075, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpTrapDestinationName.setStatus('current')
securityConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1080), )
if mibBuilder.loadTexts: securityConfigurationTable.setStatus('current')
securityConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "securityConfigurationIndex"))
if mibBuilder.loadTexts: securityConfigurationEntry.setStatus('current')
securityConfigurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 1), OctetString())
if mibBuilder.loadTexts: securityConfigurationIndex.setStatus('current')
securityConfigurationObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationObjectName.setStatus('current')
securityConfigurationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationType.setStatus('current')
securityConfigurationWebAppFilesCaseInsensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationWebAppFilesCaseInsensitive.setStatus('current')
securityConfigurationCrossDomainSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationCrossDomainSecurityEnabled.setStatus('current')
securityConfigurationEnforceStrictURLPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationEnforceStrictURLPattern.setStatus('current')
securityConfigurationConnectionFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationConnectionFilter.setStatus('current')
securityConfigurationConsoleFullDelegationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationConsoleFullDelegationEnabled.setStatus('current')
securityConfigurationDowngradeUntrustedPrincipals = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationDowngradeUntrustedPrincipals.setStatus('current')
securityConfigurationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationName.setStatus('current')
securityConfigurationConnectionLoggerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationConnectionLoggerEnabled.setStatus('current')
securityConfigurationEnforceValidBasicAuthCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationEnforceValidBasicAuthCredentials.setStatus('current')
securityConfigurationNodeManagerUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationNodeManagerUsername.setStatus('current')
securityConfigurationAnonymousAdminLookupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationAnonymousAdminLookupEnabled.setStatus('current')
securityConfigurationCompatibilityConnectionFiltersEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationCompatibilityConnectionFiltersEnabled.setStatus('current')
securityConfigurationConnectionFilterRules = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationConnectionFilterRules.setStatus('current')
securityConfigurationExcludedDomainNames = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationExcludedDomainNames.setStatus('current')
securityConfigurationClearTextCredentialAccessEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationClearTextCredentialAccessEnabled.setStatus('current')
securityConfigurationPrincipalEqualsCaseInsensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationPrincipalEqualsCaseInsensitive.setStatus('current')
securityConfigurationPrincipalEqualsCompareDnAndGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1080, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityConfigurationPrincipalEqualsCompareDnAndGuid.setStatus('current')
selfTuningTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1085), )
if mibBuilder.loadTexts: selfTuningTable.setStatus('current')
selfTuningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1085, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "selfTuningIndex"))
if mibBuilder.loadTexts: selfTuningEntry.setStatus('current')
selfTuningIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1085, 1, 1), OctetString())
if mibBuilder.loadTexts: selfTuningIndex.setStatus('current')
selfTuningObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1085, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: selfTuningObjectName.setStatus('current')
selfTuningType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1085, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: selfTuningType.setStatus('current')
selfTuningName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1085, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: selfTuningName.setStatus('current')
serverDebugTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1090), )
if mibBuilder.loadTexts: serverDebugTable.setStatus('current')
serverDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serverDebugIndex"))
if mibBuilder.loadTexts: serverDebugEntry.setStatus('current')
serverDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 1), OctetString())
if mibBuilder.loadTexts: serverDebugIndex.setStatus('current')
serverDebugObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugObjectName.setStatus('current')
serverDebugDebugJDBCSQL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJDBCSQL.setStatus('current')
serverDebugDebugIIOPConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugIIOPConnection.setStatus('current')
serverDebugDebugJAXPIncludeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJAXPIncludeTime.setStatus('current')
serverDebugDebugMessagingBridgeRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMessagingBridgeRuntime.setStatus('current')
serverDebugDebugWebAppSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWebAppSecurity.setStatus('current')
serverDebugDebugMuxerDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMuxerDetail.setStatus('current')
serverDebugDebugXMLRegistryIncludeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLRegistryIncludeLocation.setStatus('current')
serverDebugDebugJMXRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMXRuntime.setStatus('current')
serverDebugDebugJNDIFactories = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJNDIFactories.setStatus('current')
serverDebugDebugDiagnosticInstrumentationWeaving = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticInstrumentationWeaving.setStatus('current')
serverDebugDebugJTARecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTARecovery.setStatus('current')
serverDebugClassLoader = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugClassLoader.setStatus('current')
serverDebugDebugRADeployment = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRADeployment.setStatus('current')
serverDebugDebugMessagingKernel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMessagingKernel.setStatus('current')
serverDebugDebugJTAAPI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAAPI.setStatus('current')
serverDebugDebugEjbLocking = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbLocking.setStatus('current')
serverDebugDebugDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDescriptor.setStatus('current')
serverDebugDebugDiagnosticsHarvesterTreeBeanPlugin = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticsHarvesterTreeBeanPlugin.setStatus('current')
serverDebugDebugSAFTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSAFTransport.setStatus('current')
serverDebugDebugStoreIOPhysicalVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugStoreIOPhysicalVerbose.setStatus('current')
serverDebugDebugStoreIOPhysical = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugStoreIOPhysical.setStatus('current')
serverDebugDebugJNDI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJNDI.setStatus('current')
serverDebugDebugJTALLR = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTALLR.setStatus('current')
serverDebugDebugJTARecoveryStackTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTARecoveryStackTrace.setStatus('current')
serverDebugDebugJTATransactionName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTATransactionName.setStatus('current')
serverDebugDebugRAPooling = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAPooling.setStatus('current')
serverDebugDebugDeploymentServiceTransportHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDeploymentServiceTransportHttp.setStatus('current')
serverDebugDebugDiagnosticCollections = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticCollections.setStatus('current')
serverDebugDebugJMXCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMXCompatibility.setStatus('current')
serverDebugDebugDRSMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDRSMessages.setStatus('current')
serverDebugDebugMessagingBridgeRuntimeVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMessagingBridgeRuntimeVerbose.setStatus('current')
serverDebugDebugSecurityJACCNonPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityJACCNonPolicy.setStatus('current')
serverDebugClassLoaderVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugClassLoaderVerbose.setStatus('current')
serverDebugDebugXMLEntityCacheUseShortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLEntityCacheUseShortClass.setStatus('current')
serverDebugDebugJMSWrappers = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSWrappers.setStatus('current')
serverDebugDebugEmbeddedLDAP = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEmbeddedLDAP.setStatus('current')
serverDebugDebugLeaderElection = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugLeaderElection.setStatus('current')
serverDebugDebugDiagnosticAccessor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticAccessor.setStatus('current')
serverDebugDebugDiagnosticWatch = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticWatch.setStatus('current')
serverDebugDebugJTAJDBC = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAJDBC.setStatus('current')
serverDebugDebugMessagingBridgeStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMessagingBridgeStartup.setStatus('current')
serverDebugDebugXMLRegistryDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLRegistryDebugLevel.setStatus('current')
serverDebugDebugWTCCorbaEx = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWTCCorbaEx.setStatus('current')
serverDebugDebugSAFSendingAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSAFSendingAgent.setStatus('current')
serverDebugForceGCEachDGCPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugForceGCEachDGCPeriod.setStatus('current')
serverDebugDebugDiagnosticInstrumentation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticInstrumentation.setStatus('current')
serverDebugDebugIIOPReplacer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugIIOPReplacer.setStatus('current')
serverDebugDebugFileDistributionServlet = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 50), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugFileDistributionServlet.setStatus('current')
serverDebugDebugJTAPropagate = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAPropagate.setStatus('current')
serverDebugDebugXMLRegistryIncludeClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLRegistryIncludeClass.setStatus('current')
serverDebugDebugXMLEntityCacheDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLEntityCacheDebugLevel.setStatus('current')
serverDebugDebugJTAHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAHealth.setStatus('current')
serverDebugDebugEjbSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 55), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbSecurity.setStatus('current')
serverDebugDebugIIOPTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugIIOPTransport.setStatus('current')
serverDebugDebugJDBCRMI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 57), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJDBCRMI.setStatus('current')
serverDebugDebugJMSCDS = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 58), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSCDS.setStatus('current')
serverDebugDebugXMLEntityCacheDebugName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 59), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLEntityCacheDebugName.setStatus('current')
serverDebugDebugEjbCaching = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 60), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbCaching.setStatus('current')
serverDebugDebugRAXAwork = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 61), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAXAwork.setStatus('current')
serverDebugDebugServerMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 62), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugServerMigration.setStatus('current')
serverDebugDebugEmbeddedLDAPLogToConsole = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 63), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEmbeddedLDAPLogToConsole.setStatus('current')
serverDebugDebugJAXPDebugName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 64), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJAXPDebugName.setStatus('current')
serverDebugDebugRAConnEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAConnEvents.setStatus('current')
serverDebugDebugRAXAin = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 66), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAXAin.setStatus('current')
serverDebugDebugJMSConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 67), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSConfig.setStatus('current')
serverDebugClassloaderWebApp = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 68), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugClassloaderWebApp.setStatus('current')
serverDebugDebugJDBCInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 69), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJDBCInternal.setStatus('current')
serverDebugDebugJpaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 70), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaProfile.setStatus('current')
serverDebugDebugMessagingKernelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 71), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMessagingKernelBoot.setStatus('current')
serverDebugWebModule = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 72), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugWebModule.setStatus('current')
serverDebugDebugReplication = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugReplication.setStatus('current')
serverDebugDebugFailOver = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 74), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugFailOver.setStatus('current')
serverDebugDebugXMLEntityCacheIncludeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 75), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLEntityCacheIncludeName.setStatus('current')
serverDebugDebugSNMPAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSNMPAgent.setStatus('current')
serverDebugDebugDRSStateTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 77), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDRSStateTransitions.setStatus('current')
serverDebugDebugJpaManage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 78), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaManage.setStatus('current')
serverDebugDebugJMSCommon = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 79), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSCommon.setStatus('current')
serverDebugDebugJpaRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 80), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaRuntime.setStatus('current')
serverDebugDebugEmbeddedLDAPLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEmbeddedLDAPLogLevel.setStatus('current')
serverDebugDebugSecurityAdjudicator = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 82), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityAdjudicator.setStatus('current')
serverDebugDebugSAFAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 83), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSAFAdmin.setStatus('current')
serverDebugDebugEjbPooling = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 84), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbPooling.setStatus('current')
serverDebugDebugWTCtBridgeEx = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 85), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWTCtBridgeEx.setStatus('current')
serverDebugDebugSecuritySAMLLib = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 86), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecuritySAMLLib.setStatus('current')
serverDebugDebugDiagnosticArchive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 87), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticArchive.setStatus('current')
serverDebugDebugURLResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 88), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugURLResolution.setStatus('current')
serverDebugDebugLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 89), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugLoadBalancing.setStatus('current')
serverDebugDebugWebAppModule = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 90), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWebAppModule.setStatus('current')
serverDebugDebugSecurityService = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 91), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityService.setStatus('current')
serverDebugDebugRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 92), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRC4.setStatus('current')
serverDebugDebugXMLRegistryIncludeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 93), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLRegistryIncludeTime.setStatus('current')
serverDebugDebugJAXPIncludeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 94), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJAXPIncludeLocation.setStatus('current')
serverDebugDebugLoggingConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 95), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugLoggingConfiguration.setStatus('current')
serverDebugDebugHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 96), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugHttp.setStatus('current')
serverDebugDebugDiagnosticFileArchive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 97), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticFileArchive.setStatus('current')
serverDebugDebugJTAXA = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 98), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAXA.setStatus('current')
serverDebugDebugIIOPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 99), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugIIOPSecurity.setStatus('current')
serverDebugDebugRAXAout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 100), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAXAout.setStatus('current')
serverDebugDebugJAXPIncludeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 101), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJAXPIncludeName.setStatus('current')
serverDebugDebugDiagnosticsModule = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 102), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticsModule.setStatus('current')
serverDebugApplicationContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 103), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugApplicationContainer.setStatus('current')
serverDebugDebugDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 104), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDeploy.setStatus('current')
serverDebugDebugDeploymentServiceTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 105), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDeploymentServiceTransport.setStatus('current')
serverDebugDebugWTCTDomPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 106), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWTCTDomPdu.setStatus('current')
serverDebugDebugJTALifecycle = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 107), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTALifecycle.setStatus('current')
serverDebugDebugJTATLOG = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 108), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTATLOG.setStatus('current')
serverDebugDebugRAParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 109), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAParsing.setStatus('current')
serverDebugDebugServerLifeCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 110), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugServerLifeCycle.setStatus('current')
serverDebugDebugSAFReceivingAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 111), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSAFReceivingAgent.setStatus('current')
serverDebugDebugConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 112), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugConnection.setStatus('current')
serverDebugDebugJMSBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 113), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSBoot.setStatus('current')
serverDebugDebugJMSSAF = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 114), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSSAF.setStatus('current')
serverDebugDebugDiagnosticImage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 115), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticImage.setStatus('current')
serverDebugDebugJpaJdbcSchema = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 116), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaJdbcSchema.setStatus('current')
serverDebugDebugTunnelingConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 117), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugTunnelingConnection.setStatus('current')
serverDebugDebugClusterHeartbeats = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 118), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugClusterHeartbeats.setStatus('current')
serverDebugDebugRSA = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 119), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRSA.setStatus('current')
serverDebugDebugSecurityEEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 120), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityEEngine.setStatus('current')
serverDebugDebugSecurityKeyStore = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 121), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityKeyStore.setStatus('current')
serverDebugDebugXMLEntityCacheIncludeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 122), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLEntityCacheIncludeTime.setStatus('current')
serverDebugDebugJMSPauseResume = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 123), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSPauseResume.setStatus('current')
serverDebugDebugLibraries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 124), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugLibraries.setStatus('current')
serverDebugDebugSecurityCredMap = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 125), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityCredMap.setStatus('current')
serverDebugDebugConfigurationRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 126), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugConfigurationRuntime.setStatus('current')
serverDebugDebugDiagnosticLifecycleHandlers = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 127), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticLifecycleHandlers.setStatus('current')
serverDebugDebugConfigurationEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 128), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugConfigurationEdit.setStatus('current')
serverDebugDebugDiagnosticWlstoreArchive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 129), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticWlstoreArchive.setStatus('current')
serverDebugDebugSecurityPasswordPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 130), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityPasswordPolicy.setStatus('current')
serverDebugDebugEjbCompilation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 131), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbCompilation.setStatus('current')
serverDebugDebugJpaQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 132), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaQuery.setStatus('current')
serverDebugDebugSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 133), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSSL.setStatus('current')
serverDebugDebugRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 134), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRouting.setStatus('current')
serverDebugDebugJpaDataCache = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 135), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaDataCache.setStatus('current')
serverDebugDebugConsensusLeasing = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 136), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugConsensusLeasing.setStatus('current')
serverDebugDebugDiagnosticInstrumentationEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 137), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticInstrumentationEvents.setStatus('current')
serverDebugDebugStoreIOLogicalBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 138), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugStoreIOLogicalBoot.setStatus('current')
serverDebugDebugEjbSwapping = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 139), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbSwapping.setStatus('current')
serverDebugDebugJTANonXA = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 140), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTANonXA.setStatus('current')
serverDebugDebugDiagnosticInstrumentationConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 141), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticInstrumentationConfig.setStatus('current')
serverDebugDebugMessaging = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 142), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMessaging.setStatus('current')
serverDebugDebugSecurityCertPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 143), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityCertPath.setStatus('current')
serverDebugDebugJNDIResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 144), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJNDIResolution.setStatus('current')
serverDebugDebugSNMPProtocolTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 145), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSNMPProtocolTCP.setStatus('current')
serverDebugDebugRALocalOut = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 146), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRALocalOut.setStatus('current')
serverDebugDebugJMXDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 147), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMXDomain.setStatus('current')
serverDebugDebugDiagnosticsHarvesterData = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 148), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticsHarvesterData.setStatus('current')
serverDebugDebugSecurityRoleMap = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 149), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityRoleMap.setStatus('current')
serverDebugDebugEjbDeployment = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 150), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbDeployment.setStatus('current')
serverDebugDebugSNMPToolkit = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 151), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSNMPToolkit.setStatus('current')
serverDebugDebugMuxer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 152), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMuxer.setStatus('current')
serverDebugMasterDeployer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 153), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugMasterDeployer.setStatus('current')
serverDebugDebugSecuritySAMLCredMap = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 154), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecuritySAMLCredMap.setStatus('current')
serverDebugDiagnosticContextDebugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 155), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDiagnosticContextDebugMode.setStatus('current')
serverDebugDebugSecuritySSL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 156), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecuritySSL.setStatus('current')
serverDebugDebugDiagnosticJdbcArchive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 157), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticJdbcArchive.setStatus('current')
serverDebugSlaveDeployer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 158), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugSlaveDeployer.setStatus('current')
serverDebugDebugJTAXAStackTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 159), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAXAStackTrace.setStatus('current')
serverDebugDebugSecurityJACC = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 160), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityJACC.setStatus('current')
serverDebugDebugEjbCmpDeployment = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 161), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbCmpDeployment.setStatus('current')
serverDebugType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 162), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugType.setStatus('current')
serverDebugDebugEmbeddedLDAPWriteOverrideProps = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 163), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEmbeddedLDAPWriteOverrideProps.setStatus('current')
serverDebugDebugSecurityJACCPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 164), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityJACCPolicy.setStatus('current')
serverDebugDebugJMSDispatcher = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 165), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSDispatcher.setStatus('current')
serverDebugDebugClusterAnnouncements = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 166), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugClusterAnnouncements.setStatus('current')
serverDebugClasspathServlet = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 167), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugClasspathServlet.setStatus('current')
serverDebugDebugIIOPTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 168), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugIIOPTunneling.setStatus('current')
serverDebugDebugJAXPDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 169), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJAXPDebugLevel.setStatus('current')
serverDebugDebugJ2EEManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 170), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJ2EEManagement.setStatus('current')
serverDebugDebugJTAResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 171), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAResourceName.setStatus('current')
serverDebugDebugSecurityEncryptionService = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 172), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityEncryptionService.setStatus('current')
serverDebugDebugJDBCConn = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 173), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJDBCConn.setStatus('current')
serverDebugDebugDRSUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 174), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDRSUpdateStatus.setStatus('current')
serverDebugDebugDeploymentServiceStatusUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 175), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDeploymentServiceStatusUpdates.setStatus('current')
serverDebugDebugMuxerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 176), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMuxerTimeout.setStatus('current')
serverDebugDebugSAFStore = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 177), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSAFStore.setStatus('current')
serverDebugName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 178), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugName.setStatus('current')
serverDebugDebugDomainLogHandler = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 179), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDomainLogHandler.setStatus('current')
serverDebugDebugWTCConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 180), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWTCConfig.setStatus('current')
serverDebugDebugJTAGatewayStackTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 181), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAGatewayStackTrace.setStatus('current')
serverDebugDebugMuxerException = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 182), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMuxerException.setStatus('current')
serverDebugDebugDRSHeartbeats = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 183), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDRSHeartbeats.setStatus('current')
serverDebugDebugJTA2PCStackTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 184), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTA2PCStackTrace.setStatus('current')
serverDebugDebugJMSBackEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 185), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSBackEnd.setStatus('current')
serverDebugDebugXMLEntityCacheIncludeClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 186), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLEntityCacheIncludeClass.setStatus('current')
serverDebugDebugCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 187), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugCluster.setStatus('current')
serverDebugDebugJTAResourceHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 188), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAResourceHealth.setStatus('current')
serverDebugDebugRASecurityCtx = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 189), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRASecurityCtx.setStatus('current')
serverDebugDebugStoreAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 190), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugStoreAdmin.setStatus('current')
serverDebugClassFinder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 191), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugClassFinder.setStatus('current')
serverDebugDebugDeploymentService = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 192), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDeploymentService.setStatus('current')
serverDebugDebugHttpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 193), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugHttpSessions.setStatus('current')
serverDebugDebugJMXEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 194), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMXEdit.setStatus('current')
serverDebugDebugClusterFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 195), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugClusterFragments.setStatus('current')
serverDebugDebugWTCJatmiEx = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 196), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWTCJatmiEx.setStatus('current')
serverDebugDebugWTCUData = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 197), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWTCUData.setStatus('current')
serverDebugDebugDeploymentServiceInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 198), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDeploymentServiceInternal.setStatus('current')
serverDebugDebugSecurityAuditor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 199), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityAuditor.setStatus('current')
serverDebugDebugJpaJdbcSql = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 200), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaJdbcSql.setStatus('current')
serverDebugDebugEjbInvoke = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 201), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbInvoke.setStatus('current')
serverDebugDebugRAWork = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 202), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAWork.setStatus('current')
serverDebugDebugDRSCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 203), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDRSCalls.setStatus('current')
serverDebugDebugSecurityPredicate = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 204), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityPredicate.setStatus('current')
serverDebugDebugXMLRegistryUseShortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 205), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLRegistryUseShortClass.setStatus('current')
serverDebugDebugSecurityUserLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 206), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityUserLockout.setStatus('current')
serverDebugDebugJTANamingStackTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 207), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTANamingStackTrace.setStatus('current')
serverDebugListenThreadDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 208), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugListenThreadDebug.setStatus('current')
serverDebugDebugJpaMetaData = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 209), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaMetaData.setStatus('current')
serverDebugDebugJTA2PC = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 210), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTA2PC.setStatus('current')
serverDebugDebugAppContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 211), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugAppContainer.setStatus('current')
serverDebugDebugJAXPUseShortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 212), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJAXPUseShortClass.setStatus('current')
serverDebugDebugEventManager = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 213), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEventManager.setStatus('current')
serverDebugDebugJpaEnhance = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 214), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaEnhance.setStatus('current')
serverDebugDebugTunnelingConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 215), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugTunnelingConnectionTimeout.setStatus('current')
serverDebugDebugSecuritySAMLAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 216), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecuritySAMLAtn.setStatus('current')
serverDebugDebugSecurityAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 217), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityAtn.setStatus('current')
serverDebugLogDGCStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 218), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugLogDGCStatistics.setStatus('current')
serverDebugDebugDiagnosticQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 219), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticQuery.setStatus('current')
serverDebugDebugJMX = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 220), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMX.setStatus('current')
serverDebugDebugXMLRegistryIncludeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 221), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLRegistryIncludeName.setStatus('current')
serverDebugDebugDiagnosticInstrumentationWeavingMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 222), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticInstrumentationWeavingMatches.setStatus('current')
serverDebugDebugAbbreviation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 223), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugAbbreviation.setStatus('current')
serverDebugDebugJAXPIncludeClass = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 224), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJAXPIncludeClass.setStatus('current')
serverDebugDebugHttpLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 225), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugHttpLogging.setStatus('current')
serverDebugDebugJpaJdbcJdbc = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 226), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaJdbcJdbc.setStatus('current')
serverDebugDebugSAFManager = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 227), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSAFManager.setStatus('current')
serverDebugDebugPathSvcVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 228), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugPathSvcVerbose.setStatus('current')
serverDebugDebugWTCGwtEx = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 229), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWTCGwtEx.setStatus('current')
serverDebugDebugConnectorService = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 230), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugConnectorService.setStatus('current')
serverDebugDebugJMSMessagePath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 231), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSMessagePath.setStatus('current')
serverDebugDebugJTAMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 232), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAMigration.setStatus('current')
serverDebugDebugSecurityRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 233), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityRealm.setStatus('current')
serverDebugDebugIIOPStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 234), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugIIOPStartup.setStatus('current')
serverDebugDebugJDBCDriverLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 235), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJDBCDriverLogging.setStatus('current')
serverDebugDebugJMSModule = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 236), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSModule.setStatus('current')
serverDebugDebugEjbCmpRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 237), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbCmpRuntime.setStatus('current')
serverDebugDebugWANReplicationDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 238), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWANReplicationDetails.setStatus('current')
serverDebugDebugJMST3Server = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 239), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMST3Server.setStatus('current')
serverDebugDebugXMLEntityCacheIncludeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 240), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLEntityCacheIncludeLocation.setStatus('current')
serverDebugDebugSAFVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 241), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSAFVerbose.setStatus('current')
serverDebugDebugDRSQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 242), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDRSQueues.setStatus('current')
serverDebugDebugDiagnosticInstrumentationActions = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 243), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticInstrumentationActions.setStatus('current')
serverDebugDebugDiagnosticsHarvester = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 244), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticsHarvester.setStatus('current')
serverDebugDebugEjbMdbConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 245), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbMdbConnection.setStatus('current')
serverDebugDebugJTANaming = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 246), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTANaming.setStatus('current')
serverDebugDebugSecuritySSLEaten = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 247), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecuritySSLEaten.setStatus('current')
serverDebugDebugEjbTimers = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 248), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugEjbTimers.setStatus('current')
serverDebugDebugJMXCore = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 249), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMXCore.setStatus('current')
serverDebugDebugJpaTool = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 250), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJpaTool.setStatus('current')
serverDebugDebugIIOPNaming = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 251), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugIIOPNaming.setStatus('current')
serverDebugDebugJTARMI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 252), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTARMI.setStatus('current')
serverDebugDebugJMSFrontEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 253), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSFrontEnd.setStatus('current')
serverDebugDebugSecuritySAMLService = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 254), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecuritySAMLService.setStatus('current')
serverDebugDebugRA = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 255), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRA.setStatus('current')
serverDebugDebugXMLRegistryDebugName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 256), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugXMLRegistryDebugName.setStatus('current')
serverDebugDebugSelfTuning = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 257), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSelfTuning.setStatus('current')
serverDebugDebugIIOPMarshal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 258), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugIIOPMarshal.setStatus('current')
serverDebugDebugSecurityAtz = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 259), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecurityAtz.setStatus('current')
serverDebugDebugIIOPOTS = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 260), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugIIOPOTS.setStatus('current')
serverDebugDebugDeployment = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 261), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDeployment.setStatus('current')
serverDebugDebugRAWorkEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 262), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAWorkEvents.setStatus('current')
serverDebugDebugJTAGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 263), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJTAGateway.setStatus('current')
serverDebugDebugWebAppIdentityAssertion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 264), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWebAppIdentityAssertion.setStatus('current')
serverDebugDebugMuxerConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 265), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMuxerConnection.setStatus('current')
serverDebugDebugDiagnosticArchiveRetirement = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 266), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticArchiveRetirement.setStatus('current')
serverDebugDebugRAPoolVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 267), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAPoolVerbose.setStatus('current')
serverDebugDebugStoreIOLogical = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 268), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugStoreIOLogical.setStatus('current')
serverDebugDebugRAConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 269), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAConnections.setStatus('current')
serverDebugDebugReplicationDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 270), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugReplicationDetails.setStatus('current')
serverDebugDebugDiagnosticsHarvesterMBeanPlugin = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 271), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticsHarvesterMBeanPlugin.setStatus('current')
serverDebugDebugRALifecycle = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 272), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRALifecycle.setStatus('current')
serverDebugDebugJMSDistTopic = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 273), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSDistTopic.setStatus('current')
serverDebugDebugDGCEnrollment = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 274), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDGCEnrollment.setStatus('current')
serverDebugDebugPathSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 275), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugPathSvc.setStatus('current')
serverDebugDebugDiagnosticContext = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 276), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticContext.setStatus('current')
serverDebugDebugClassRedef = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 277), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugClassRedef.setStatus('current')
serverDebugDebugSAFMessagePath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 278), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSAFMessagePath.setStatus('current')
serverDebugDebugJMSXA = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 279), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSXA.setStatus('current')
serverDebugDebugClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 280), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugClassSize.setStatus('current')
serverDebugDebugJMSDurableSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 281), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSDurableSubscribers.setStatus('current')
serverDebugClassChangeNotifier = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 282), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugClassChangeNotifier.setStatus('current')
serverDebugDebugJMSStore = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 283), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSStore.setStatus('current')
serverDebugDebugAsyncQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 284), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugAsyncQueue.setStatus('current')
serverDebugRedefiningClassLoader = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 285), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugRedefiningClassLoader.setStatus('current')
serverDebugDebugMaskCriterias = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 286), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugMaskCriterias.setStatus('current')
serverDebugDebugSecuritySAML2Lib = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 287), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecuritySAML2Lib.setStatus('current')
serverDebugDebugSecuritySAML2Atn = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 288), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecuritySAML2Atn.setStatus('current')
serverDebugDebugIIOP = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 289), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugIIOP.setStatus('current')
serverDebugDebugJMSLocking = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 290), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSLocking.setStatus('current')
serverDebugDefaultStore = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 291), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDefaultStore.setStatus('current')
serverDebugDebugJMSAME = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 292), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSAME.setStatus('current')
serverDebugDebugSecuritySAML2CredMap = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 293), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecuritySAML2CredMap.setStatus('current')
serverDebugDebugSAFLifeCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 294), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSAFLifeCycle.setStatus('current')
serverDebugDebugBootstrapServlet = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 295), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugBootstrapServlet.setStatus('current')
serverDebugDebugStoreXAVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 296), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugStoreXAVerbose.setStatus('current')
serverDebugDebugServerStartStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 297), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugServerStartStatistics.setStatus('current')
serverDebugDebugJMSJDBCScavengeOnFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 298), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJMSJDBCScavengeOnFlush.setStatus('current')
serverDebugDebugStoreXA = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 299), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugStoreXA.setStatus('current')
serverDebugDebugSecuritySAML2Service = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 300), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSecuritySAML2Service.setStatus('current')
serverDebugDebugRAClassloader = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 301), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugRAClassloader.setStatus('current')
serverDebugDebugWorkContext = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 302), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugWorkContext.setStatus('current')
serverDebugDebugSNMPExtensionProvider = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 303), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugSNMPExtensionProvider.setStatus('current')
serverDebugDebugScaContainer = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 304), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugScaContainer.setStatus('current')
serverDebugDebugDiagnosticDataGathering = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 305), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugDiagnosticDataGathering.setStatus('current')
serverDebugDebugJDBCRAC = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 306), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJDBCRAC.setStatus('current')
serverDebugDebugJDBCONS = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1090, 1, 307), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDebugDebugJDBCONS.setStatus('current')
serverFailureTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1095), )
if mibBuilder.loadTexts: serverFailureTriggerTable.setStatus('current')
serverFailureTriggerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1095, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serverFailureTriggerIndex"))
if mibBuilder.loadTexts: serverFailureTriggerEntry.setStatus('current')
serverFailureTriggerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1095, 1, 1), OctetString())
if mibBuilder.loadTexts: serverFailureTriggerIndex.setStatus('current')
serverFailureTriggerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1095, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverFailureTriggerObjectName.setStatus('current')
serverFailureTriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1095, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverFailureTriggerType.setStatus('current')
serverFailureTriggerMaxStuckThreadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1095, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverFailureTriggerMaxStuckThreadTime.setStatus('current')
serverFailureTriggerStuckThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1095, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverFailureTriggerStuckThreadCount.setStatus('current')
serverFailureTriggerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1095, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverFailureTriggerName.setStatus('current')
shutdownClassTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1100), )
if mibBuilder.loadTexts: shutdownClassTable.setStatus('current')
shutdownClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1100, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "shutdownClassIndex"))
if mibBuilder.loadTexts: shutdownClassEntry.setStatus('current')
shutdownClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1100, 1, 1), OctetString())
if mibBuilder.loadTexts: shutdownClassIndex.setStatus('current')
shutdownClassObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1100, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shutdownClassObjectName.setStatus('current')
shutdownClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1100, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shutdownClassType.setStatus('current')
shutdownClassDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1100, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shutdownClassDeploymentOrder.setStatus('current')
shutdownClassArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1100, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shutdownClassArguments.setStatus('current')
shutdownClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1100, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shutdownClassName.setStatus('current')
shutdownClassClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1100, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shutdownClassClassName.setStatus('current')
singleSignOnServicesTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1105), )
if mibBuilder.loadTexts: singleSignOnServicesTable.setStatus('current')
singleSignOnServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "singleSignOnServicesIndex"))
if mibBuilder.loadTexts: singleSignOnServicesEntry.setStatus('current')
singleSignOnServicesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 1), OctetString())
if mibBuilder.loadTexts: singleSignOnServicesIndex.setStatus('current')
singleSignOnServicesObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesObjectName.setStatus('current')
singleSignOnServicesArtifactMaxCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesArtifactMaxCacheSize.setStatus('current')
singleSignOnServicesIdentityProviderRedirectBindingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesIdentityProviderRedirectBindingEnabled.setStatus('current')
singleSignOnServicesForceAuthn = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesForceAuthn.setStatus('current')
singleSignOnServicesIdentityProviderPreferredBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesIdentityProviderPreferredBinding.setStatus('current')
singleSignOnServicesContactPersonGivenName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesContactPersonGivenName.setStatus('current')
singleSignOnServicesWantArtifactRequestsSigned = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesWantArtifactRequestsSigned.setStatus('current')
singleSignOnServicesContactPersonTelephoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesContactPersonTelephoneNumber.setStatus('current')
singleSignOnServicesPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesPassive.setStatus('current')
singleSignOnServicesTransportLayerSecurityKeyAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesTransportLayerSecurityKeyAlias.setStatus('current')
singleSignOnServicesSSOSigningKeyAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesSSOSigningKeyAlias.setStatus('current')
singleSignOnServicesLoginReturnQueryParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesLoginReturnQueryParameter.setStatus('current')
singleSignOnServicesAuthnRequestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesAuthnRequestTimeout.setStatus('current')
singleSignOnServicesPOSTOneUseCheckEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesPOSTOneUseCheckEnabled.setStatus('current')
singleSignOnServicesIdentityProviderArtifactBindingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesIdentityProviderArtifactBindingEnabled.setStatus('current')
singleSignOnServicesWantTransportLayerSecurityClientAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesWantTransportLayerSecurityClientAtn.setStatus('current')
singleSignOnServicesIdentityProviderEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesIdentityProviderEnabled.setStatus('current')
singleSignOnServicesLoginURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesLoginURL.setStatus('current')
singleSignOnServicesArtifactTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesArtifactTimeout.setStatus('current')
singleSignOnServicesContactPersonType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesContactPersonType.setStatus('current')
singleSignOnServicesOrganizationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesOrganizationName.setStatus('current')
singleSignOnServicesDefaultURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesDefaultURL.setStatus('current')
singleSignOnServicesWantBasicAuthClientAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesWantBasicAuthClientAuthentication.setStatus('current')
singleSignOnServicesType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesType.setStatus('current')
singleSignOnServicesContactPersonEmailAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesContactPersonEmailAddress.setStatus('current')
singleSignOnServicesRecipientCheckEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesRecipientCheckEnabled.setStatus('current')
singleSignOnServicesAuthnRequestMaxCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesAuthnRequestMaxCacheSize.setStatus('current')
singleSignOnServicesReplicatedCacheEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesReplicatedCacheEnabled.setStatus('current')
singleSignOnServicesServiceProviderEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesServiceProviderEnabled.setStatus('current')
singleSignOnServicesName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesName.setStatus('current')
singleSignOnServicesSignAuthnRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesSignAuthnRequests.setStatus('current')
singleSignOnServicesContactPersonCompany = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesContactPersonCompany.setStatus('current')
singleSignOnServicesBasicAuthUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesBasicAuthUsername.setStatus('current')
singleSignOnServicesServiceProviderPOSTBindingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesServiceProviderPOSTBindingEnabled.setStatus('current')
singleSignOnServicesEntityID = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesEntityID.setStatus('current')
singleSignOnServicesPublishedSiteURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesPublishedSiteURL.setStatus('current')
singleSignOnServicesOrganizationURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesOrganizationURL.setStatus('current')
singleSignOnServicesServiceProviderArtifactBindingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesServiceProviderArtifactBindingEnabled.setStatus('current')
singleSignOnServicesWantAssertionsSigned = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesWantAssertionsSigned.setStatus('current')
singleSignOnServicesWantAuthnRequestsSigned = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesWantAuthnRequestsSigned.setStatus('current')
singleSignOnServicesServiceProviderPreferredBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesServiceProviderPreferredBinding.setStatus('current')
singleSignOnServicesIdentityProviderPOSTBindingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesIdentityProviderPOSTBindingEnabled.setStatus('current')
singleSignOnServicesContactPersonSurName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1105, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesContactPersonSurName.setStatus('current')
singletonServiceAppScopedTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1110), )
if mibBuilder.loadTexts: singletonServiceAppScopedTable.setStatus('current')
singletonServiceAppScopedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1110, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "singletonServiceAppScopedIndex"))
if mibBuilder.loadTexts: singletonServiceAppScopedEntry.setStatus('current')
singletonServiceAppScopedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1110, 1, 1), OctetString())
if mibBuilder.loadTexts: singletonServiceAppScopedIndex.setStatus('current')
singletonServiceAppScopedObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1110, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceAppScopedObjectName.setStatus('current')
singletonServiceAppScopedType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1110, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceAppScopedType.setStatus('current')
singletonServiceAppScopedCompatibilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1110, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceAppScopedCompatibilityName.setStatus('current')
singletonServiceAppScopedMillisToSleepBetweenAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1110, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceAppScopedMillisToSleepBetweenAttempts.setStatus('current')
singletonServiceAppScopedModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1110, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceAppScopedModuleType.setStatus('current')
singletonServiceAppScopedName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1110, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceAppScopedName.setStatus('current')
singletonServiceAppScopedAdditionalMigrationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1110, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceAppScopedAdditionalMigrationAttempts.setStatus('current')
singletonServiceAppScopedClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1110, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceAppScopedClassName.setStatus('current')
singletonServiceTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1115), )
if mibBuilder.loadTexts: singletonServiceTable.setStatus('current')
singletonServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1115, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "singletonServiceIndex"))
if mibBuilder.loadTexts: singletonServiceEntry.setStatus('current')
singletonServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1115, 1, 1), OctetString())
if mibBuilder.loadTexts: singletonServiceIndex.setStatus('current')
singletonServiceObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1115, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceObjectName.setStatus('current')
singletonServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1115, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceType.setStatus('current')
singletonServiceMillisToSleepBetweenAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1115, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceMillisToSleepBetweenAttempts.setStatus('current')
singletonServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1115, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceName.setStatus('current')
singletonServiceAdditionalMigrationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1115, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceAdditionalMigrationAttempts.setStatus('current')
singletonServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1115, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singletonServiceClassName.setStatus('current')
unixMachineTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1125), )
if mibBuilder.loadTexts: unixMachineTable.setStatus('current')
unixMachineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1125, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "unixMachineIndex"))
if mibBuilder.loadTexts: unixMachineEntry.setStatus('current')
unixMachineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1125, 1, 1), OctetString())
if mibBuilder.loadTexts: unixMachineIndex.setStatus('current')
unixMachineObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1125, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unixMachineObjectName.setStatus('current')
unixMachineType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1125, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unixMachineType.setStatus('current')
unixMachinePostBindUID = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1125, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unixMachinePostBindUID.setStatus('current')
unixMachinePostBindUIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1125, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unixMachinePostBindUIDEnabled.setStatus('current')
unixMachinePostBindGID = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1125, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unixMachinePostBindGID.setStatus('current')
unixMachinePostBindGIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1125, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unixMachinePostBindGIDEnabled.setStatus('current')
unixMachineName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1125, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unixMachineName.setStatus('current')
unixMachineAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1125, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unixMachineAddresses.setStatus('current')
virtualDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1130), )
if mibBuilder.loadTexts: virtualDestinationTable.setStatus('current')
virtualDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1130, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "virtualDestinationIndex"))
if mibBuilder.loadTexts: virtualDestinationEntry.setStatus('current')
virtualDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1130, 1, 1), OctetString())
if mibBuilder.loadTexts: virtualDestinationIndex.setStatus('current')
virtualDestinationObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1130, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDestinationObjectName.setStatus('current')
virtualDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1130, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDestinationType.setStatus('current')
virtualDestinationDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1130, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDestinationDeploymentOrder.setStatus('current')
virtualDestinationJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1130, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDestinationJNDIName.setStatus('current')
virtualDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1130, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDestinationName.setStatus('current')
wldfDataRetirementByAgeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1135), )
if mibBuilder.loadTexts: wldfDataRetirementByAgeTable.setStatus('current')
wldfDataRetirementByAgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1135, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfDataRetirementByAgeIndex"))
if mibBuilder.loadTexts: wldfDataRetirementByAgeEntry.setStatus('current')
wldfDataRetirementByAgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1135, 1, 1), OctetString())
if mibBuilder.loadTexts: wldfDataRetirementByAgeIndex.setStatus('current')
wldfDataRetirementByAgeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1135, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementByAgeObjectName.setStatus('current')
wldfDataRetirementByAgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1135, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementByAgeType.setStatus('current')
wldfDataRetirementByAgeRetirementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1135, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementByAgeRetirementTime.setStatus('current')
wldfDataRetirementByAgeRetirementPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1135, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementByAgeRetirementPeriod.setStatus('current')
wldfDataRetirementByAgeRetirementAge = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1135, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementByAgeRetirementAge.setStatus('current')
wldfDataRetirementByAgeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1135, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementByAgeEnabled.setStatus('current')
wldfDataRetirementByAgeArchiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1135, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementByAgeArchiveName.setStatus('current')
wldfDataRetirementByAgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1135, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementByAgeName.setStatus('current')
wldfServerDiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1140), )
if mibBuilder.loadTexts: wldfServerDiagnosticTable.setStatus('current')
wldfServerDiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfServerDiagnosticIndex"))
if mibBuilder.loadTexts: wldfServerDiagnosticEntry.setStatus('current')
wldfServerDiagnosticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 1), OctetString())
if mibBuilder.loadTexts: wldfServerDiagnosticIndex.setStatus('current')
wldfServerDiagnosticObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticObjectName.setStatus('current')
wldfServerDiagnosticType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticType.setStatus('current')
wldfServerDiagnosticSynchronousEventPersistenceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticSynchronousEventPersistenceEnabled.setStatus('current')
wldfServerDiagnosticEventPersistenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticEventPersistenceInterval.setStatus('current')
wldfServerDiagnosticPreferredStoreSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticPreferredStoreSizeLimit.setStatus('current')
wldfServerDiagnosticImageTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticImageTimeout.setStatus('current')
wldfServerDiagnosticDiagnosticStoreDir = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticDiagnosticStoreDir.setStatus('current')
wldfServerDiagnosticDiagnosticDataArchiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticDiagnosticDataArchiveType.setStatus('current')
wldfServerDiagnosticDiagnosticContextEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticDiagnosticContextEnabled.setStatus('current')
wldfServerDiagnosticStoreSizeCheckPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticStoreSizeCheckPeriod.setStatus('current')
wldfServerDiagnosticEventsImageCaptureInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticEventsImageCaptureInterval.setStatus('current')
wldfServerDiagnosticImageDir = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticImageDir.setStatus('current')
wldfServerDiagnosticDataRetirementEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticDataRetirementEnabled.setStatus('current')
wldfServerDiagnosticName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticName.setStatus('current')
wldfServerDiagnosticWLDFDiagnosticVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticWLDFDiagnosticVolume.setStatus('current')
wldfServerDiagnosticDiagnosticStoreIoBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticDiagnosticStoreIoBufferSize.setStatus('current')
wldfServerDiagnosticDiagnosticStoreFileLockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticDiagnosticStoreFileLockingEnabled.setStatus('current')
wldfServerDiagnosticDiagnosticStoreMaxWindowBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticDiagnosticStoreMaxWindowBufferSize.setStatus('current')
wldfServerDiagnosticDiagnosticStoreBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticDiagnosticStoreBlockSize.setStatus('current')
wldfServerDiagnosticDiagnosticStoreMinWindowBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticDiagnosticStoreMinWindowBufferSize.setStatus('current')
wldfServerDiagnosticDiagnosticStoreMaxFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1140, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfServerDiagnosticDiagnosticStoreMaxFileSize.setStatus('current')
wldfSystemResourceTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1145), )
if mibBuilder.loadTexts: wldfSystemResourceTable.setStatus('current')
wldfSystemResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfSystemResourceIndex"))
if mibBuilder.loadTexts: wldfSystemResourceEntry.setStatus('current')
wldfSystemResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 1), OctetString())
if mibBuilder.loadTexts: wldfSystemResourceIndex.setStatus('current')
wldfSystemResourceObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfSystemResourceObjectName.setStatus('current')
wldfSystemResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfSystemResourceType.setStatus('current')
wldfSystemResourceCompatibilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfSystemResourceCompatibilityName.setStatus('current')
wldfSystemResourceDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfSystemResourceDeploymentOrder.setStatus('current')
wldfSystemResourceDeploymentPrincipalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfSystemResourceDeploymentPrincipalName.setStatus('current')
wldfSystemResourceDescriptorFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfSystemResourceDescriptorFileName.setStatus('current')
wldfSystemResourceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfSystemResourceDescription.setStatus('current')
wldfSystemResourceModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfSystemResourceModuleType.setStatus('current')
wldfSystemResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfSystemResourceName.setStatus('current')
wldfSystemResourceSourcePath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1145, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfSystemResourceSourcePath.setStatus('current')
wtcServerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1150), )
if mibBuilder.loadTexts: wtcServerTable.setStatus('current')
wtcServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1150, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wtcServerIndex"))
if mibBuilder.loadTexts: wtcServerEntry.setStatus('current')
wtcServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1150, 1, 1), OctetString())
if mibBuilder.loadTexts: wtcServerIndex.setStatus('current')
wtcServerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1150, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcServerObjectName.setStatus('current')
wtcServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1150, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcServerType.setStatus('current')
wtcServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1150, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcServerName.setStatus('current')
wtcServerDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1150, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcServerDeploymentOrder.setStatus('current')
webAppContainerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1155), )
if mibBuilder.loadTexts: webAppContainerTable.setStatus('current')
webAppContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webAppContainerIndex"))
if mibBuilder.loadTexts: webAppContainerEntry.setStatus('current')
webAppContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 1), OctetString())
if mibBuilder.loadTexts: webAppContainerIndex.setStatus('current')
webAppContainerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerObjectName.setStatus('current')
webAppContainerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerType.setStatus('current')
webAppContainerMaxPostSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerMaxPostSize.setStatus('current')
webAppContainerXPoweredByHeaderLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerXPoweredByHeaderLevel.setStatus('current')
webAppContainerServletAuthenticationFormURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerServletAuthenticationFormURL.setStatus('current')
webAppContainerReloginEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerReloginEnabled.setStatus('current')
webAppContainerWorkContextPropagationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerWorkContextPropagationEnabled.setStatus('current')
webAppContainerRtexprvalueJspParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerRtexprvalueJspParamName.setStatus('current')
webAppContainerFilterDispatchedRequestsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerFilterDispatchedRequestsEnabled.setStatus('current')
webAppContainerClientCertProxyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerClientCertProxyEnabled.setStatus('current')
webAppContainerOverloadProtectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerOverloadProtectionEnabled.setStatus('current')
webAppContainerOptimisticSerialization = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerOptimisticSerialization.setStatus('current')
webAppContainerRetainOriginalURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerRetainOriginalURL.setStatus('current')
webAppContainerWeblogicPluginEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerWeblogicPluginEnabled.setStatus('current')
webAppContainerHttpTraceSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerHttpTraceSupportEnabled.setStatus('current')
webAppContainerWAPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerWAPEnabled.setStatus('current')
webAppContainerJSPCompilerBackwardsCompatible = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerJSPCompilerBackwardsCompatible.setStatus('current')
webAppContainerAuthCookieEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerAuthCookieEnabled.setStatus('current')
webAppContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerName.setStatus('current')
webAppContainerAllowAllRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerAllowAllRoles.setStatus('current')
webAppContainerP3PHeaderValue = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerP3PHeaderValue.setStatus('current')
webAppContainerServletReloadCheckSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerServletReloadCheckSecs.setStatus('current')
webAppContainerMaxPostTimeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerMaxPostTimeSecs.setStatus('current')
webAppContainerMimeMappingFile = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerMimeMappingFile.setStatus('current')
webAppContainerShowArchivedRealPathEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerShowArchivedRealPathEnabled.setStatus('current')
webAppContainerPostTimeoutSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerPostTimeoutSecs.setStatus('current')
webAppContainerChangeSessionIDOnAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1155, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppContainerChangeSessionIDOnAuthentication.setStatus('current')
webServerLogTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1160), )
if mibBuilder.loadTexts: webServerLogTable.setStatus('current')
webServerLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServerLogIndex"))
if mibBuilder.loadTexts: webServerLogEntry.setStatus('current')
webServerLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 1), OctetString())
if mibBuilder.loadTexts: webServerLogIndex.setStatus('current')
webServerLogObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogObjectName.setStatus('current')
webServerLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogType.setStatus('current')
webServerLogLogTimeInGMT = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogLogTimeInGMT.setStatus('current')
webServerLogNumberOfFilesLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogNumberOfFilesLimited.setStatus('current')
webServerLogFileTimeSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogFileTimeSpan.setStatus('current')
webServerLogLogFileFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogLogFileFormat.setStatus('current')
webServerLogRotationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogRotationType.setStatus('current')
webServerLogFileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogFileCount.setStatus('current')
webServerLogLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogLoggingEnabled.setStatus('current')
webServerLogELFFields = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogELFFields.setStatus('current')
webServerLogFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogFileName.setStatus('current')
webServerLogFileMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogFileMinSize.setStatus('current')
webServerLogBufferSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogBufferSizeKB.setStatus('current')
webServerLogDateFormatPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogDateFormatPattern.setStatus('current')
webServerLogRotationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogRotationTime.setStatus('current')
webServerLogRotateLogOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogRotateLogOnStartup.setStatus('current')
webServerLogName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogName.setStatus('current')
webServerLogLogFileRotationDir = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1160, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServerLogLogFileRotationDir.setStatus('current')
webServiceTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1165), )
if mibBuilder.loadTexts: webServiceTable.setStatus('current')
webServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1165, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServiceIndex"))
if mibBuilder.loadTexts: webServiceEntry.setStatus('current')
webServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1165, 1, 1), OctetString())
if mibBuilder.loadTexts: webServiceIndex.setStatus('current')
webServiceObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1165, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceObjectName.setStatus('current')
webServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1165, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceType.setStatus('current')
webServiceMessagingQueueMDBRunAsPrincipalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1165, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceMessagingQueueMDBRunAsPrincipalName.setStatus('current')
webServiceMessagingQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1165, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceMessagingQueue.setStatus('current')
webServiceJmsConnectionFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1165, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceJmsConnectionFactory.setStatus('current')
webServiceCallbackQueueMDBRunAsPrincipalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1165, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceCallbackQueueMDBRunAsPrincipalName.setStatus('current')
webServiceCallbackQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1165, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceCallbackQueue.setStatus('current')
webServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1165, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceName.setStatus('current')
webserviceCredentialProviderTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1170), )
if mibBuilder.loadTexts: webserviceCredentialProviderTable.setStatus('current')
webserviceCredentialProviderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1170, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webserviceCredentialProviderIndex"))
if mibBuilder.loadTexts: webserviceCredentialProviderEntry.setStatus('current')
webserviceCredentialProviderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1170, 1, 1), OctetString())
if mibBuilder.loadTexts: webserviceCredentialProviderIndex.setStatus('current')
webserviceCredentialProviderObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1170, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceCredentialProviderObjectName.setStatus('current')
webserviceCredentialProviderType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1170, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceCredentialProviderType.setStatus('current')
webserviceCredentialProviderTokenType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1170, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceCredentialProviderTokenType.setStatus('current')
webserviceCredentialProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1170, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceCredentialProviderName.setStatus('current')
webserviceCredentialProviderClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1170, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceCredentialProviderClassName.setStatus('current')
webserviceSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1175), )
if mibBuilder.loadTexts: webserviceSecurityTable.setStatus('current')
webserviceSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1175, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webserviceSecurityIndex"))
if mibBuilder.loadTexts: webserviceSecurityEntry.setStatus('current')
webserviceSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1175, 1, 1), OctetString())
if mibBuilder.loadTexts: webserviceSecurityIndex.setStatus('current')
webserviceSecurityObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1175, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityObjectName.setStatus('current')
webserviceSecurityType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1175, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityType.setStatus('current')
webserviceSecurityDefaultCredentialProviderSTSURI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1175, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityDefaultCredentialProviderSTSURI.setStatus('current')
webserviceSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1175, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityName.setStatus('current')
webserviceSecurityPolicySelectionPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1175, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityPolicySelectionPreference.setStatus('current')
webserviceSecurityCompatibilityPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1175, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityCompatibilityPreference.setStatus('current')
webserviceSecurityCompatibilityOrderingPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1175, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityCompatibilityOrderingPreference.setStatus('current')
webserviceSecurityTokenTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1180), )
if mibBuilder.loadTexts: webserviceSecurityTokenTable.setStatus('current')
webserviceSecurityTokenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1180, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webserviceSecurityTokenIndex"))
if mibBuilder.loadTexts: webserviceSecurityTokenEntry.setStatus('current')
webserviceSecurityTokenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1180, 1, 1), OctetString())
if mibBuilder.loadTexts: webserviceSecurityTokenIndex.setStatus('current')
webserviceSecurityTokenObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1180, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityTokenObjectName.setStatus('current')
webserviceSecurityTokenType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1180, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityTokenType.setStatus('current')
webserviceSecurityTokenTokenType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1180, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityTokenTokenType.setStatus('current')
webserviceSecurityTokenName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1180, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityTokenName.setStatus('current')
webserviceSecurityTokenClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1180, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceSecurityTokenClassName.setStatus('current')
webserviceTimestampTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1185), )
if mibBuilder.loadTexts: webserviceTimestampTable.setStatus('current')
webserviceTimestampEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webserviceTimestampIndex"))
if mibBuilder.loadTexts: webserviceTimestampEntry.setStatus('current')
webserviceTimestampIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1, 1), OctetString())
if mibBuilder.loadTexts: webserviceTimestampIndex.setStatus('current')
webserviceTimestampObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTimestampObjectName.setStatus('current')
webserviceTimestampType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTimestampType.setStatus('current')
webserviceTimestampMaxProcessingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTimestampMaxProcessingDelay.setStatus('current')
webserviceTimestampClockSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTimestampClockSkew.setStatus('current')
webserviceTimestampClockSynchronized = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTimestampClockSynchronized.setStatus('current')
webserviceTimestampClockPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTimestampClockPrecision.setStatus('current')
webserviceTimestampValidityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTimestampValidityPeriod.setStatus('current')
webserviceTimestampLaxPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTimestampLaxPrecision.setStatus('current')
webserviceTimestampName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1185, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTimestampName.setStatus('current')
webserviceTokenHandlerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1190), )
if mibBuilder.loadTexts: webserviceTokenHandlerTable.setStatus('current')
webserviceTokenHandlerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1190, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webserviceTokenHandlerIndex"))
if mibBuilder.loadTexts: webserviceTokenHandlerEntry.setStatus('current')
webserviceTokenHandlerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1190, 1, 1), OctetString())
if mibBuilder.loadTexts: webserviceTokenHandlerIndex.setStatus('current')
webserviceTokenHandlerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1190, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTokenHandlerObjectName.setStatus('current')
webserviceTokenHandlerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1190, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTokenHandlerType.setStatus('current')
webserviceTokenHandlerHandlingOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1190, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTokenHandlerHandlingOrder.setStatus('current')
webserviceTokenHandlerTokenType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1190, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTokenHandlerTokenType.setStatus('current')
webserviceTokenHandlerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1190, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTokenHandlerName.setStatus('current')
webserviceTokenHandlerClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1190, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webserviceTokenHandlerClassName.setStatus('current')
workManagerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1195), )
if mibBuilder.loadTexts: workManagerTable.setStatus('current')
workManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1195, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "workManagerIndex"))
if mibBuilder.loadTexts: workManagerEntry.setStatus('current')
workManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1195, 1, 1), OctetString())
if mibBuilder.loadTexts: workManagerIndex.setStatus('current')
workManagerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1195, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerObjectName.setStatus('current')
workManagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1195, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerType.setStatus('current')
workManagerDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1195, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerDeploymentOrder.setStatus('current')
workManagerIgnoreStuckThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1195, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerIgnoreStuckThreads.setStatus('current')
workManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1195, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerName.setStatus('current')
workManagerShutdownTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1200), )
if mibBuilder.loadTexts: workManagerShutdownTriggerTable.setStatus('current')
workManagerShutdownTriggerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1200, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "workManagerShutdownTriggerIndex"))
if mibBuilder.loadTexts: workManagerShutdownTriggerEntry.setStatus('current')
workManagerShutdownTriggerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1200, 1, 1), OctetString())
if mibBuilder.loadTexts: workManagerShutdownTriggerIndex.setStatus('current')
workManagerShutdownTriggerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1200, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerShutdownTriggerObjectName.setStatus('current')
workManagerShutdownTriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1200, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerShutdownTriggerType.setStatus('current')
workManagerShutdownTriggerMaxStuckThreadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1200, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerShutdownTriggerMaxStuckThreadTime.setStatus('current')
workManagerShutdownTriggerStuckThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1200, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerShutdownTriggerStuckThreadCount.setStatus('current')
workManagerShutdownTriggerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1200, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workManagerShutdownTriggerName.setStatus('current')
appClientComponentRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1205), )
if mibBuilder.loadTexts: appClientComponentRuntimeTable.setStatus('current')
appClientComponentRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1205, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "appClientComponentRuntimeIndex"))
if mibBuilder.loadTexts: appClientComponentRuntimeEntry.setStatus('current')
appClientComponentRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1205, 1, 1), OctetString())
if mibBuilder.loadTexts: appClientComponentRuntimeIndex.setStatus('current')
appClientComponentRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1205, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appClientComponentRuntimeObjectName.setStatus('current')
appClientComponentRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1205, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appClientComponentRuntimeType.setStatus('current')
appClientComponentRuntimeModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1205, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appClientComponentRuntimeModuleId.setStatus('current')
appClientComponentRuntimeDeploymentState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1205, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appClientComponentRuntimeDeploymentState.setStatus('current')
appClientComponentRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1205, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appClientComponentRuntimeName.setStatus('current')
appRuntimeStateRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1210), )
if mibBuilder.loadTexts: appRuntimeStateRuntimeTable.setStatus('current')
appRuntimeStateRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1210, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "appRuntimeStateRuntimeIndex"))
if mibBuilder.loadTexts: appRuntimeStateRuntimeEntry.setStatus('current')
appRuntimeStateRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1210, 1, 1), OctetString())
if mibBuilder.loadTexts: appRuntimeStateRuntimeIndex.setStatus('current')
appRuntimeStateRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1210, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appRuntimeStateRuntimeObjectName.setStatus('current')
appRuntimeStateRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1210, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appRuntimeStateRuntimeType.setStatus('current')
appRuntimeStateRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1210, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appRuntimeStateRuntimeName.setStatus('current')
appRuntimeStateRuntimeApplicationIds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1210, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appRuntimeStateRuntimeApplicationIds.setStatus('current')
entityEJBRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1220), )
if mibBuilder.loadTexts: entityEJBRuntimeTable.setStatus('current')
entityEJBRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1220, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "entityEJBRuntimeIndex"))
if mibBuilder.loadTexts: entityEJBRuntimeEntry.setStatus('current')
entityEJBRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1220, 1, 1), OctetString())
if mibBuilder.loadTexts: entityEJBRuntimeIndex.setStatus('current')
entityEJBRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1220, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEJBRuntimeObjectName.setStatus('current')
entityEJBRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1220, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEJBRuntimeType.setStatus('current')
entityEJBRuntimeEJBName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1220, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEJBRuntimeEJBName.setStatus('current')
entityEJBRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1220, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entityEJBRuntimeName.setStatus('current')
jdbcDataSourceTaskRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1225), )
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeTable.setStatus('current')
jdbcDataSourceTaskRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jdbcDataSourceTaskRuntimeIndex"))
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeEntry.setStatus('current')
jdbcDataSourceTaskRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1, 1), OctetString())
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeIndex.setStatus('current')
jdbcDataSourceTaskRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeObjectName.setStatus('current')
jdbcDataSourceTaskRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeType.setStatus('current')
jdbcDataSourceTaskRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeStatus.setStatus('current')
jdbcDataSourceTaskRuntimeRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeRunning.setStatus('current')
jdbcDataSourceTaskRuntimeBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeBeginTime.setStatus('current')
jdbcDataSourceTaskRuntimeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeEndTime.setStatus('current')
jdbcDataSourceTaskRuntimeSystemTask = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeSystemTask.setStatus('current')
jdbcDataSourceTaskRuntimeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeDescription.setStatus('current')
jdbcDataSourceTaskRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1225, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDataSourceTaskRuntimeName.setStatus('current')
jdbcDriverRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1230), )
if mibBuilder.loadTexts: jdbcDriverRuntimeTable.setStatus('current')
jdbcDriverRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1230, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jdbcDriverRuntimeIndex"))
if mibBuilder.loadTexts: jdbcDriverRuntimeEntry.setStatus('current')
jdbcDriverRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1230, 1, 1), OctetString())
if mibBuilder.loadTexts: jdbcDriverRuntimeIndex.setStatus('current')
jdbcDriverRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1230, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDriverRuntimeObjectName.setStatus('current')
jdbcDriverRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1230, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDriverRuntimeType.setStatus('current')
jdbcDriverRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1230, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcDriverRuntimeName.setStatus('current')
jdbcServiceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1240), )
if mibBuilder.loadTexts: jdbcServiceRuntimeTable.setStatus('current')
jdbcServiceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1240, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jdbcServiceRuntimeIndex"))
if mibBuilder.loadTexts: jdbcServiceRuntimeEntry.setStatus('current')
jdbcServiceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1240, 1, 1), OctetString())
if mibBuilder.loadTexts: jdbcServiceRuntimeIndex.setStatus('current')
jdbcServiceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1240, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcServiceRuntimeObjectName.setStatus('current')
jdbcServiceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1240, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcServiceRuntimeType.setStatus('current')
jdbcServiceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1240, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcServiceRuntimeName.setStatus('current')
jmsRemoteEndpointRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1245), )
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeTable.setStatus('current')
jmsRemoteEndpointRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jmsRemoteEndpointRuntimeIndex"))
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeEntry.setStatus('current')
jmsRemoteEndpointRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 1), OctetString())
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeIndex.setStatus('current')
jmsRemoteEndpointRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeObjectName.setStatus('current')
jmsRemoteEndpointRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeType.setStatus('current')
jmsRemoteEndpointRuntimeUptimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeUptimeTotal.setStatus('current')
jmsRemoteEndpointRuntimeMessagesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeMessagesCurrentCount.setStatus('current')
jmsRemoteEndpointRuntimeDowntimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeDowntimeTotal.setStatus('current')
jmsRemoteEndpointRuntimeBytesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeBytesReceivedCount.setStatus('current')
jmsRemoteEndpointRuntimeEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeEndpointType.setStatus('current')
jmsRemoteEndpointRuntimeFailedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeFailedMessagesTotal.setStatus('current')
jmsRemoteEndpointRuntimeMessagesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeMessagesReceivedCount.setStatus('current')
jmsRemoteEndpointRuntimeURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeURL.setStatus('current')
jmsRemoteEndpointRuntimePausedForIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimePausedForIncoming.setStatus('current')
jmsRemoteEndpointRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeName.setStatus('current')
jmsRemoteEndpointRuntimeBytesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeBytesHighCount.setStatus('current')
jmsRemoteEndpointRuntimeUptimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeUptimeHigh.setStatus('current')
jmsRemoteEndpointRuntimeBytesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeBytesCurrentCount.setStatus('current')
jmsRemoteEndpointRuntimeMessagesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeMessagesPendingCount.setStatus('current')
jmsRemoteEndpointRuntimeDowntimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeDowntimeHigh.setStatus('current')
jmsRemoteEndpointRuntimeBytesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeBytesThresholdTime.setStatus('current')
jmsRemoteEndpointRuntimeBytesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeBytesPendingCount.setStatus('current')
jmsRemoteEndpointRuntimePausedForForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimePausedForForwarding.setStatus('current')
jmsRemoteEndpointRuntimeMessagesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeMessagesThresholdTime.setStatus('current')
jmsRemoteEndpointRuntimeMessagesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeMessagesHighCount.setStatus('current')
jmsRemoteEndpointRuntimeOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeOperationState.setStatus('current')
jmsRemoteEndpointRuntimeLastTimeFailedToConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeLastTimeFailedToConnect.setStatus('current')
jmsRemoteEndpointRuntimeLastTimeConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1245, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jmsRemoteEndpointRuntimeLastTimeConnected.setStatus('current')
jobRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1250), )
if mibBuilder.loadTexts: jobRuntimeTable.setStatus('current')
jobRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jobRuntimeIndex"))
if mibBuilder.loadTexts: jobRuntimeEntry.setStatus('current')
jobRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 1), OctetString())
if mibBuilder.loadTexts: jobRuntimeIndex.setStatus('current')
jobRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobRuntimeObjectName.setStatus('current')
jobRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobRuntimeType.setStatus('current')
jobRuntimeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobRuntimeTimeout.setStatus('current')
jobRuntimeLocalExecutionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobRuntimeLocalExecutionCount.setStatus('current')
jobRuntimeLastLocalExecutionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobRuntimeLastLocalExecutionTime.setStatus('current')
jobRuntimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobRuntimePeriod.setStatus('current')
jobRuntimeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobRuntimeDescription.setStatus('current')
jobRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobRuntimeName.setStatus('current')
jobRuntimeID = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobRuntimeID.setStatus('current')
jobRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1250, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobRuntimeState.setStatus('current')
jobSchedulerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1255), )
if mibBuilder.loadTexts: jobSchedulerRuntimeTable.setStatus('current')
jobSchedulerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1255, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jobSchedulerRuntimeIndex"))
if mibBuilder.loadTexts: jobSchedulerRuntimeEntry.setStatus('current')
jobSchedulerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1255, 1, 1), OctetString())
if mibBuilder.loadTexts: jobSchedulerRuntimeIndex.setStatus('current')
jobSchedulerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1255, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobSchedulerRuntimeObjectName.setStatus('current')
jobSchedulerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1255, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobSchedulerRuntimeType.setStatus('current')
jobSchedulerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1255, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobSchedulerRuntimeName.setStatus('current')
kodoDataCacheRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1260), )
if mibBuilder.loadTexts: kodoDataCacheRuntimeTable.setStatus('current')
kodoDataCacheRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1260, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "kodoDataCacheRuntimeIndex"))
if mibBuilder.loadTexts: kodoDataCacheRuntimeEntry.setStatus('current')
kodoDataCacheRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1260, 1, 1), OctetString())
if mibBuilder.loadTexts: kodoDataCacheRuntimeIndex.setStatus('current')
kodoDataCacheRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1260, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoDataCacheRuntimeObjectName.setStatus('current')
kodoDataCacheRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1260, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoDataCacheRuntimeType.setStatus('current')
kodoDataCacheRuntimeCacheHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1260, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoDataCacheRuntimeCacheHitCount.setStatus('current')
kodoDataCacheRuntimeTotalCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1260, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoDataCacheRuntimeTotalCurrentEntries.setStatus('current')
kodoDataCacheRuntimeCacheMissCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1260, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoDataCacheRuntimeCacheMissCount.setStatus('current')
kodoDataCacheRuntimeCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1260, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoDataCacheRuntimeCacheHitRatio.setStatus('current')
kodoDataCacheRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1260, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoDataCacheRuntimeName.setStatus('current')
kodoDataCacheRuntimeStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1260, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoDataCacheRuntimeStatistics.setStatus('current')
kodoPersistenceUnitRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1265), )
if mibBuilder.loadTexts: kodoPersistenceUnitRuntimeTable.setStatus('current')
kodoPersistenceUnitRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1265, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "kodoPersistenceUnitRuntimeIndex"))
if mibBuilder.loadTexts: kodoPersistenceUnitRuntimeEntry.setStatus('current')
kodoPersistenceUnitRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1265, 1, 1), OctetString())
if mibBuilder.loadTexts: kodoPersistenceUnitRuntimeIndex.setStatus('current')
kodoPersistenceUnitRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1265, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoPersistenceUnitRuntimeObjectName.setStatus('current')
kodoPersistenceUnitRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1265, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoPersistenceUnitRuntimeType.setStatus('current')
kodoPersistenceUnitRuntimePersistenceUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1265, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoPersistenceUnitRuntimePersistenceUnitName.setStatus('current')
kodoPersistenceUnitRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1265, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoPersistenceUnitRuntimeName.setStatus('current')
kodoQueryCacheRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1270), )
if mibBuilder.loadTexts: kodoQueryCacheRuntimeTable.setStatus('current')
kodoQueryCacheRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1270, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "kodoQueryCacheRuntimeIndex"))
if mibBuilder.loadTexts: kodoQueryCacheRuntimeEntry.setStatus('current')
kodoQueryCacheRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1270, 1, 1), OctetString())
if mibBuilder.loadTexts: kodoQueryCacheRuntimeIndex.setStatus('current')
kodoQueryCacheRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1270, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCacheRuntimeObjectName.setStatus('current')
kodoQueryCacheRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1270, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCacheRuntimeType.setStatus('current')
kodoQueryCacheRuntimeCacheHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1270, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCacheRuntimeCacheHitCount.setStatus('current')
kodoQueryCacheRuntimeTotalCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1270, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCacheRuntimeTotalCurrentEntries.setStatus('current')
kodoQueryCacheRuntimeCacheMissCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1270, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCacheRuntimeCacheMissCount.setStatus('current')
kodoQueryCacheRuntimeCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1270, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCacheRuntimeCacheHitRatio.setStatus('current')
kodoQueryCacheRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1270, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCacheRuntimeName.setStatus('current')
kodoQueryCacheRuntimeStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1270, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCacheRuntimeStatistics.setStatus('current')
kodoQueryCompilationCacheRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1275), )
if mibBuilder.loadTexts: kodoQueryCompilationCacheRuntimeTable.setStatus('current')
kodoQueryCompilationCacheRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1275, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "kodoQueryCompilationCacheRuntimeIndex"))
if mibBuilder.loadTexts: kodoQueryCompilationCacheRuntimeEntry.setStatus('current')
kodoQueryCompilationCacheRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1275, 1, 1), OctetString())
if mibBuilder.loadTexts: kodoQueryCompilationCacheRuntimeIndex.setStatus('current')
kodoQueryCompilationCacheRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1275, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCompilationCacheRuntimeObjectName.setStatus('current')
kodoQueryCompilationCacheRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1275, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCompilationCacheRuntimeType.setStatus('current')
kodoQueryCompilationCacheRuntimeTotalCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1275, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCompilationCacheRuntimeTotalCurrentEntries.setStatus('current')
kodoQueryCompilationCacheRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1275, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kodoQueryCompilationCacheRuntimeName.setStatus('current')
mailSessionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1280), )
if mibBuilder.loadTexts: mailSessionRuntimeTable.setStatus('current')
mailSessionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1280, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "mailSessionRuntimeIndex"))
if mibBuilder.loadTexts: mailSessionRuntimeEntry.setStatus('current')
mailSessionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1280, 1, 1), OctetString())
if mibBuilder.loadTexts: mailSessionRuntimeIndex.setStatus('current')
mailSessionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1280, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailSessionRuntimeObjectName.setStatus('current')
mailSessionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1280, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailSessionRuntimeType.setStatus('current')
mailSessionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1280, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailSessionRuntimeName.setStatus('current')
messageDrivenControlEJBRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1285), )
if mibBuilder.loadTexts: messageDrivenControlEJBRuntimeTable.setStatus('current')
messageDrivenControlEJBRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1285, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "messageDrivenControlEJBRuntimeIndex"))
if mibBuilder.loadTexts: messageDrivenControlEJBRuntimeEntry.setStatus('current')
messageDrivenControlEJBRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1285, 1, 1), OctetString())
if mibBuilder.loadTexts: messageDrivenControlEJBRuntimeIndex.setStatus('current')
messageDrivenControlEJBRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1285, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenControlEJBRuntimeObjectName.setStatus('current')
messageDrivenControlEJBRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1285, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenControlEJBRuntimeType.setStatus('current')
messageDrivenControlEJBRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1285, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: messageDrivenControlEJBRuntimeName.setStatus('current')
migratableServiceCoordinatorRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1290), )
if mibBuilder.loadTexts: migratableServiceCoordinatorRuntimeTable.setStatus('current')
migratableServiceCoordinatorRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1290, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "migratableServiceCoordinatorRuntimeIndex"))
if mibBuilder.loadTexts: migratableServiceCoordinatorRuntimeEntry.setStatus('current')
migratableServiceCoordinatorRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1290, 1, 1), OctetString())
if mibBuilder.loadTexts: migratableServiceCoordinatorRuntimeIndex.setStatus('current')
migratableServiceCoordinatorRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1290, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migratableServiceCoordinatorRuntimeObjectName.setStatus('current')
migratableServiceCoordinatorRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1290, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migratableServiceCoordinatorRuntimeType.setStatus('current')
migratableServiceCoordinatorRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1290, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migratableServiceCoordinatorRuntimeName.setStatus('current')
migrationDataRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1295), )
if mibBuilder.loadTexts: migrationDataRuntimeTable.setStatus('current')
migrationDataRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "migrationDataRuntimeIndex"))
if mibBuilder.loadTexts: migrationDataRuntimeEntry.setStatus('current')
migrationDataRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 1), OctetString())
if mibBuilder.loadTexts: migrationDataRuntimeIndex.setStatus('current')
migrationDataRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeObjectName.setStatus('current')
migrationDataRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeType.setStatus('current')
migrationDataRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeStatus.setStatus('current')
migrationDataRuntimeMigrationStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeMigrationStartTime.setStatus('current')
migrationDataRuntimeClusterMasterName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeClusterMasterName.setStatus('current')
migrationDataRuntimeServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeServerName.setStatus('current')
migrationDataRuntimeMachineMigratedFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeMachineMigratedFrom.setStatus('current')
migrationDataRuntimeMigrationEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeMigrationEndTime.setStatus('current')
migrationDataRuntimeClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeClusterName.setStatus('current')
migrationDataRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeName.setStatus('current')
migrationDataRuntimeMachineMigratedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeMachineMigratedTo.setStatus('current')
migrationDataRuntimeMachinesAttempted = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1295, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: migrationDataRuntimeMachinesAttempted.setStatus('current')
psAssemblyRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1305), )
if mibBuilder.loadTexts: psAssemblyRuntimeTable.setStatus('current')
psAssemblyRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1305, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "psAssemblyRuntimeIndex"))
if mibBuilder.loadTexts: psAssemblyRuntimeEntry.setStatus('current')
psAssemblyRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1305, 1, 1), OctetString())
if mibBuilder.loadTexts: psAssemblyRuntimeIndex.setStatus('current')
psAssemblyRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1305, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAssemblyRuntimeObjectName.setStatus('current')
psAssemblyRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1305, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAssemblyRuntimeType.setStatus('current')
psAssemblyRuntimeMapEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1305, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAssemblyRuntimeMapEntries.setStatus('current')
psAssemblyRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1305, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAssemblyRuntimeName.setStatus('current')
pageFlowActionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1310), )
if mibBuilder.loadTexts: pageFlowActionRuntimeTable.setStatus('current')
pageFlowActionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "pageFlowActionRuntimeIndex"))
if mibBuilder.loadTexts: pageFlowActionRuntimeEntry.setStatus('current')
pageFlowActionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 1), OctetString())
if mibBuilder.loadTexts: pageFlowActionRuntimeIndex.setStatus('current')
pageFlowActionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeObjectName.setStatus('current')
pageFlowActionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeType.setStatus('current')
pageFlowActionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeName.setStatus('current')
pageFlowActionRuntimeActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeActionName.setStatus('current')
pageFlowActionRuntimeSuccessDispatchTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeSuccessDispatchTimeTotal.setStatus('current')
pageFlowActionRuntimeSuccessDispatchTimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeSuccessDispatchTimeHigh.setStatus('current')
pageFlowActionRuntimeSuccessDispatchTimeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeSuccessDispatchTimeLow.setStatus('current')
pageFlowActionRuntimeSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeSuccessCount.setStatus('current')
pageFlowActionRuntimeHandledExceptionDispatchTimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeHandledExceptionDispatchTimeHigh.setStatus('current')
pageFlowActionRuntimeExceptionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeExceptionCount.setStatus('current')
pageFlowActionRuntimeHandledExceptionDispatchTimeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeHandledExceptionDispatchTimeLow.setStatus('current')
pageFlowActionRuntimeHandledExceptionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeHandledExceptionCount.setStatus('current')
pageFlowActionRuntimeHandledExceptionDispatchTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeHandledExceptionDispatchTimeAverage.setStatus('current')
pageFlowActionRuntimeHandledExceptionDispatchTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeHandledExceptionDispatchTimeTotal.setStatus('current')
pageFlowActionRuntimeSuccessDispatchTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1310, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowActionRuntimeSuccessDispatchTimeAverage.setStatus('current')
pageFlowRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1315), )
if mibBuilder.loadTexts: pageFlowRuntimeTable.setStatus('current')
pageFlowRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1315, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "pageFlowRuntimeIndex"))
if mibBuilder.loadTexts: pageFlowRuntimeEntry.setStatus('current')
pageFlowRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1315, 1, 1), OctetString())
if mibBuilder.loadTexts: pageFlowRuntimeIndex.setStatus('current')
pageFlowRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1315, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowRuntimeObjectName.setStatus('current')
pageFlowRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1315, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowRuntimeType.setStatus('current')
pageFlowRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1315, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowRuntimeName.setStatus('current')
pageFlowRuntimeCreateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1315, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowRuntimeCreateCount.setStatus('current')
pageFlowRuntimeLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1315, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowRuntimeLastResetTime.setStatus('current')
pageFlowRuntimeDestroyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1315, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowRuntimeDestroyCount.setStatus('current')
pageFlowRuntimeClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1315, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowRuntimeClassName.setStatus('current')
pageFlowsRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1320), )
if mibBuilder.loadTexts: pageFlowsRuntimeTable.setStatus('current')
pageFlowsRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1320, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "pageFlowsRuntimeIndex"))
if mibBuilder.loadTexts: pageFlowsRuntimeEntry.setStatus('current')
pageFlowsRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1320, 1, 1), OctetString())
if mibBuilder.loadTexts: pageFlowsRuntimeIndex.setStatus('current')
pageFlowsRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1320, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowsRuntimeObjectName.setStatus('current')
pageFlowsRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1320, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowsRuntimeType.setStatus('current')
pageFlowsRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1320, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowsRuntimeName.setStatus('current')
pageFlowsRuntimeServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1320, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowsRuntimeServerName.setStatus('current')
pageFlowsRuntimeHttpServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1320, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowsRuntimeHttpServerName.setStatus('current')
pageFlowsRuntimeContextPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1320, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowsRuntimeContextPath.setStatus('current')
pageFlowsRuntimeAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1320, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageFlowsRuntimeAppName.setStatus('current')
pathServiceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1325), )
if mibBuilder.loadTexts: pathServiceRuntimeTable.setStatus('current')
pathServiceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1325, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "pathServiceRuntimeIndex"))
if mibBuilder.loadTexts: pathServiceRuntimeEntry.setStatus('current')
pathServiceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1325, 1, 1), OctetString())
if mibBuilder.loadTexts: pathServiceRuntimeIndex.setStatus('current')
pathServiceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1325, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathServiceRuntimeObjectName.setStatus('current')
pathServiceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1325, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathServiceRuntimeType.setStatus('current')
pathServiceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1325, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathServiceRuntimeName.setStatus('current')
realmRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1330), )
if mibBuilder.loadTexts: realmRuntimeTable.setStatus('current')
realmRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1330, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "realmRuntimeIndex"))
if mibBuilder.loadTexts: realmRuntimeEntry.setStatus('current')
realmRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1330, 1, 1), OctetString())
if mibBuilder.loadTexts: realmRuntimeIndex.setStatus('current')
realmRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1330, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realmRuntimeObjectName.setStatus('current')
realmRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1330, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realmRuntimeType.setStatus('current')
realmRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1330, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realmRuntimeName.setStatus('current')
safRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1335), )
if mibBuilder.loadTexts: safRuntimeTable.setStatus('current')
safRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1335, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "safRuntimeIndex"))
if mibBuilder.loadTexts: safRuntimeEntry.setStatus('current')
safRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1335, 1, 1), OctetString())
if mibBuilder.loadTexts: safRuntimeIndex.setStatus('current')
safRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1335, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRuntimeObjectName.setStatus('current')
safRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1335, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRuntimeType.setStatus('current')
safRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1335, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safRuntimeName.setStatus('current')
wlssnmpAgentRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1340), )
if mibBuilder.loadTexts: wlssnmpAgentRuntimeTable.setStatus('current')
wlssnmpAgentRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wlssnmpAgentRuntimeIndex"))
if mibBuilder.loadTexts: wlssnmpAgentRuntimeEntry.setStatus('current')
wlssnmpAgentRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 1), OctetString())
if mibBuilder.loadTexts: wlssnmpAgentRuntimeIndex.setStatus('current')
wlssnmpAgentRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeObjectName.setStatus('current')
wlssnmpAgentRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeType.setStatus('current')
wlssnmpAgentRuntimeUDPListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeUDPListenPort.setStatus('current')
wlssnmpAgentRuntimeLogMessageTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeLogMessageTrapCount.setStatus('current')
wlssnmpAgentRuntimeFailedAuthorizationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeFailedAuthorizationCount.setStatus('current')
wlssnmpAgentRuntimeRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeRunning.setStatus('current')
wlssnmpAgentRuntimeStringMonitorTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeStringMonitorTrapCount.setStatus('current')
wlssnmpAgentRuntimeMonitorTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeMonitorTrapCount.setStatus('current')
wlssnmpAgentRuntimeMasterAgentXPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeMasterAgentXPort.setStatus('current')
wlssnmpAgentRuntimeGaugeMonitorTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeGaugeMonitorTrapCount.setStatus('current')
wlssnmpAgentRuntimeServerStopTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeServerStopTrapCount.setStatus('current')
wlssnmpAgentRuntimeAttributeChangeTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeAttributeChangeTrapCount.setStatus('current')
wlssnmpAgentRuntimeServerStartTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeServerStartTrapCount.setStatus('current')
wlssnmpAgentRuntimeFailedAuthenticationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeFailedAuthenticationCount.setStatus('current')
wlssnmpAgentRuntimeCounterMonitorTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeCounterMonitorTrapCount.setStatus('current')
wlssnmpAgentRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeName.setStatus('current')
wlssnmpAgentRuntimeFailedEncryptionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeFailedEncryptionCount.setStatus('current')
wlssnmpAgentRuntimeSNMPAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1340, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlssnmpAgentRuntimeSNMPAgentName.setStatus('current')
serverLifeCycleTaskRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1345), )
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeTable.setStatus('current')
serverLifeCycleTaskRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serverLifeCycleTaskRuntimeIndex"))
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeEntry.setStatus('current')
serverLifeCycleTaskRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 1), OctetString())
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeIndex.setStatus('current')
serverLifeCycleTaskRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeObjectName.setStatus('current')
serverLifeCycleTaskRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeType.setStatus('current')
serverLifeCycleTaskRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeStatus.setStatus('current')
serverLifeCycleTaskRuntimeRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeRunning.setStatus('current')
serverLifeCycleTaskRuntimeBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeBeginTime.setStatus('current')
serverLifeCycleTaskRuntimeOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeOperation.setStatus('current')
serverLifeCycleTaskRuntimeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeEndTime.setStatus('current')
serverLifeCycleTaskRuntimeServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeServerName.setStatus('current')
serverLifeCycleTaskRuntimeSystemTask = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeSystemTask.setStatus('current')
serverLifeCycleTaskRuntimeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeDescription.setStatus('current')
serverLifeCycleTaskRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1345, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLifeCycleTaskRuntimeName.setStatus('current')
serverMigrationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1350), )
if mibBuilder.loadTexts: serverMigrationRuntimeTable.setStatus('current')
serverMigrationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1350, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serverMigrationRuntimeIndex"))
if mibBuilder.loadTexts: serverMigrationRuntimeEntry.setStatus('current')
serverMigrationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1350, 1, 1), OctetString())
if mibBuilder.loadTexts: serverMigrationRuntimeIndex.setStatus('current')
serverMigrationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1350, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMigrationRuntimeObjectName.setStatus('current')
serverMigrationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1350, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMigrationRuntimeType.setStatus('current')
serverMigrationRuntimeClusterMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1350, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMigrationRuntimeClusterMaster.setStatus('current')
serverMigrationRuntimeClusterMasterName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1350, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMigrationRuntimeClusterMasterName.setStatus('current')
serverMigrationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1350, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMigrationRuntimeName.setStatus('current')
serviceMigrationDataRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1355), )
if mibBuilder.loadTexts: serviceMigrationDataRuntimeTable.setStatus('current')
serviceMigrationDataRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serviceMigrationDataRuntimeIndex"))
if mibBuilder.loadTexts: serviceMigrationDataRuntimeEntry.setStatus('current')
serviceMigrationDataRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 1), OctetString())
if mibBuilder.loadTexts: serviceMigrationDataRuntimeIndex.setStatus('current')
serviceMigrationDataRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeObjectName.setStatus('current')
serviceMigrationDataRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeType.setStatus('current')
serviceMigrationDataRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeStatus.setStatus('current')
serviceMigrationDataRuntimeMigrationStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeMigrationStartTime.setStatus('current')
serviceMigrationDataRuntimeMigratedFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeMigratedFrom.setStatus('current')
serviceMigrationDataRuntimeServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeServerName.setStatus('current')
serviceMigrationDataRuntimeMigratedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeMigratedTo.setStatus('current')
serviceMigrationDataRuntimeMigrationEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeMigrationEndTime.setStatus('current')
serviceMigrationDataRuntimeClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeClusterName.setStatus('current')
serviceMigrationDataRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeName.setStatus('current')
serviceMigrationDataRuntimeCoordinatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeCoordinatorName.setStatus('current')
serviceMigrationDataRuntimeDestinationsAttempted = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1355, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationDataRuntimeDestinationsAttempted.setStatus('current')
serviceMigrationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1360), )
if mibBuilder.loadTexts: serviceMigrationRuntimeTable.setStatus('current')
serviceMigrationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1360, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "serviceMigrationRuntimeIndex"))
if mibBuilder.loadTexts: serviceMigrationRuntimeEntry.setStatus('current')
serviceMigrationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1360, 1, 1), OctetString())
if mibBuilder.loadTexts: serviceMigrationRuntimeIndex.setStatus('current')
serviceMigrationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1360, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationRuntimeObjectName.setStatus('current')
serviceMigrationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1360, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationRuntimeType.setStatus('current')
serviceMigrationRuntimeClusterMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1360, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationRuntimeClusterMaster.setStatus('current')
serviceMigrationRuntimeClusterMasterName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1360, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationRuntimeClusterMasterName.setStatus('current')
serviceMigrationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1360, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMigrationRuntimeName.setStatus('current')
singleSignOnServicesRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1365), )
if mibBuilder.loadTexts: singleSignOnServicesRuntimeTable.setStatus('current')
singleSignOnServicesRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1365, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "singleSignOnServicesRuntimeIndex"))
if mibBuilder.loadTexts: singleSignOnServicesRuntimeEntry.setStatus('current')
singleSignOnServicesRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1365, 1, 1), OctetString())
if mibBuilder.loadTexts: singleSignOnServicesRuntimeIndex.setStatus('current')
singleSignOnServicesRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1365, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesRuntimeObjectName.setStatus('current')
singleSignOnServicesRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1365, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesRuntimeType.setStatus('current')
singleSignOnServicesRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1365, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleSignOnServicesRuntimeName.setStatus('current')
springRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1385), )
if mibBuilder.loadTexts: springRuntimeTable.setStatus('current')
springRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1385, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "springRuntimeIndex"))
if mibBuilder.loadTexts: springRuntimeEntry.setStatus('current')
springRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1385, 1, 1), OctetString())
if mibBuilder.loadTexts: springRuntimeIndex.setStatus('current')
springRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1385, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springRuntimeObjectName.setStatus('current')
springRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1385, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springRuntimeType.setStatus('current')
springRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1385, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springRuntimeName.setStatus('current')
springRuntimeSpringVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1385, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springRuntimeSpringVersion.setStatus('current')
springTransactionManagerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1390), )
if mibBuilder.loadTexts: springTransactionManagerRuntimeTable.setStatus('current')
springTransactionManagerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "springTransactionManagerRuntimeIndex"))
if mibBuilder.loadTexts: springTransactionManagerRuntimeEntry.setStatus('current')
springTransactionManagerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1, 1), OctetString())
if mibBuilder.loadTexts: springTransactionManagerRuntimeIndex.setStatus('current')
springTransactionManagerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionManagerRuntimeObjectName.setStatus('current')
springTransactionManagerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionManagerRuntimeType.setStatus('current')
springTransactionManagerRuntimeBeanId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionManagerRuntimeBeanId.setStatus('current')
springTransactionManagerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionManagerRuntimeName.setStatus('current')
springTransactionManagerRuntimeSuspendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionManagerRuntimeSuspendCount.setStatus('current')
springTransactionManagerRuntimeApplicationContextDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionManagerRuntimeApplicationContextDisplayName.setStatus('current')
springTransactionManagerRuntimeCommitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionManagerRuntimeCommitCount.setStatus('current')
springTransactionManagerRuntimeResumeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionManagerRuntimeResumeCount.setStatus('current')
springTransactionManagerRuntimeRollbackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1390, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionManagerRuntimeRollbackCount.setStatus('current')
statefulEJBRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1395), )
if mibBuilder.loadTexts: statefulEJBRuntimeTable.setStatus('current')
statefulEJBRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1395, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "statefulEJBRuntimeIndex"))
if mibBuilder.loadTexts: statefulEJBRuntimeEntry.setStatus('current')
statefulEJBRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1395, 1, 1), OctetString())
if mibBuilder.loadTexts: statefulEJBRuntimeIndex.setStatus('current')
statefulEJBRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1395, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statefulEJBRuntimeObjectName.setStatus('current')
statefulEJBRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1395, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statefulEJBRuntimeType.setStatus('current')
statefulEJBRuntimeEJBName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1395, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statefulEJBRuntimeEJBName.setStatus('current')
statefulEJBRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1395, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statefulEJBRuntimeName.setStatus('current')
statelessEJBRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1400), )
if mibBuilder.loadTexts: statelessEJBRuntimeTable.setStatus('current')
statelessEJBRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1400, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "statelessEJBRuntimeIndex"))
if mibBuilder.loadTexts: statelessEJBRuntimeEntry.setStatus('current')
statelessEJBRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1400, 1, 1), OctetString())
if mibBuilder.loadTexts: statelessEJBRuntimeIndex.setStatus('current')
statelessEJBRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1400, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statelessEJBRuntimeObjectName.setStatus('current')
statelessEJBRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1400, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statelessEJBRuntimeType.setStatus('current')
statelessEJBRuntimeEJBName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1400, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statelessEJBRuntimeEJBName.setStatus('current')
statelessEJBRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1400, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statelessEJBRuntimeName.setStatus('current')
timerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1410), )
if mibBuilder.loadTexts: timerRuntimeTable.setStatus('current')
timerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1410, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "timerRuntimeIndex"))
if mibBuilder.loadTexts: timerRuntimeEntry.setStatus('current')
timerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1410, 1, 1), OctetString())
if mibBuilder.loadTexts: timerRuntimeIndex.setStatus('current')
timerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1410, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerRuntimeObjectName.setStatus('current')
timerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1410, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerRuntimeType.setStatus('current')
timerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1410, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timerRuntimeName.setStatus('current')
unicastMessagingRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1420), )
if mibBuilder.loadTexts: unicastMessagingRuntimeTable.setStatus('current')
unicastMessagingRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1420, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "unicastMessagingRuntimeIndex"))
if mibBuilder.loadTexts: unicastMessagingRuntimeEntry.setStatus('current')
unicastMessagingRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1420, 1, 1), OctetString())
if mibBuilder.loadTexts: unicastMessagingRuntimeIndex.setStatus('current')
unicastMessagingRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1420, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastMessagingRuntimeObjectName.setStatus('current')
unicastMessagingRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1420, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastMessagingRuntimeType.setStatus('current')
unicastMessagingRuntimeRemoteGroupsDiscoveredCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1420, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastMessagingRuntimeRemoteGroupsDiscoveredCount.setStatus('current')
unicastMessagingRuntimeTotalGroupsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1420, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastMessagingRuntimeTotalGroupsCount.setStatus('current')
unicastMessagingRuntimeLocalGroupLeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1420, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastMessagingRuntimeLocalGroupLeaderName.setStatus('current')
unicastMessagingRuntimeGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1420, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastMessagingRuntimeGroups.setStatus('current')
unicastMessagingRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1420, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastMessagingRuntimeName.setStatus('current')
unicastMessagingRuntimeDiscoveredGroupLeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1420, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastMessagingRuntimeDiscoveredGroupLeaders.setStatus('current')
wldfAccessRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1425), )
if mibBuilder.loadTexts: wldfAccessRuntimeTable.setStatus('current')
wldfAccessRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1425, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfAccessRuntimeIndex"))
if mibBuilder.loadTexts: wldfAccessRuntimeEntry.setStatus('current')
wldfAccessRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1425, 1, 1), OctetString())
if mibBuilder.loadTexts: wldfAccessRuntimeIndex.setStatus('current')
wldfAccessRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1425, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfAccessRuntimeObjectName.setStatus('current')
wldfAccessRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1425, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfAccessRuntimeType.setStatus('current')
wldfAccessRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1425, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfAccessRuntimeName.setStatus('current')
wldfAccessRuntimeAvailableDiagnosticDataAccessorNames = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1425, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfAccessRuntimeAvailableDiagnosticDataAccessorNames.setStatus('current')
wldfDataAccessRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1430), )
if mibBuilder.loadTexts: wldfDataAccessRuntimeTable.setStatus('current')
wldfDataAccessRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1430, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfDataAccessRuntimeIndex"))
if mibBuilder.loadTexts: wldfDataAccessRuntimeEntry.setStatus('current')
wldfDataAccessRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1430, 1, 1), OctetString())
if mibBuilder.loadTexts: wldfDataAccessRuntimeIndex.setStatus('current')
wldfDataAccessRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1430, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataAccessRuntimeObjectName.setStatus('current')
wldfDataAccessRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1430, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataAccessRuntimeType.setStatus('current')
wldfDataAccessRuntimeEarliestAvailableTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1430, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataAccessRuntimeEarliestAvailableTimestamp.setStatus('current')
wldfDataAccessRuntimeLatestAvailableTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1430, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataAccessRuntimeLatestAvailableTimestamp.setStatus('current')
wldfDataAccessRuntimeTimestampAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1430, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataAccessRuntimeTimestampAvailable.setStatus('current')
wldfDataAccessRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1430, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataAccessRuntimeName.setStatus('current')
wldfDataAccessRuntimeLatestRecordId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1430, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataAccessRuntimeLatestRecordId.setStatus('current')
wldfDataRetirementTaskRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1435), )
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeTable.setStatus('current')
wldfDataRetirementTaskRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfDataRetirementTaskRuntimeIndex"))
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeEntry.setStatus('current')
wldfDataRetirementTaskRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 1), OctetString())
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeIndex.setStatus('current')
wldfDataRetirementTaskRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeObjectName.setStatus('current')
wldfDataRetirementTaskRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeType.setStatus('current')
wldfDataRetirementTaskRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeStatus.setStatus('current')
wldfDataRetirementTaskRuntimeRetiredRecordsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeRetiredRecordsCount.setStatus('current')
wldfDataRetirementTaskRuntimeRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeRunning.setStatus('current')
wldfDataRetirementTaskRuntimeBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeBeginTime.setStatus('current')
wldfDataRetirementTaskRuntimeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeEndTime.setStatus('current')
wldfDataRetirementTaskRuntimeSystemTask = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeSystemTask.setStatus('current')
wldfDataRetirementTaskRuntimeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeDescription.setStatus('current')
wldfDataRetirementTaskRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1435, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfDataRetirementTaskRuntimeName.setStatus('current')
wldfImageCreationTaskRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1440), )
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeTable.setStatus('current')
wldfImageCreationTaskRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfImageCreationTaskRuntimeIndex"))
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeEntry.setStatus('current')
wldfImageCreationTaskRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1, 1), OctetString())
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeIndex.setStatus('current')
wldfImageCreationTaskRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeObjectName.setStatus('current')
wldfImageCreationTaskRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeType.setStatus('current')
wldfImageCreationTaskRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeStatus.setStatus('current')
wldfImageCreationTaskRuntimeRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeRunning.setStatus('current')
wldfImageCreationTaskRuntimeBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeBeginTime.setStatus('current')
wldfImageCreationTaskRuntimeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeEndTime.setStatus('current')
wldfImageCreationTaskRuntimeSystemTask = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeSystemTask.setStatus('current')
wldfImageCreationTaskRuntimeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeDescription.setStatus('current')
wldfImageCreationTaskRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1440, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageCreationTaskRuntimeName.setStatus('current')
wldfImageRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1445), )
if mibBuilder.loadTexts: wldfImageRuntimeTable.setStatus('current')
wldfImageRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1445, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfImageRuntimeIndex"))
if mibBuilder.loadTexts: wldfImageRuntimeEntry.setStatus('current')
wldfImageRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1445, 1, 1), OctetString())
if mibBuilder.loadTexts: wldfImageRuntimeIndex.setStatus('current')
wldfImageRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1445, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageRuntimeObjectName.setStatus('current')
wldfImageRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1445, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageRuntimeType.setStatus('current')
wldfImageRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1445, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfImageRuntimeName.setStatus('current')
wldfRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1450), )
if mibBuilder.loadTexts: wldfRuntimeTable.setStatus('current')
wldfRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1450, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfRuntimeIndex"))
if mibBuilder.loadTexts: wldfRuntimeEntry.setStatus('current')
wldfRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1450, 1, 1), OctetString())
if mibBuilder.loadTexts: wldfRuntimeIndex.setStatus('current')
wldfRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1450, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfRuntimeObjectName.setStatus('current')
wldfRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1450, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfRuntimeType.setStatus('current')
wldfRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1450, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfRuntimeName.setStatus('current')
wldfWatchJMXNotificationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1455), )
if mibBuilder.loadTexts: wldfWatchJMXNotificationRuntimeTable.setStatus('current')
wldfWatchJMXNotificationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1455, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wldfWatchJMXNotificationRuntimeIndex"))
if mibBuilder.loadTexts: wldfWatchJMXNotificationRuntimeEntry.setStatus('current')
wldfWatchJMXNotificationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1455, 1, 1), OctetString())
if mibBuilder.loadTexts: wldfWatchJMXNotificationRuntimeIndex.setStatus('current')
wldfWatchJMXNotificationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1455, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchJMXNotificationRuntimeObjectName.setStatus('current')
wldfWatchJMXNotificationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1455, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchJMXNotificationRuntimeType.setStatus('current')
wldfWatchJMXNotificationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1455, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wldfWatchJMXNotificationRuntimeName.setStatus('current')
wsrmRemoteEndpointRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1460), )
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeTable.setStatus('current')
wsrmRemoteEndpointRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wsrmRemoteEndpointRuntimeIndex"))
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeEntry.setStatus('current')
wsrmRemoteEndpointRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 1), OctetString())
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeIndex.setStatus('current')
wsrmRemoteEndpointRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeObjectName.setStatus('current')
wsrmRemoteEndpointRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeType.setStatus('current')
wsrmRemoteEndpointRuntimeUptimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeUptimeTotal.setStatus('current')
wsrmRemoteEndpointRuntimeMessagesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeMessagesCurrentCount.setStatus('current')
wsrmRemoteEndpointRuntimeDowntimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeDowntimeTotal.setStatus('current')
wsrmRemoteEndpointRuntimeBytesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeBytesReceivedCount.setStatus('current')
wsrmRemoteEndpointRuntimeEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeEndpointType.setStatus('current')
wsrmRemoteEndpointRuntimeFailedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeFailedMessagesTotal.setStatus('current')
wsrmRemoteEndpointRuntimeMessagesReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeMessagesReceivedCount.setStatus('current')
wsrmRemoteEndpointRuntimeURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeURL.setStatus('current')
wsrmRemoteEndpointRuntimePausedForIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimePausedForIncoming.setStatus('current')
wsrmRemoteEndpointRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeName.setStatus('current')
wsrmRemoteEndpointRuntimeBytesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeBytesHighCount.setStatus('current')
wsrmRemoteEndpointRuntimeUptimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeUptimeHigh.setStatus('current')
wsrmRemoteEndpointRuntimeBytesCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeBytesCurrentCount.setStatus('current')
wsrmRemoteEndpointRuntimeMessagesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeMessagesPendingCount.setStatus('current')
wsrmRemoteEndpointRuntimeConversationsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeConversationsCurrentCount.setStatus('current')
wsrmRemoteEndpointRuntimeConversationsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeConversationsHighCount.setStatus('current')
wsrmRemoteEndpointRuntimeConversationsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeConversationsTotalCount.setStatus('current')
wsrmRemoteEndpointRuntimeDowntimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeDowntimeHigh.setStatus('current')
wsrmRemoteEndpointRuntimeBytesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeBytesThresholdTime.setStatus('current')
wsrmRemoteEndpointRuntimeBytesPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeBytesPendingCount.setStatus('current')
wsrmRemoteEndpointRuntimePausedForForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimePausedForForwarding.setStatus('current')
wsrmRemoteEndpointRuntimeMessagesThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeMessagesThresholdTime.setStatus('current')
wsrmRemoteEndpointRuntimeMessagesHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeMessagesHighCount.setStatus('current')
wsrmRemoteEndpointRuntimeOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeOperationState.setStatus('current')
wsrmRemoteEndpointRuntimeLastTimeFailedToConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeLastTimeFailedToConnect.setStatus('current')
wsrmRemoteEndpointRuntimeLastTimeConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1460, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsrmRemoteEndpointRuntimeLastTimeConnected.setStatus('current')
wtcRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1465), )
if mibBuilder.loadTexts: wtcRuntimeTable.setStatus('current')
wtcRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1465, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wtcRuntimeIndex"))
if mibBuilder.loadTexts: wtcRuntimeEntry.setStatus('current')
wtcRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1465, 1, 1), OctetString())
if mibBuilder.loadTexts: wtcRuntimeIndex.setStatus('current')
wtcRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1465, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRuntimeObjectName.setStatus('current')
wtcRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1465, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRuntimeType.setStatus('current')
wtcRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1465, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtcRuntimeName.setStatus('current')
wseeHandlerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1490), )
if mibBuilder.loadTexts: wseeHandlerRuntimeTable.setStatus('current')
wseeHandlerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1490, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeHandlerRuntimeIndex"))
if mibBuilder.loadTexts: wseeHandlerRuntimeEntry.setStatus('current')
wseeHandlerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1490, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeHandlerRuntimeIndex.setStatus('current')
wseeHandlerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1490, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeHandlerRuntimeObjectName.setStatus('current')
wseeHandlerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1490, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeHandlerRuntimeType.setStatus('current')
wseeHandlerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1490, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeHandlerRuntimeName.setStatus('current')
wseeOperationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1495), )
if mibBuilder.loadTexts: wseeOperationRuntimeTable.setStatus('current')
wseeOperationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeOperationRuntimeIndex"))
if mibBuilder.loadTexts: wseeOperationRuntimeEntry.setStatus('current')
wseeOperationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeOperationRuntimeIndex.setStatus('current')
wseeOperationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeObjectName.setStatus('current')
wseeOperationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeType.setStatus('current')
wseeOperationRuntimeResponseTimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeResponseTimeHigh.setStatus('current')
wseeOperationRuntimeDispatchTimeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeDispatchTimeLow.setStatus('current')
wseeOperationRuntimeDispatchTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeDispatchTimeTotal.setStatus('current')
wseeOperationRuntimeResponseTimeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeResponseTimeLow.setStatus('current')
wseeOperationRuntimeResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeResponseCount.setStatus('current')
wseeOperationRuntimeDispatchTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeDispatchTimeAverage.setStatus('current')
wseeOperationRuntimeResponseErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeResponseErrorCount.setStatus('current')
wseeOperationRuntimeExecutionTimeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeExecutionTimeLow.setStatus('current')
wseeOperationRuntimeOperationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeOperationName.setStatus('current')
wseeOperationRuntimeResponseTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeResponseTimeAverage.setStatus('current')
wseeOperationRuntimeExecutionTimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeExecutionTimeHigh.setStatus('current')
wseeOperationRuntimeExecutionTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeExecutionTimeTotal.setStatus('current')
wseeOperationRuntimeDispatchTimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeDispatchTimeHigh.setStatus('current')
wseeOperationRuntimeExecutionTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeExecutionTimeAverage.setStatus('current')
wseeOperationRuntimeInvocationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeInvocationCount.setStatus('current')
wseeOperationRuntimeResponseTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeResponseTimeTotal.setStatus('current')
wseeOperationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeName.setStatus('current')
wseeOperationRuntimePolicySubjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimePolicySubjectType.setStatus('current')
wseeOperationRuntimeLastResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeLastResponseTime.setStatus('current')
wseeOperationRuntimePolicySubjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimePolicySubjectName.setStatus('current')
wseeOperationRuntimeErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeErrorCount.setStatus('current')
wseeOperationRuntimeLastResponseErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeLastResponseErrorTime.setStatus('current')
wseeOperationRuntimePolicyAttachmentSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimePolicyAttachmentSupport.setStatus('current')
wseeOperationRuntimePolicySubjectResourcePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimePolicySubjectResourcePattern.setStatus('current')
wseeOperationRuntimeLastResponseError = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeLastResponseError.setStatus('current')
wseeOperationRuntimeLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeLastError.setStatus('current')
wseeOperationRuntimeLastInvocationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeLastInvocationTime.setStatus('current')
wseeOperationRuntimeLastErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1495, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationRuntimeLastErrorTime.setStatus('current')
wseePolicyRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1500), )
if mibBuilder.loadTexts: wseePolicyRuntimeTable.setStatus('current')
wseePolicyRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1500, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseePolicyRuntimeIndex"))
if mibBuilder.loadTexts: wseePolicyRuntimeEntry.setStatus('current')
wseePolicyRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1500, 1, 1), OctetString())
if mibBuilder.loadTexts: wseePolicyRuntimeIndex.setStatus('current')
wseePolicyRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1500, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePolicyRuntimeObjectName.setStatus('current')
wseePolicyRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1500, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePolicyRuntimeType.setStatus('current')
wseePolicyRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1500, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePolicyRuntimeName.setStatus('current')
wseePolicyRuntimeAvailablePolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1500, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePolicyRuntimeAvailablePolicies.setStatus('current')
wseePortRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1505), )
if mibBuilder.loadTexts: wseePortRuntimeTable.setStatus('current')
wseePortRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseePortRuntimeIndex"))
if mibBuilder.loadTexts: wseePortRuntimeEntry.setStatus('current')
wseePortRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 1), OctetString())
if mibBuilder.loadTexts: wseePortRuntimeIndex.setStatus('current')
wseePortRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimeObjectName.setStatus('current')
wseePortRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimeType.setStatus('current')
wseePortRuntimePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimePortName.setStatus('current')
wseePortRuntimeTransportProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimeTransportProtocolType.setStatus('current')
wseePortRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimeName.setStatus('current')
wseePortRuntimePolicySubjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimePolicySubjectType.setStatus('current')
wseePortRuntimePolicyAttachmentSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimePolicyAttachmentSupport.setStatus('current')
wseePortRuntimePolicySubjectResourcePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimePolicySubjectResourcePattern.setStatus('current')
wseePortRuntimeTotalFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimeTotalFaults.setStatus('current')
wseePortRuntimePolicyFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimePolicyFaults.setStatus('current')
wseePortRuntimePolicySubjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimePolicySubjectName.setStatus('current')
wseePortRuntimeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimeStartTime.setStatus('current')
wseePortRuntimeTotalSecurityFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1505, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortRuntimeTotalSecurityFaults.setStatus('current')
wseeRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1510), )
if mibBuilder.loadTexts: wseeRuntimeTable.setStatus('current')
wseeRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1510, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeRuntimeIndex"))
if mibBuilder.loadTexts: wseeRuntimeEntry.setStatus('current')
wseeRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1510, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeRuntimeIndex.setStatus('current')
wseeRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1510, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeRuntimeObjectName.setStatus('current')
wseeRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1510, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeRuntimeType.setStatus('current')
wseeRuntimeWebserviceDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1510, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeRuntimeWebserviceDescriptionName.setStatus('current')
wseeRuntimeImplementationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1510, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeRuntimeImplementationType.setStatus('current')
wseeRuntimeURI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1510, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeRuntimeURI.setStatus('current')
wseeRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1510, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeRuntimeName.setStatus('current')
wseeRuntimeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1510, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeRuntimeServiceName.setStatus('current')
channelRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1520), )
if mibBuilder.loadTexts: channelRuntimeTable.setStatus('current')
channelRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1520, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "channelRuntimeIndex"))
if mibBuilder.loadTexts: channelRuntimeEntry.setStatus('current')
channelRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1520, 1, 1), OctetString())
if mibBuilder.loadTexts: channelRuntimeIndex.setStatus('current')
channelRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1520, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelRuntimeObjectName.setStatus('current')
channelRuntimePublishedMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1520, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelRuntimePublishedMessageCount.setStatus('current')
channelRuntimeSubscriberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1520, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelRuntimeSubscriberCount.setStatus('current')
channelRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1520, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelRuntimeType.setStatus('current')
channelRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1520, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelRuntimeName.setStatus('current')
manAsyncReplicationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1525), )
if mibBuilder.loadTexts: manAsyncReplicationRuntimeTable.setStatus('current')
manAsyncReplicationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "manAsyncReplicationRuntimeIndex"))
if mibBuilder.loadTexts: manAsyncReplicationRuntimeEntry.setStatus('current')
manAsyncReplicationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 1), OctetString())
if mibBuilder.loadTexts: manAsyncReplicationRuntimeIndex.setStatus('current')
manAsyncReplicationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeObjectName.setStatus('current')
manAsyncReplicationRuntimeSecondaryServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeSecondaryServerName.setStatus('current')
manAsyncReplicationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeType.setStatus('current')
manAsyncReplicationRuntimePrimaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimePrimaryCount.setStatus('current')
manAsyncReplicationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeName.setStatus('current')
manAsyncReplicationRuntimeRemoteClusterReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeRemoteClusterReachable.setStatus('current')
manAsyncReplicationRuntimeSecondaryServerDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeSecondaryServerDetails.setStatus('current')
manAsyncReplicationRuntimeSecondaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeSecondaryCount.setStatus('current')
manAsyncReplicationRuntimeDetailedSecondariesDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeDetailedSecondariesDistribution.setStatus('current')
manAsyncReplicationRuntimeActiveServersInRemoteCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeActiveServersInRemoteCluster.setStatus('current')
manAsyncReplicationRuntimeLastSessionsFlushTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeLastSessionsFlushTime.setStatus('current')
manAsyncReplicationRuntimeSessionsWaitingForFlushCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1525, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manAsyncReplicationRuntimeSessionsWaitingForFlushCount.setStatus('current')
webPubSubRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1545), )
if mibBuilder.loadTexts: webPubSubRuntimeTable.setStatus('current')
webPubSubRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1545, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webPubSubRuntimeIndex"))
if mibBuilder.loadTexts: webPubSubRuntimeEntry.setStatus('current')
webPubSubRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1545, 1, 1), OctetString())
if mibBuilder.loadTexts: webPubSubRuntimeIndex.setStatus('current')
webPubSubRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1545, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webPubSubRuntimeObjectName.setStatus('current')
webPubSubRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1545, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webPubSubRuntimeType.setStatus('current')
webPubSubRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1545, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webPubSubRuntimeName.setStatus('current')
cacheAsyncListenersTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1550), )
if mibBuilder.loadTexts: cacheAsyncListenersTable.setStatus('current')
cacheAsyncListenersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1550, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "cacheAsyncListenersIndex"))
if mibBuilder.loadTexts: cacheAsyncListenersEntry.setStatus('current')
cacheAsyncListenersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1550, 1, 1), OctetString())
if mibBuilder.loadTexts: cacheAsyncListenersIndex.setStatus('current')
cacheAsyncListenersObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1550, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAsyncListenersObjectName.setStatus('current')
cacheAsyncListenersWorkManager = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1550, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAsyncListenersWorkManager.setStatus('current')
cacheAsyncListenersEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1550, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAsyncListenersEnabled.setStatus('current')
cacheAsyncListenersType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1550, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAsyncListenersType.setStatus('current')
cacheAsyncListenersName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1550, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAsyncListenersName.setStatus('current')
cacheExpirationTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1555), )
if mibBuilder.loadTexts: cacheExpirationTable.setStatus('current')
cacheExpirationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1555, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "cacheExpirationIndex"))
if mibBuilder.loadTexts: cacheExpirationEntry.setStatus('current')
cacheExpirationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1555, 1, 1), OctetString())
if mibBuilder.loadTexts: cacheExpirationIndex.setStatus('current')
cacheExpirationObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1555, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheExpirationObjectName.setStatus('current')
cacheExpirationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1555, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheExpirationType.setStatus('current')
cacheExpirationTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1555, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheExpirationTTL.setStatus('current')
cacheExpirationIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1555, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheExpirationIdleTime.setStatus('current')
cacheExpirationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1555, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheExpirationName.setStatus('current')
cacheLoaderTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1560), )
if mibBuilder.loadTexts: cacheLoaderTable.setStatus('current')
cacheLoaderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1560, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "cacheLoaderIndex"))
if mibBuilder.loadTexts: cacheLoaderEntry.setStatus('current')
cacheLoaderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1560, 1, 1), OctetString())
if mibBuilder.loadTexts: cacheLoaderIndex.setStatus('current')
cacheLoaderObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1560, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheLoaderObjectName.setStatus('current')
cacheLoaderCustomLoader = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1560, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheLoaderCustomLoader.setStatus('current')
cacheLoaderType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1560, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheLoaderType.setStatus('current')
cacheLoaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1560, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheLoaderName.setStatus('current')
cacheTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1565), )
if mibBuilder.loadTexts: cacheTable.setStatus('current')
cacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1565, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "cacheIndex"))
if mibBuilder.loadTexts: cacheEntry.setStatus('current')
cacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1565, 1, 1), OctetString())
if mibBuilder.loadTexts: cacheIndex.setStatus('current')
cacheObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1565, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheObjectName.setStatus('current')
cacheWorkManager = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1565, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheWorkManager.setStatus('current')
cacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1565, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheType.setStatus('current')
cacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1565, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheName.setStatus('current')
cacheEvictionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1565, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheEvictionPolicy.setStatus('current')
cacheMaxCacheUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1565, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMaxCacheUnits.setStatus('current')
cacheJNDIName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1565, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheJNDIName.setStatus('current')
cacheDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1565, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeploymentOrder.setStatus('current')
cacheStoreTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1570), )
if mibBuilder.loadTexts: cacheStoreTable.setStatus('current')
cacheStoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "cacheStoreIndex"))
if mibBuilder.loadTexts: cacheStoreEntry.setStatus('current')
cacheStoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 1), OctetString())
if mibBuilder.loadTexts: cacheStoreIndex.setStatus('current')
cacheStoreObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStoreObjectName.setStatus('current')
cacheStoreWorkManager = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStoreWorkManager.setStatus('current')
cacheStoreStoreBatchSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStoreStoreBatchSize.setStatus('current')
cacheStoreBufferMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStoreBufferMaxSize.setStatus('current')
cacheStoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStoreType.setStatus('current')
cacheStoreBufferWriteAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStoreBufferWriteAttempts.setStatus('current')
cacheStoreCustomStore = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStoreCustomStore.setStatus('current')
cacheStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStoreName.setStatus('current')
cacheStoreBufferWriteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStoreBufferWriteTimeout.setStatus('current')
cacheStoreWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1570, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStoreWritePolicy.setStatus('current')
cacheTransactionTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1575), )
if mibBuilder.loadTexts: cacheTransactionTable.setStatus('current')
cacheTransactionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1575, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "cacheTransactionIndex"))
if mibBuilder.loadTexts: cacheTransactionEntry.setStatus('current')
cacheTransactionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1575, 1, 1), OctetString())
if mibBuilder.loadTexts: cacheTransactionIndex.setStatus('current')
cacheTransactionObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1575, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTransactionObjectName.setStatus('current')
cacheTransactionType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1575, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTransactionType.setStatus('current')
cacheTransactionName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1575, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTransactionName.setStatus('current')
cacheTransactionIsolationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1575, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTransactionIsolationLevel.setStatus('current')
cacheTransactionConcurrency = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1575, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTransactionConcurrency.setStatus('current')
consoleRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1580), )
if mibBuilder.loadTexts: consoleRuntimeTable.setStatus('current')
consoleRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1580, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "consoleRuntimeIndex"))
if mibBuilder.loadTexts: consoleRuntimeEntry.setStatus('current')
consoleRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1580, 1, 1), OctetString())
if mibBuilder.loadTexts: consoleRuntimeIndex.setStatus('current')
consoleRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1580, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleRuntimeObjectName.setStatus('current')
consoleRuntimeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1580, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleRuntimeEnabled.setStatus('current')
consoleRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1580, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleRuntimeType.setStatus('current')
consoleRuntimeHomePageURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1580, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleRuntimeHomePageURL.setStatus('current')
consoleRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1580, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleRuntimeName.setStatus('current')
owsmSecurityPolicyRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1585), )
if mibBuilder.loadTexts: owsmSecurityPolicyRuntimeTable.setStatus('current')
owsmSecurityPolicyRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1585, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "owsmSecurityPolicyRuntimeIndex"))
if mibBuilder.loadTexts: owsmSecurityPolicyRuntimeEntry.setStatus('current')
owsmSecurityPolicyRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1585, 1, 1), OctetString())
if mibBuilder.loadTexts: owsmSecurityPolicyRuntimeIndex.setStatus('current')
owsmSecurityPolicyRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1585, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owsmSecurityPolicyRuntimeObjectName.setStatus('current')
owsmSecurityPolicyRuntimeAvailablePolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1585, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owsmSecurityPolicyRuntimeAvailablePolicies.setStatus('current')
owsmSecurityPolicyRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1585, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owsmSecurityPolicyRuntimeType.setStatus('current')
owsmSecurityPolicyRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1585, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owsmSecurityPolicyRuntimeName.setStatus('current')
springApplicationContextRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1590), )
if mibBuilder.loadTexts: springApplicationContextRuntimeTable.setStatus('current')
springApplicationContextRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "springApplicationContextRuntimeIndex"))
if mibBuilder.loadTexts: springApplicationContextRuntimeEntry.setStatus('current')
springApplicationContextRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 1), OctetString())
if mibBuilder.loadTexts: springApplicationContextRuntimeIndex.setStatus('current')
springApplicationContextRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeObjectName.setStatus('current')
springApplicationContextRuntimeGetBeansOfTypeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeGetBeansOfTypeCount.setStatus('current')
springApplicationContextRuntimeGetBeanNamesForTypeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeGetBeanNamesForTypeCount.setStatus('current')
springApplicationContextRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeType.setStatus('current')
springApplicationContextRuntimeGetBeanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeGetBeanCount.setStatus('current')
springApplicationContextRuntimeAverageSingletonBeanCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeAverageSingletonBeanCreationTime.setStatus('current')
springApplicationContextRuntimeAverageGetBeanNamesForTypeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeAverageGetBeanNamesForTypeTime.setStatus('current')
springApplicationContextRuntimeParentContext = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeParentContext.setStatus('current')
springApplicationContextRuntimeDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeDisplayName.setStatus('current')
springApplicationContextRuntimeStartupDate = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeStartupDate.setStatus('current')
springApplicationContextRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeName.setStatus('current')
springApplicationContextRuntimeAveragePrototypeBeanCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeAveragePrototypeBeanCreationTime.setStatus('current')
springApplicationContextRuntimePrototypeBeansCreatedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimePrototypeBeansCreatedCount.setStatus('current')
springApplicationContextRuntimeAverageGetBeansOfTypeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeAverageGetBeansOfTypeTime.setStatus('current')
springApplicationContextRuntimeSingletonBeansCreatedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeSingletonBeansCreatedCount.setStatus('current')
springApplicationContextRuntimeRefreshCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeRefreshCount.setStatus('current')
springApplicationContextRuntimeAverageGetBeanTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeAverageGetBeanTime.setStatus('current')
springApplicationContextRuntimeCustomScopeNames = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeCustomScopeNames.setStatus('current')
springApplicationContextRuntimeAverageRefreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1590, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springApplicationContextRuntimeAverageRefreshTime.setStatus('current')
springBeanDefinitionRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1595), )
if mibBuilder.loadTexts: springBeanDefinitionRuntimeTable.setStatus('current')
springBeanDefinitionRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "springBeanDefinitionRuntimeIndex"))
if mibBuilder.loadTexts: springBeanDefinitionRuntimeEntry.setStatus('current')
springBeanDefinitionRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 1), OctetString())
if mibBuilder.loadTexts: springBeanDefinitionRuntimeIndex.setStatus('current')
springBeanDefinitionRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeObjectName.setStatus('current')
springBeanDefinitionRuntimeAliases = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeAliases.setStatus('current')
springBeanDefinitionRuntimeParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeParentId.setStatus('current')
springBeanDefinitionRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeType.setStatus('current')
springBeanDefinitionRuntimeBeanId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeBeanId.setStatus('current')
springBeanDefinitionRuntimeApplicationContextDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeApplicationContextDisplayName.setStatus('current')
springBeanDefinitionRuntimeLazyInit = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeLazyInit.setStatus('current')
springBeanDefinitionRuntimeResourceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeResourceDescription.setStatus('current')
springBeanDefinitionRuntimeAutowireCandidate = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeAutowireCandidate.setStatus('current')
springBeanDefinitionRuntimeDependencies = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeDependencies.setStatus('current')
springBeanDefinitionRuntimeBeanClassname = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeBeanClassname.setStatus('current')
springBeanDefinitionRuntimeSingleton = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeSingleton.setStatus('current')
springBeanDefinitionRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeName.setStatus('current')
springBeanDefinitionRuntimeRole = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeRole.setStatus('current')
springBeanDefinitionRuntimeAbstract = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeAbstract.setStatus('current')
springBeanDefinitionRuntimeScope = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1595, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springBeanDefinitionRuntimeScope.setStatus('current')
springTransactionTemplateRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1600), )
if mibBuilder.loadTexts: springTransactionTemplateRuntimeTable.setStatus('current')
springTransactionTemplateRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1600, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "springTransactionTemplateRuntimeIndex"))
if mibBuilder.loadTexts: springTransactionTemplateRuntimeEntry.setStatus('current')
springTransactionTemplateRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1600, 1, 1), OctetString())
if mibBuilder.loadTexts: springTransactionTemplateRuntimeIndex.setStatus('current')
springTransactionTemplateRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1600, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionTemplateRuntimeObjectName.setStatus('current')
springTransactionTemplateRuntimeExecuteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1600, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionTemplateRuntimeExecuteCount.setStatus('current')
springTransactionTemplateRuntimeAverageExecuteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1600, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionTemplateRuntimeAverageExecuteTime.setStatus('current')
springTransactionTemplateRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1600, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionTemplateRuntimeType.setStatus('current')
springTransactionTemplateRuntimeBeanId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1600, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionTemplateRuntimeBeanId.setStatus('current')
springTransactionTemplateRuntimeApplicationContextDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1600, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionTemplateRuntimeApplicationContextDisplayName.setStatus('current')
springTransactionTemplateRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1600, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionTemplateRuntimeName.setStatus('current')
springTransactionTemplateRuntimeExecuteFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1600, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springTransactionTemplateRuntimeExecuteFailedCount.setStatus('current')
springViewResolverRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1605), )
if mibBuilder.loadTexts: springViewResolverRuntimeTable.setStatus('current')
springViewResolverRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1605, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "springViewResolverRuntimeIndex"))
if mibBuilder.loadTexts: springViewResolverRuntimeEntry.setStatus('current')
springViewResolverRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1605, 1, 1), OctetString())
if mibBuilder.loadTexts: springViewResolverRuntimeIndex.setStatus('current')
springViewResolverRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1605, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewResolverRuntimeObjectName.setStatus('current')
springViewResolverRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1605, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewResolverRuntimeType.setStatus('current')
springViewResolverRuntimeBeanId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1605, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewResolverRuntimeBeanId.setStatus('current')
springViewResolverRuntimeApplicationContextDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1605, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewResolverRuntimeApplicationContextDisplayName.setStatus('current')
springViewResolverRuntimeResolveViewNameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1605, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewResolverRuntimeResolveViewNameCount.setStatus('current')
springViewResolverRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1605, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewResolverRuntimeName.setStatus('current')
springViewResolverRuntimeAverageResolveViewNameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1605, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewResolverRuntimeAverageResolveViewNameTime.setStatus('current')
springViewResolverRuntimeResolveViewNameFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1605, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewResolverRuntimeResolveViewNameFailedCount.setStatus('current')
springViewRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1610), )
if mibBuilder.loadTexts: springViewRuntimeTable.setStatus('current')
springViewRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1610, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "springViewRuntimeIndex"))
if mibBuilder.loadTexts: springViewRuntimeEntry.setStatus('current')
springViewRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1610, 1, 1), OctetString())
if mibBuilder.loadTexts: springViewRuntimeIndex.setStatus('current')
springViewRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1610, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewRuntimeObjectName.setStatus('current')
springViewRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1610, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewRuntimeType.setStatus('current')
springViewRuntimeBeanId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1610, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewRuntimeBeanId.setStatus('current')
springViewRuntimeApplicationContextDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1610, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewRuntimeApplicationContextDisplayName.setStatus('current')
springViewRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1610, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewRuntimeName.setStatus('current')
springViewRuntimeRenderFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1610, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewRuntimeRenderFailedCount.setStatus('current')
springViewRuntimeRenderCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1610, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewRuntimeRenderCount.setStatus('current')
springViewRuntimeAverageRenderTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1610, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: springViewRuntimeAverageRenderTime.setStatus('current')
coherenceClusterSystemResourceTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1615), )
if mibBuilder.loadTexts: coherenceClusterSystemResourceTable.setStatus('current')
coherenceClusterSystemResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "coherenceClusterSystemResourceIndex"))
if mibBuilder.loadTexts: coherenceClusterSystemResourceEntry.setStatus('current')
coherenceClusterSystemResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 1), OctetString())
if mibBuilder.loadTexts: coherenceClusterSystemResourceIndex.setStatus('current')
coherenceClusterSystemResourceObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceObjectName.setStatus('current')
coherenceClusterSystemResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceType.setStatus('current')
coherenceClusterSystemResourceCompatibilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceCompatibilityName.setStatus('current')
coherenceClusterSystemResourceModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceModuleType.setStatus('current')
coherenceClusterSystemResourceSourcePath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceSourcePath.setStatus('current')
coherenceClusterSystemResourceDescriptorFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceDescriptorFileName.setStatus('current')
coherenceClusterSystemResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceName.setStatus('current')
coherenceClusterSystemResourceCustomClusterConfigurationFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceCustomClusterConfigurationFileName.setStatus('current')
coherenceClusterSystemResourceDeploymentPrincipalName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceDeploymentPrincipalName.setStatus('current')
coherenceClusterSystemResourceUsingCustomClusterConfigurationFile = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceUsingCustomClusterConfigurationFile.setStatus('current')
coherenceClusterSystemResourceDeploymentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1615, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterSystemResourceDeploymentOrder.setStatus('current')
jPATable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1620), )
if mibBuilder.loadTexts: jPATable.setStatus('current')
jPAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1620, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jPAIndex"))
if mibBuilder.loadTexts: jPAEntry.setStatus('current')
jPAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1620, 1, 1), OctetString())
if mibBuilder.loadTexts: jPAIndex.setStatus('current')
jPAObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1620, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jPAObjectName.setStatus('current')
jPAType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1620, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jPAType.setStatus('current')
jPADefaultJPAProvider = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1620, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jPADefaultJPAProvider.setStatus('current')
jPAName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1620, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jPAName.setStatus('current')
webServiceBufferingTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1625), )
if mibBuilder.loadTexts: webServiceBufferingTable.setStatus('current')
webServiceBufferingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1625, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServiceBufferingIndex"))
if mibBuilder.loadTexts: webServiceBufferingEntry.setStatus('current')
webServiceBufferingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1625, 1, 1), OctetString())
if mibBuilder.loadTexts: webServiceBufferingIndex.setStatus('current')
webServiceBufferingObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1625, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceBufferingObjectName.setStatus('current')
webServiceBufferingType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1625, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceBufferingType.setStatus('current')
webServiceBufferingRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1625, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceBufferingRetryDelay.setStatus('current')
webServiceBufferingName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1625, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceBufferingName.setStatus('current')
webServiceBufferingRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1625, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceBufferingRetryCount.setStatus('current')
webServiceLogicalStoreTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1630), )
if mibBuilder.loadTexts: webServiceLogicalStoreTable.setStatus('current')
webServiceLogicalStoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServiceLogicalStoreIndex"))
if mibBuilder.loadTexts: webServiceLogicalStoreEntry.setStatus('current')
webServiceLogicalStoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1, 1), OctetString())
if mibBuilder.loadTexts: webServiceLogicalStoreIndex.setStatus('current')
webServiceLogicalStoreObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceLogicalStoreObjectName.setStatus('current')
webServiceLogicalStoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceLogicalStoreType.setStatus('current')
webServiceLogicalStoreCleanerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceLogicalStoreCleanerInterval.setStatus('current')
webServiceLogicalStorePhysicalStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceLogicalStorePhysicalStoreName.setStatus('current')
webServiceLogicalStoreResponseBufferingQueueJndiName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceLogicalStoreResponseBufferingQueueJndiName.setStatus('current')
webServiceLogicalStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceLogicalStoreName.setStatus('current')
webServiceLogicalStoreDefaultMaximumObjectLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceLogicalStoreDefaultMaximumObjectLifetime.setStatus('current')
webServiceLogicalStoreRequestBufferingQueueJndiName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceLogicalStoreRequestBufferingQueueJndiName.setStatus('current')
webServiceLogicalStorePersistenceStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1630, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceLogicalStorePersistenceStrategy.setStatus('current')
webServicePersistenceTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1635), )
if mibBuilder.loadTexts: webServicePersistenceTable.setStatus('current')
webServicePersistenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1635, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServicePersistenceIndex"))
if mibBuilder.loadTexts: webServicePersistenceEntry.setStatus('current')
webServicePersistenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1635, 1, 1), OctetString())
if mibBuilder.loadTexts: webServicePersistenceIndex.setStatus('current')
webServicePersistenceObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1635, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServicePersistenceObjectName.setStatus('current')
webServicePersistenceType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1635, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServicePersistenceType.setStatus('current')
webServicePersistenceDefaultLogicalStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1635, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServicePersistenceDefaultLogicalStoreName.setStatus('current')
webServicePersistenceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1635, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServicePersistenceName.setStatus('current')
webServicePhysicalStoreTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1640), )
if mibBuilder.loadTexts: webServicePhysicalStoreTable.setStatus('current')
webServicePhysicalStoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1640, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServicePhysicalStoreIndex"))
if mibBuilder.loadTexts: webServicePhysicalStoreEntry.setStatus('current')
webServicePhysicalStoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1640, 1, 1), OctetString())
if mibBuilder.loadTexts: webServicePhysicalStoreIndex.setStatus('current')
webServicePhysicalStoreObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1640, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServicePhysicalStoreObjectName.setStatus('current')
webServicePhysicalStoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1640, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServicePhysicalStoreType.setStatus('current')
webServicePhysicalStoreLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1640, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServicePhysicalStoreLocation.setStatus('current')
webServicePhysicalStoreName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1640, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServicePhysicalStoreName.setStatus('current')
webServicePhysicalStoreStoreType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1640, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServicePhysicalStoreStoreType.setStatus('current')
webServicePhysicalStoreSynchronousWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1640, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServicePhysicalStoreSynchronousWritePolicy.setStatus('current')
webServiceReliabilityTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1645), )
if mibBuilder.loadTexts: webServiceReliabilityTable.setStatus('current')
webServiceReliabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServiceReliabilityIndex"))
if mibBuilder.loadTexts: webServiceReliabilityEntry.setStatus('current')
webServiceReliabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 1), OctetString())
if mibBuilder.loadTexts: webServiceReliabilityIndex.setStatus('current')
webServiceReliabilityObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceReliabilityObjectName.setStatus('current')
webServiceReliabilityBaseRetransmissionInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceReliabilityBaseRetransmissionInterval.setStatus('current')
webServiceReliabilityInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceReliabilityInactivityTimeout.setStatus('current')
webServiceReliabilityAcknowledgementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceReliabilityAcknowledgementInterval.setStatus('current')
webServiceReliabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceReliabilityType.setStatus('current')
webServiceReliabilityNonBufferedDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceReliabilityNonBufferedDestination.setStatus('current')
webServiceReliabilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceReliabilityName.setStatus('current')
webServiceReliabilityNonBufferedSource = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceReliabilityNonBufferedSource.setStatus('current')
webServiceReliabilitySequenceExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceReliabilitySequenceExpiration.setStatus('current')
webServiceReliabilityRetransmissionExponentialBackoff = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1645, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceReliabilityRetransmissionExponentialBackoff.setStatus('current')
webServiceRequestBufferingQueueTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1650), )
if mibBuilder.loadTexts: webServiceRequestBufferingQueueTable.setStatus('current')
webServiceRequestBufferingQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1650, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServiceRequestBufferingQueueIndex"))
if mibBuilder.loadTexts: webServiceRequestBufferingQueueEntry.setStatus('current')
webServiceRequestBufferingQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1650, 1, 1), OctetString())
if mibBuilder.loadTexts: webServiceRequestBufferingQueueIndex.setStatus('current')
webServiceRequestBufferingQueueObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1650, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRequestBufferingQueueObjectName.setStatus('current')
webServiceRequestBufferingQueueEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1650, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRequestBufferingQueueEnabled.setStatus('current')
webServiceRequestBufferingQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1650, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRequestBufferingQueueType.setStatus('current')
webServiceRequestBufferingQueueTransactionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1650, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRequestBufferingQueueTransactionEnabled.setStatus('current')
webServiceRequestBufferingQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1650, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRequestBufferingQueueName.setStatus('current')
webServiceRequestBufferingQueueConnectionFactoryJndiName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1650, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRequestBufferingQueueConnectionFactoryJndiName.setStatus('current')
webServiceResponseBufferingQueueTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1655), )
if mibBuilder.loadTexts: webServiceResponseBufferingQueueTable.setStatus('current')
webServiceResponseBufferingQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1655, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServiceResponseBufferingQueueIndex"))
if mibBuilder.loadTexts: webServiceResponseBufferingQueueEntry.setStatus('current')
webServiceResponseBufferingQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1655, 1, 1), OctetString())
if mibBuilder.loadTexts: webServiceResponseBufferingQueueIndex.setStatus('current')
webServiceResponseBufferingQueueObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1655, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceResponseBufferingQueueObjectName.setStatus('current')
webServiceResponseBufferingQueueEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1655, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceResponseBufferingQueueEnabled.setStatus('current')
webServiceResponseBufferingQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1655, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceResponseBufferingQueueType.setStatus('current')
webServiceResponseBufferingQueueTransactionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1655, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceResponseBufferingQueueTransactionEnabled.setStatus('current')
webServiceResponseBufferingQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1655, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceResponseBufferingQueueName.setStatus('current')
webServiceResponseBufferingQueueConnectionFactoryJndiName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1655, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceResponseBufferingQueueConnectionFactoryJndiName.setStatus('current')
appDeploymentRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1660), )
if mibBuilder.loadTexts: appDeploymentRuntimeTable.setStatus('current')
appDeploymentRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1660, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "appDeploymentRuntimeIndex"))
if mibBuilder.loadTexts: appDeploymentRuntimeEntry.setStatus('current')
appDeploymentRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1660, 1, 1), OctetString())
if mibBuilder.loadTexts: appDeploymentRuntimeIndex.setStatus('current')
appDeploymentRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1660, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appDeploymentRuntimeObjectName.setStatus('current')
appDeploymentRuntimeApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1660, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appDeploymentRuntimeApplicationName.setStatus('current')
appDeploymentRuntimeApplicationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1660, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appDeploymentRuntimeApplicationVersion.setStatus('current')
appDeploymentRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1660, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appDeploymentRuntimeType.setStatus('current')
appDeploymentRuntimeModules = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1660, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appDeploymentRuntimeModules.setStatus('current')
appDeploymentRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1660, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appDeploymentRuntimeName.setStatus('current')
coherenceClusterRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1665), )
if mibBuilder.loadTexts: coherenceClusterRuntimeTable.setStatus('current')
coherenceClusterRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1665, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "coherenceClusterRuntimeIndex"))
if mibBuilder.loadTexts: coherenceClusterRuntimeEntry.setStatus('current')
coherenceClusterRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1665, 1, 1), OctetString())
if mibBuilder.loadTexts: coherenceClusterRuntimeIndex.setStatus('current')
coherenceClusterRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1665, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterRuntimeObjectName.setStatus('current')
coherenceClusterRuntimeClusterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1665, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterRuntimeClusterSize.setStatus('current')
coherenceClusterRuntimeLicenseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1665, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterRuntimeLicenseMode.setStatus('current')
coherenceClusterRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1665, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterRuntimeType.setStatus('current')
coherenceClusterRuntimeMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1665, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterRuntimeMembers.setStatus('current')
coherenceClusterRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1665, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterRuntimeName.setStatus('current')
coherenceClusterRuntimeClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1665, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterRuntimeClusterName.setStatus('current')
coherenceClusterRuntimeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1665, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceClusterRuntimeVersion.setStatus('current')
deploymentManagerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1670), )
if mibBuilder.loadTexts: deploymentManagerTable.setStatus('current')
deploymentManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1670, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "deploymentManagerIndex"))
if mibBuilder.loadTexts: deploymentManagerEntry.setStatus('current')
deploymentManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1670, 1, 1), OctetString())
if mibBuilder.loadTexts: deploymentManagerIndex.setStatus('current')
deploymentManagerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1670, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentManagerObjectName.setStatus('current')
deploymentManagerMaximumDeploymentProgressObjectsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1670, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentManagerMaximumDeploymentProgressObjectsCount.setStatus('current')
deploymentManagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1670, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentManagerType.setStatus('current')
deploymentManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1670, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentManagerName.setStatus('current')
deploymentProgressObjectTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1675), )
if mibBuilder.loadTexts: deploymentProgressObjectTable.setStatus('current')
deploymentProgressObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "deploymentProgressObjectIndex"))
if mibBuilder.loadTexts: deploymentProgressObjectEntry.setStatus('current')
deploymentProgressObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 1), OctetString())
if mibBuilder.loadTexts: deploymentProgressObjectIndex.setStatus('current')
deploymentProgressObjectObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectObjectName.setStatus('current')
deploymentProgressObjectApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectApplicationName.setStatus('current')
deploymentProgressObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectType.setStatus('current')
deploymentProgressObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectName.setStatus('current')
deploymentProgressObjectMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectMessages.setStatus('current')
deploymentProgressObjectState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectState.setStatus('current')
deploymentProgressObjectBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectBeginTime.setStatus('current')
deploymentProgressObjectFailedTargets = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectFailedTargets.setStatus('current')
deploymentProgressObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectId.setStatus('current')
deploymentProgressObjectEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectEndTime.setStatus('current')
deploymentProgressObjectOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectOperationType.setStatus('current')
deploymentProgressObjectTargets = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1675, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deploymentProgressObjectTargets.setStatus('current')
webServiceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1680), )
if mibBuilder.loadTexts: webServiceRuntimeTable.setStatus('current')
webServiceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "webServiceRuntimeIndex"))
if mibBuilder.loadTexts: webServiceRuntimeEntry.setStatus('current')
webServiceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 1), OctetString())
if mibBuilder.loadTexts: webServiceRuntimeIndex.setStatus('current')
webServiceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeObjectName.setStatus('current')
webServiceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeType.setStatus('current')
webServiceRuntimeHomePageURL = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeHomePageURL.setStatus('current')
webServiceRuntimeLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeLastResetTime.setStatus('current')
webServiceRuntimeWSDLHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeWSDLHitCount.setStatus('current')
webServiceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeName.setStatus('current')
webServiceRuntimeMalformedRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeMalformedRequestCount.setStatus('current')
webServiceRuntimeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeServiceName.setStatus('current')
webServiceRuntimeHomePageHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeHomePageHitCount.setStatus('current')
webServiceRuntimeWSDLUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeWSDLUrl.setStatus('current')
webServiceRuntimeURI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1680, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webServiceRuntimeURI.setStatus('current')
wseeClientOperationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1685), )
if mibBuilder.loadTexts: wseeClientOperationRuntimeTable.setStatus('current')
wseeClientOperationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeClientOperationRuntimeIndex"))
if mibBuilder.loadTexts: wseeClientOperationRuntimeEntry.setStatus('current')
wseeClientOperationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeClientOperationRuntimeIndex.setStatus('current')
wseeClientOperationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeObjectName.setStatus('current')
wseeClientOperationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeType.setStatus('current')
wseeClientOperationRuntimeLastResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeLastResponseTime.setStatus('current')
wseeClientOperationRuntimeOperationName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeOperationName.setStatus('current')
wseeClientOperationRuntimeResponseErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeResponseErrorCount.setStatus('current')
wseeClientOperationRuntimeResponseTimeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeResponseTimeLow.setStatus('current')
wseeClientOperationRuntimeResponseTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeResponseTimeTotal.setStatus('current')
wseeClientOperationRuntimeDispatchTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeDispatchTimeTotal.setStatus('current')
wseeClientOperationRuntimeDispatchTimeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeDispatchTimeLow.setStatus('current')
wseeClientOperationRuntimeExecutionTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeExecutionTimeAverage.setStatus('current')
wseeClientOperationRuntimeResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeResponseCount.setStatus('current')
wseeClientOperationRuntimeExecutionTimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeExecutionTimeHigh.setStatus('current')
wseeClientOperationRuntimeInvocationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeInvocationCount.setStatus('current')
wseeClientOperationRuntimeErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeErrorCount.setStatus('current')
wseeClientOperationRuntimeLastResponseErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeLastResponseErrorTime.setStatus('current')
wseeClientOperationRuntimeLastResponseError = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeLastResponseError.setStatus('current')
wseeClientOperationRuntimeDispatchTimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeDispatchTimeHigh.setStatus('current')
wseeClientOperationRuntimeResponseTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeResponseTimeAverage.setStatus('current')
wseeClientOperationRuntimeDispatchTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeDispatchTimeAverage.setStatus('current')
wseeClientOperationRuntimeLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeLastError.setStatus('current')
wseeClientOperationRuntimeExecutionTimeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeExecutionTimeLow.setStatus('current')
wseeClientOperationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeName.setStatus('current')
wseeClientOperationRuntimeLastInvocationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeLastInvocationTime.setStatus('current')
wseeClientOperationRuntimeExecutionTimeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeExecutionTimeTotal.setStatus('current')
wseeClientOperationRuntimeResponseTimeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeResponseTimeHigh.setStatus('current')
wseeClientOperationRuntimeLastErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1685, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientOperationRuntimeLastErrorTime.setStatus('current')
wseeClientPortRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1690), )
if mibBuilder.loadTexts: wseeClientPortRuntimeTable.setStatus('current')
wseeClientPortRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeClientPortRuntimeIndex"))
if mibBuilder.loadTexts: wseeClientPortRuntimeEntry.setStatus('current')
wseeClientPortRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeClientPortRuntimeIndex.setStatus('current')
wseeClientPortRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimeObjectName.setStatus('current')
wseeClientPortRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimeType.setStatus('current')
wseeClientPortRuntimeTotalFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimeTotalFaults.setStatus('current')
wseeClientPortRuntimePolicyFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimePolicyFaults.setStatus('current')
wseeClientPortRuntimePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimePortName.setStatus('current')
wseeClientPortRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimeName.setStatus('current')
wseeClientPortRuntimeTransportProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimeTransportProtocolType.setStatus('current')
wseeClientPortRuntimeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimeStartTime.setStatus('current')
wseeClientPortRuntimePoolTotalPooledClientTakeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimePoolTotalPooledClientTakeCount.setStatus('current')
wseeClientPortRuntimePoolTakenCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimePoolTakenCount.setStatus('current')
wseeClientPortRuntimePoolTotalConversationalClientTakeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimePoolTotalConversationalClientTakeCount.setStatus('current')
wseeClientPortRuntimeTotalSecurityFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimeTotalSecurityFaults.setStatus('current')
wseeClientPortRuntimePoolCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimePoolCapacity.setStatus('current')
wseeClientPortRuntimePoolTotalSimpleClientCreateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimePoolTotalSimpleClientCreateCount.setStatus('current')
wseeClientPortRuntimePoolFreeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1690, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientPortRuntimePoolFreeCount.setStatus('current')
wseeClientRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1695), )
if mibBuilder.loadTexts: wseeClientRuntimeTable.setStatus('current')
wseeClientRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1695, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeClientRuntimeIndex"))
if mibBuilder.loadTexts: wseeClientRuntimeEntry.setStatus('current')
wseeClientRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1695, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeClientRuntimeIndex.setStatus('current')
wseeClientRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1695, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientRuntimeObjectName.setStatus('current')
wseeClientRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1695, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientRuntimeType.setStatus('current')
wseeClientRuntimeClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1695, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientRuntimeClientID.setStatus('current')
wseeClientRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1695, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClientRuntimeName.setStatus('current')
wseeClusterFrontEndRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1700), )
if mibBuilder.loadTexts: wseeClusterFrontEndRuntimeTable.setStatus('current')
wseeClusterFrontEndRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1700, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeClusterFrontEndRuntimeIndex"))
if mibBuilder.loadTexts: wseeClusterFrontEndRuntimeEntry.setStatus('current')
wseeClusterFrontEndRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1700, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeClusterFrontEndRuntimeIndex.setStatus('current')
wseeClusterFrontEndRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1700, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterFrontEndRuntimeObjectName.setStatus('current')
wseeClusterFrontEndRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1700, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterFrontEndRuntimeType.setStatus('current')
wseeClusterFrontEndRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1700, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterFrontEndRuntimeName.setStatus('current')
wseeClusterRoutingRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1705), )
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeTable.setStatus('current')
wseeClusterRoutingRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeClusterRoutingRuntimeIndex"))
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeEntry.setStatus('current')
wseeClusterRoutingRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeIndex.setStatus('current')
wseeClusterRoutingRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeObjectName.setStatus('current')
wseeClusterRoutingRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeType.setStatus('current')
wseeClusterRoutingRuntimeLastRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeLastRoutingFailure.setStatus('current')
wseeClusterRoutingRuntimeRoutedRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeRoutedRequestCount.setStatus('current')
wseeClusterRoutingRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeName.setStatus('current')
wseeClusterRoutingRuntimeRoutedResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeRoutedResponseCount.setStatus('current')
wseeClusterRoutingRuntimeRoutingFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeRoutingFailureCount.setStatus('current')
wseeClusterRoutingRuntimeRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeRequestCount.setStatus('current')
wseeClusterRoutingRuntimeResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeResponseCount.setStatus('current')
wseeClusterRoutingRuntimeLastRoutingFailureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1705, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeClusterRoutingRuntimeLastRoutingFailureTime.setStatus('current')
wseeMcRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1710), )
if mibBuilder.loadTexts: wseeMcRuntimeTable.setStatus('current')
wseeMcRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1710, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeMcRuntimeIndex"))
if mibBuilder.loadTexts: wseeMcRuntimeEntry.setStatus('current')
wseeMcRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1710, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeMcRuntimeIndex.setStatus('current')
wseeMcRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1710, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeMcRuntimeObjectName.setStatus('current')
wseeMcRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1710, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeMcRuntimeType.setStatus('current')
wseeMcRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1710, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeMcRuntimeName.setStatus('current')
wseeOperationConfigurationRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1715), )
if mibBuilder.loadTexts: wseeOperationConfigurationRuntimeTable.setStatus('current')
wseeOperationConfigurationRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1715, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeOperationConfigurationRuntimeIndex"))
if mibBuilder.loadTexts: wseeOperationConfigurationRuntimeEntry.setStatus('current')
wseeOperationConfigurationRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1715, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeOperationConfigurationRuntimeIndex.setStatus('current')
wseeOperationConfigurationRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1715, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationConfigurationRuntimeObjectName.setStatus('current')
wseeOperationConfigurationRuntimePolicySubjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1715, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationConfigurationRuntimePolicySubjectType.setStatus('current')
wseeOperationConfigurationRuntimePolicyAttachmentSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1715, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationConfigurationRuntimePolicyAttachmentSupport.setStatus('current')
wseeOperationConfigurationRuntimePolicySubjectResourcePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1715, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationConfigurationRuntimePolicySubjectResourcePattern.setStatus('current')
wseeOperationConfigurationRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1715, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationConfigurationRuntimeType.setStatus('current')
wseeOperationConfigurationRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1715, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationConfigurationRuntimeName.setStatus('current')
wseeOperationConfigurationRuntimePolicySubjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1715, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeOperationConfigurationRuntimePolicySubjectName.setStatus('current')
wseePolicySubjectManagerRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1720), )
if mibBuilder.loadTexts: wseePolicySubjectManagerRuntimeTable.setStatus('current')
wseePolicySubjectManagerRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1720, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseePolicySubjectManagerRuntimeIndex"))
if mibBuilder.loadTexts: wseePolicySubjectManagerRuntimeEntry.setStatus('current')
wseePolicySubjectManagerRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1720, 1, 1), OctetString())
if mibBuilder.loadTexts: wseePolicySubjectManagerRuntimeIndex.setStatus('current')
wseePolicySubjectManagerRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1720, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePolicySubjectManagerRuntimeObjectName.setStatus('current')
wseePolicySubjectManagerRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1720, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePolicySubjectManagerRuntimeType.setStatus('current')
wseePolicySubjectManagerRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1720, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePolicySubjectManagerRuntimeName.setStatus('current')
wseePortPolicyRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1725), )
if mibBuilder.loadTexts: wseePortPolicyRuntimeTable.setStatus('current')
wseePortPolicyRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseePortPolicyRuntimeIndex"))
if mibBuilder.loadTexts: wseePortPolicyRuntimeEntry.setStatus('current')
wseePortPolicyRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 1), OctetString())
if mibBuilder.loadTexts: wseePortPolicyRuntimeIndex.setStatus('current')
wseePortPolicyRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeObjectName.setStatus('current')
wseePortPolicyRuntimeTotalViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeTotalViolations.setStatus('current')
wseePortPolicyRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeType.setStatus('current')
wseePortPolicyRuntimeTotalFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeTotalFaults.setStatus('current')
wseePortPolicyRuntimeConfidentialityViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeConfidentialityViolations.setStatus('current')
wseePortPolicyRuntimeAuthenticationViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeAuthenticationViolations.setStatus('current')
wseePortPolicyRuntimePolicyFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimePolicyFaults.setStatus('current')
wseePortPolicyRuntimeIntegrityViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeIntegrityViolations.setStatus('current')
wseePortPolicyRuntimeAuthenticationSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeAuthenticationSuccesses.setStatus('current')
wseePortPolicyRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeName.setStatus('current')
wseePortPolicyRuntimeAuthorizationSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeAuthorizationSuccesses.setStatus('current')
wseePortPolicyRuntimeConfidentialitySuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeConfidentialitySuccesses.setStatus('current')
wseePortPolicyRuntimeAuthorizationViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeAuthorizationViolations.setStatus('current')
wseePortPolicyRuntimeIntegritySuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeIntegritySuccesses.setStatus('current')
wseePortPolicyRuntimeTotalSecurityFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1725, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseePortPolicyRuntimeTotalSecurityFaults.setStatus('current')
wseeV2RuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1730), )
if mibBuilder.loadTexts: wseeV2RuntimeTable.setStatus('current')
wseeV2RuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeV2RuntimeIndex"))
if mibBuilder.loadTexts: wseeV2RuntimeEntry.setStatus('current')
wseeV2RuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeV2RuntimeIndex.setStatus('current')
wseeV2RuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeObjectName.setStatus('current')
wseeV2RuntimeImplementationType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeImplementationType.setStatus('current')
wseeV2RuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeType.setStatus('current')
wseeV2RuntimeTotalFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeTotalFaults.setStatus('current')
wseeV2RuntimeWebserviceDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeWebserviceDescriptionName.setStatus('current')
wseeV2RuntimePolicyFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimePolicyFaults.setStatus('current')
wseeV2RuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeName.setStatus('current')
wseeV2RuntimeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeServiceName.setStatus('current')
wseeV2RuntimeContextPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeContextPath.setStatus('current')
wseeV2RuntimeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeStartTime.setStatus('current')
wseeV2RuntimeURI = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeURI.setStatus('current')
wseeV2RuntimeTotalSecurityFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1730, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeV2RuntimeTotalSecurityFaults.setStatus('current')
wseeWsrmRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1735), )
if mibBuilder.loadTexts: wseeWsrmRuntimeTable.setStatus('current')
wseeWsrmRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1735, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "wseeWsrmRuntimeIndex"))
if mibBuilder.loadTexts: wseeWsrmRuntimeEntry.setStatus('current')
wseeWsrmRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1735, 1, 1), OctetString())
if mibBuilder.loadTexts: wseeWsrmRuntimeIndex.setStatus('current')
wseeWsrmRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1735, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeWsrmRuntimeObjectName.setStatus('current')
wseeWsrmRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1735, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeWsrmRuntimeType.setStatus('current')
wseeWsrmRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1735, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeWsrmRuntimeName.setStatus('current')
wseeWsrmRuntimeSequenceIds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1735, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wseeWsrmRuntimeSequenceIds.setStatus('current')
coherenceServerTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1740), )
if mibBuilder.loadTexts: coherenceServerTable.setStatus('current')
coherenceServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "coherenceServerIndex"))
if mibBuilder.loadTexts: coherenceServerEntry.setStatus('current')
coherenceServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 1), OctetString())
if mibBuilder.loadTexts: coherenceServerIndex.setStatus('current')
coherenceServerObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerObjectName.setStatus('current')
coherenceServerRestartDelaySeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerRestartDelaySeconds.setStatus('current')
coherenceServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerType.setStatus('current')
coherenceServerNMSocketCreateTimeoutInMillis = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerNMSocketCreateTimeoutInMillis.setStatus('current')
coherenceServerUnicastListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerUnicastListenPort.setStatus('current')
coherenceServerUnicastPortAutoAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerUnicastPortAutoAdjust.setStatus('current')
coherenceServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerName.setStatus('current')
coherenceServerUnicastListenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerUnicastListenAddress.setStatus('current')
coherenceServerRestartIntervalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerRestartIntervalSeconds.setStatus('current')
coherenceServerRestartMax = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerRestartMax.setStatus('current')
coherenceServerAutoRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1740, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerAutoRestart.setStatus('current')
coherenceServerStartTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1745), )
if mibBuilder.loadTexts: coherenceServerStartTable.setStatus('current')
coherenceServerStartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "coherenceServerStartIndex"))
if mibBuilder.loadTexts: coherenceServerStartEntry.setStatus('current')
coherenceServerStartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1, 1), OctetString())
if mibBuilder.loadTexts: coherenceServerStartIndex.setStatus('current')
coherenceServerStartObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerStartObjectName.setStatus('current')
coherenceServerStartJavaHome = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerStartJavaHome.setStatus('current')
coherenceServerStartBeaHome = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerStartBeaHome.setStatus('current')
coherenceServerStartArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerStartArguments.setStatus('current')
coherenceServerStartType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerStartType.setStatus('current')
coherenceServerStartJavaVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerStartJavaVendor.setStatus('current')
coherenceServerStartName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerStartName.setStatus('current')
coherenceServerStartRootDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerStartRootDirectory.setStatus('current')
coherenceServerStartClassPath = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1745, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerStartClassPath.setStatus('current')
coherenceServerLifeCycleRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1750), )
if mibBuilder.loadTexts: coherenceServerLifeCycleRuntimeTable.setStatus('current')
coherenceServerLifeCycleRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1750, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "coherenceServerLifeCycleRuntimeIndex"))
if mibBuilder.loadTexts: coherenceServerLifeCycleRuntimeEntry.setStatus('current')
coherenceServerLifeCycleRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1750, 1, 1), OctetString())
if mibBuilder.loadTexts: coherenceServerLifeCycleRuntimeIndex.setStatus('current')
coherenceServerLifeCycleRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1750, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleRuntimeObjectName.setStatus('current')
coherenceServerLifeCycleRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1750, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleRuntimeType.setStatus('current')
coherenceServerLifeCycleRuntimeNodeManagerRestartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1750, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleRuntimeNodeManagerRestartCount.setStatus('current')
coherenceServerLifeCycleRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1750, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleRuntimeName.setStatus('current')
coherenceServerLifeCycleRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1750, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleRuntimeState.setStatus('current')
coherenceServerLifeCycleTaskRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1755), )
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeTable.setStatus('current')
coherenceServerLifeCycleTaskRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "coherenceServerLifeCycleTaskRuntimeIndex"))
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeEntry.setStatus('current')
coherenceServerLifeCycleTaskRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 1), OctetString())
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeIndex.setStatus('current')
coherenceServerLifeCycleTaskRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeObjectName.setStatus('current')
coherenceServerLifeCycleTaskRuntimeOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeOperation.setStatus('current')
coherenceServerLifeCycleTaskRuntimeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeDescription.setStatus('current')
coherenceServerLifeCycleTaskRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeType.setStatus('current')
coherenceServerLifeCycleTaskRuntimeRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeRunning.setStatus('current')
coherenceServerLifeCycleTaskRuntimeSystemTask = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeSystemTask.setStatus('current')
coherenceServerLifeCycleTaskRuntimeServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeServerName.setStatus('current')
coherenceServerLifeCycleTaskRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeName.setStatus('current')
coherenceServerLifeCycleTaskRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeStatus.setStatus('current')
coherenceServerLifeCycleTaskRuntimeBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeBeginTime.setStatus('current')
coherenceServerLifeCycleTaskRuntimeEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1755, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coherenceServerLifeCycleTaskRuntimeEndTime.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1760), )
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeTable.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jdbcOracleDataSourceInstanceRuntimeIndex"))
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeEntry.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 1), OctetString())
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeIndex.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeObjectName.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeEnabled.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeActiveConnectionsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeActiveConnectionsCurrentCount.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeType.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeNumAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeNumAvailable.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeSignature.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeCurrentWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeCurrentWeight.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeName.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeConnectionsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeConnectionsTotalCount.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeReserveRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeReserveRequestCount.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeState.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeNumUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeNumUnavailable.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeCurrCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeCurrCapacity.setStatus('current')
jdbcOracleDataSourceInstanceRuntimeInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1760, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceInstanceRuntimeInstanceName.setStatus('current')
jdbcOracleDataSourceRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1765), )
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeTable.setStatus('current')
jdbcOracleDataSourceRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "jdbcOracleDataSourceRuntimeIndex"))
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeEntry.setStatus('current')
jdbcOracleDataSourceRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 1), OctetString())
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeIndex.setStatus('current')
jdbcOracleDataSourceRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeObjectName.setStatus('current')
jdbcOracleDataSourceRuntimeActiveConnectionsCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeActiveConnectionsCurrentCount.setStatus('current')
jdbcOracleDataSourceRuntimeWaitingForConnectionFailureTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeWaitingForConnectionFailureTotal.setStatus('current')
jdbcOracleDataSourceRuntimeFailedRCLBBasedBorrowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeFailedRCLBBasedBorrowCount.setStatus('current')
jdbcOracleDataSourceRuntimeWaitingForConnectionTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeWaitingForConnectionTotal.setStatus('current')
jdbcOracleDataSourceRuntimeConnectionsTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeConnectionsTotalCount.setStatus('current')
jdbcOracleDataSourceRuntimeSuccessfulRCLBBasedBorrowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeSuccessfulRCLBBasedBorrowCount.setStatus('current')
jdbcOracleDataSourceRuntimeDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeDriverVersion.setStatus('current')
jdbcOracleDataSourceRuntimeWaitingForConnectionCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeWaitingForConnectionCurrentCount.setStatus('current')
jdbcOracleDataSourceRuntimeLeakedConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeLeakedConnectionCount.setStatus('current')
jdbcOracleDataSourceRuntimeHighestNumUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeHighestNumUnavailable.setStatus('current')
jdbcOracleDataSourceRuntimePrepStmtCacheAccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimePrepStmtCacheAccessCount.setStatus('current')
jdbcOracleDataSourceRuntimeWaitSecondsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeWaitSecondsHighCount.setStatus('current')
jdbcOracleDataSourceRuntimeActiveConnectionsHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeActiveConnectionsHighCount.setStatus('current')
jdbcOracleDataSourceRuntimeFailedAffinityBasedBorrowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeFailedAffinityBasedBorrowCount.setStatus('current')
jdbcOracleDataSourceRuntimePrepStmtCacheHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimePrepStmtCacheHitCount.setStatus('current')
jdbcOracleDataSourceRuntimeActiveConnectionsAverageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeActiveConnectionsAverageCount.setStatus('current')
jdbcOracleDataSourceRuntimeVersionJDBCDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeVersionJDBCDriver.setStatus('current')
jdbcOracleDataSourceRuntimeDatabaseProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeDatabaseProductVersion.setStatus('current')
jdbcOracleDataSourceRuntimeSuccessfulAffinityBasedBorrowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeSuccessfulAffinityBasedBorrowCount.setStatus('current')
jdbcOracleDataSourceRuntimePrepStmtCacheDeleteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimePrepStmtCacheDeleteCount.setStatus('current')
jdbcOracleDataSourceRuntimeReserveRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeReserveRequestCount.setStatus('current')
jdbcOracleDataSourceRuntimeFailuresToReconnectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeFailuresToReconnectCount.setStatus('current')
jdbcOracleDataSourceRuntimeWaitingForConnectionHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeWaitingForConnectionHighCount.setStatus('current')
jdbcOracleDataSourceRuntimePrepStmtCacheMissCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimePrepStmtCacheMissCount.setStatus('current')
jdbcOracleDataSourceRuntimeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeEnabled.setStatus('current')
jdbcOracleDataSourceRuntimeFailedReserveRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeFailedReserveRequestCount.setStatus('current')
jdbcOracleDataSourceRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeType.setStatus('current')
jdbcOracleDataSourceRuntimeHighestNumAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeHighestNumAvailable.setStatus('current')
jdbcOracleDataSourceRuntimeDatabaseProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeDatabaseProductName.setStatus('current')
jdbcOracleDataSourceRuntimeCurrCapacityHighCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeCurrCapacityHighCount.setStatus('current')
jdbcOracleDataSourceRuntimePrepStmtCacheCurrentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimePrepStmtCacheCurrentSize.setStatus('current')
jdbcOracleDataSourceRuntimeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeServiceName.setStatus('current')
jdbcOracleDataSourceRuntimeWaitingForConnectionSuccessTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeWaitingForConnectionSuccessTotal.setStatus('current')
jdbcOracleDataSourceRuntimeNumUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeNumUnavailable.setStatus('current')
jdbcOracleDataSourceRuntimePrepStmtCacheAddCount = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimePrepStmtCacheAddCount.setStatus('current')
jdbcOracleDataSourceRuntimeDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeDriverName.setStatus('current')
jdbcOracleDataSourceRuntimeNumAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeNumAvailable.setStatus('current')
jdbcOracleDataSourceRuntimeModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeModuleId.setStatus('current')
jdbcOracleDataSourceRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeName.setStatus('current')
jdbcOracleDataSourceRuntimeState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeState.setStatus('current')
jdbcOracleDataSourceRuntimeConnectionDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeConnectionDelayTime.setStatus('current')
jdbcOracleDataSourceRuntimeDeploymentState = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeDeploymentState.setStatus('current')
jdbcOracleDataSourceRuntimeCurrCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1765, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOracleDataSourceRuntimeCurrCapacity.setStatus('current')
onsClientRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1770), )
if mibBuilder.loadTexts: onsClientRuntimeTable.setStatus('current')
onsClientRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1770, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "onsClientRuntimeIndex"))
if mibBuilder.loadTexts: onsClientRuntimeEntry.setStatus('current')
onsClientRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1770, 1, 1), OctetString())
if mibBuilder.loadTexts: onsClientRuntimeIndex.setStatus('current')
onsClientRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1770, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onsClientRuntimeObjectName.setStatus('current')
onsClientRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1770, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onsClientRuntimeType.setStatus('current')
onsClientRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1770, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onsClientRuntimeName.setStatus('current')
onsDaemonRuntimeTable = MibTable((1, 3, 6, 1, 4, 1, 140, 625, 1775), )
if mibBuilder.loadTexts: onsDaemonRuntimeTable.setStatus('current')
onsDaemonRuntimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 140, 625, 1775, 1), ).setIndexNames((0, "BEA-WEBLOGIC-MIB", "onsDaemonRuntimeIndex"))
if mibBuilder.loadTexts: onsDaemonRuntimeEntry.setStatus('current')
onsDaemonRuntimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1775, 1, 1), OctetString())
if mibBuilder.loadTexts: onsDaemonRuntimeIndex.setStatus('current')
onsDaemonRuntimeObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1775, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onsDaemonRuntimeObjectName.setStatus('current')
onsDaemonRuntimeHost = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1775, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onsDaemonRuntimeHost.setStatus('current')
onsDaemonRuntimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1775, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onsDaemonRuntimeType.setStatus('current')
onsDaemonRuntimeName = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1775, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onsDaemonRuntimeName.setStatus('current')
onsDaemonRuntimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1775, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onsDaemonRuntimeStatus.setStatus('current')
onsDaemonRuntimePort = MibTableColumn((1, 3, 6, 1, 4, 1, 140, 625, 1775, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onsDaemonRuntimePort.setStatus('current')
wlsLogNotification = NotificationType((1, 3, 6, 1, 4, 1, 140, 625, 0, 60)).setObjects(("BEA-WEBLOGIC-MIB", "trapTime"), ("BEA-WEBLOGIC-MIB", "trapServerName"), ("BEA-WEBLOGIC-MIB", "trapMachineName"), ("BEA-WEBLOGIC-MIB", "trapLogThreadId"), ("BEA-WEBLOGIC-MIB", "trapLogTransactionId"), ("BEA-WEBLOGIC-MIB", "trapLogUserId"), ("BEA-WEBLOGIC-MIB", "trapLogSubsystem"), ("BEA-WEBLOGIC-MIB", "trapLogMsgId"), ("BEA-WEBLOGIC-MIB", "trapLogSeverity"), ("BEA-WEBLOGIC-MIB", "trapLogMessage"))
if mibBuilder.loadTexts: wlsLogNotification.setStatus('current')
wlsServerStart = NotificationType((1, 3, 6, 1, 4, 1, 140, 625, 0, 65)).setObjects(("BEA-WEBLOGIC-MIB", "trapTime"), ("BEA-WEBLOGIC-MIB", "trapServerName"))
if mibBuilder.loadTexts: wlsServerStart.setStatus('current')
wlsServerShutDown = NotificationType((1, 3, 6, 1, 4, 1, 140, 625, 0, 70)).setObjects(("BEA-WEBLOGIC-MIB", "trapTime"), ("BEA-WEBLOGIC-MIB", "trapServerName"))
if mibBuilder.loadTexts: wlsServerShutDown.setStatus('current')
wlsMonitorNotification = NotificationType((1, 3, 6, 1, 4, 1, 140, 625, 0, 75)).setObjects(("BEA-WEBLOGIC-MIB", "trapTime"), ("BEA-WEBLOGIC-MIB", "trapServerName"), ("BEA-WEBLOGIC-MIB", "trapMonitorType"), ("BEA-WEBLOGIC-MIB", "trapMonitorThreshold"), ("BEA-WEBLOGIC-MIB", "trapMonitorValue"), ("BEA-WEBLOGIC-MIB", "trapMBeanName"), ("BEA-WEBLOGIC-MIB", "trapMBeanType"), ("BEA-WEBLOGIC-MIB", "trapAttributeName"))
if mibBuilder.loadTexts: wlsMonitorNotification.setStatus('current')
wlsAttributeChange = NotificationType((1, 3, 6, 1, 4, 1, 140, 625, 0, 80)).setObjects(("BEA-WEBLOGIC-MIB", "trapTime"), ("BEA-WEBLOGIC-MIB", "trapServerName"), ("BEA-WEBLOGIC-MIB", "trapMBeanName"), ("BEA-WEBLOGIC-MIB", "trapMBeanType"), ("BEA-WEBLOGIC-MIB", "trapAttributeName"), ("BEA-WEBLOGIC-MIB", "trapAttributeType"), ("BEA-WEBLOGIC-MIB", "trapAttributeChangeType"), ("BEA-WEBLOGIC-MIB", "trapAttributeOldVal"), ("BEA-WEBLOGIC-MIB", "trapAttributeNewVal"))
if mibBuilder.loadTexts: wlsAttributeChange.setStatus('current')
wlsWatchNotification = NotificationType((1, 3, 6, 1, 4, 1, 140, 625, 0, 85)).setObjects(("BEA-WEBLOGIC-MIB", "trapTime"), ("BEA-WEBLOGIC-MIB", "trapDomainName"), ("BEA-WEBLOGIC-MIB", "trapServerName"), ("BEA-WEBLOGIC-MIB", "trapWatchName"), ("BEA-WEBLOGIC-MIB", "trapWatchRuleType"), ("BEA-WEBLOGIC-MIB", "trapWatchRule"), ("BEA-WEBLOGIC-MIB", "trapWatchSeverity"), ("BEA-WEBLOGIC-MIB", "trapWatchData"), ("BEA-WEBLOGIC-MIB", "trapWatchAlarmType"), ("BEA-WEBLOGIC-MIB", "trapWatchAlarmResetPeriod"), ("BEA-WEBLOGIC-MIB", "trapWatchSNMPNotificationName"))
if mibBuilder.loadTexts: wlsWatchNotification.setStatus('current')
wlsALSBAlert = NotificationType((1, 3, 6, 1, 4, 1, 140, 800, 0, 90)).setObjects(("BEA-WEBLOGIC-MIB", "trapALSBAlertTrapType"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertSeverity"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertDomainName"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertServerName"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertAlertId"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertRuleId"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertRuleName"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertRuleCondition"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertAlertTime"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertAnnotation"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertServiceName"), ("BEA-WEBLOGIC-MIB", "trapALSBAlertServicePath"))
if mibBuilder.loadTexts: wlsALSBAlert.setStatus('current')
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", requestClassRuntimeParent=requestClassRuntimeParent, webAppComponentObjectName=webAppComponentObjectName, wseeV2RuntimeTotalSecurityFaults=wseeV2RuntimeTotalSecurityFaults, trapWatchRuleType=trapWatchRuleType, workManagerShutdownTriggerMaxStuckThreadTime=workManagerShutdownTriggerMaxStuckThreadTime, singletonServiceName=singletonServiceName, jmsSessionPoolConnectionFactory=jmsSessionPoolConnectionFactory, jmsMessageLogFileName=jmsMessageLogFileName, wldfWatchNotificationRuntimeName=wldfWatchNotificationRuntimeName, appDeploymentRuntimeName=appDeploymentRuntimeName, federationServicesIntersiteTransferURIs=federationServicesIntersiteTransferURIs, wlssnmpProxyName=wlssnmpProxyName, coherenceServerRestartIntervalSeconds=coherenceServerRestartIntervalSeconds, serverChannelRuntimeName=serverChannelRuntimeName, jmsDestinationRuntimeMessagesCurrentCount=jmsDestinationRuntimeMessagesCurrentCount, wlssnmpLogFilterName=wlssnmpLogFilterName, serverDebugDebugDiagnosticCollections=serverDebugDebugDiagnosticCollections, wseeClientOperationRuntimeLastResponseTime=wseeClientOperationRuntimeLastResponseTime, wseePortPolicyRuntimeAuthorizationSuccesses=wseePortPolicyRuntimeAuthorizationSuccesses, serverDefaultTGIOPUser=serverDefaultTGIOPUser, servletSessionRuntimeType=servletSessionRuntimeType, serverMigrationRuntimeObjectName=serverMigrationRuntimeObjectName, clusterType=clusterType, serverChannelRuntimePublicURL=serverChannelRuntimePublicURL, webServiceRequestBufferingQueueConnectionFactoryJndiName=webServiceRequestBufferingQueueConnectionFactoryJndiName, jrockitRuntimeJVMDescription=jrockitRuntimeJVMDescription, defaultFileStoreInitialSize=defaultFileStoreInitialSize, wtcPasswordName=wtcPasswordName, serverDebugDebugJMSAME=serverDebugDebugJMSAME, wldfFileArchiveRuntimeIndexTime=wldfFileArchiveRuntimeIndexTime, shutdownClassEntry=shutdownClassEntry, jdbcServiceRuntimeTable=jdbcServiceRuntimeTable, serverDebugDebugSecurityPredicate=serverDebugDebugSecurityPredicate, manAsyncReplicationRuntimeSecondaryServerDetails=manAsyncReplicationRuntimeSecondaryServerDetails, wldfServerDiagnosticDiagnosticStoreMaxFileSize=wldfServerDiagnosticDiagnosticStoreMaxFileSize, kodoDataCacheRuntimeTotalCurrentEntries=kodoDataCacheRuntimeTotalCurrentEntries, networkChannelHTTPEnabled=networkChannelHTTPEnabled, wseeClusterRoutingRuntimeEntry=wseeClusterRoutingRuntimeEntry, wldfDataRetirementTaskRuntimeType=wldfDataRetirementTaskRuntimeType, logRotateLogOnStartup=logRotateLogOnStartup, jmsSessionRuntimeProducersTotalCount=jmsSessionRuntimeProducersTotalCount, jmsConsumerRuntimeMessagesPendingCount=jmsConsumerRuntimeMessagesPendingCount, jdbcOracleDataSourceRuntimeSuccessfulRCLBBasedBorrowCount=jdbcOracleDataSourceRuntimeSuccessfulRCLBBasedBorrowCount, jtaMaxXACallMillis=jtaMaxXACallMillis, jdbcDataSourceFactoryType=jdbcDataSourceFactoryType, ejbTransactionRuntimeParent=ejbTransactionRuntimeParent, wlecConnectionPoolName=wlecConnectionPoolName, jmsServerRuntimeEntry=jmsServerRuntimeEntry, kernelCompleteHTTPMessageTimeout=kernelCompleteHTTPMessageTimeout, federationServicesARSRequiresTwoWaySSL=federationServicesARSRequiresTwoWaySSL, jmsConnectionConsumerDestination=jmsConnectionConsumerDestination, coherenceClusterRuntimeClusterName=coherenceClusterRuntimeClusterName, coherenceServerLifeCycleRuntimeNodeManagerRestartCount=coherenceServerLifeCycleRuntimeNodeManagerRestartCount, migrationDataRuntimeClusterMasterName=migrationDataRuntimeClusterMasterName, webServiceRuntimeWSDLUrl=webServiceRuntimeWSDLUrl, singleSignOnServicesEntityID=singleSignOnServicesEntityID, jmsRemoteEndpointRuntimeOperationState=jmsRemoteEndpointRuntimeOperationState, webserviceTimestampObjectName=webserviceTimestampObjectName, serverTGIOPEnabled=serverTGIOPEnabled, migrationDataRuntimeMigrationEndTime=migrationDataRuntimeMigrationEndTime, pageFlowRuntimeEntry=pageFlowRuntimeEntry, serverDebugDebugSecurityJACCPolicy=serverDebugDebugSecurityJACCPolicy, wldfWlstoreArchiveRuntimeParent=wldfWlstoreArchiveRuntimeParent, jtaRecoveryRuntimeName=jtaRecoveryRuntimeName, jtaRecoveryRuntimeTable=jtaRecoveryRuntimeTable, connectorConnectionPoolRuntimeShrinkPeriodMinutes=connectorConnectionPoolRuntimeShrinkPeriodMinutes, entityCacheRuntimeMaxEntryMemorySize=entityCacheRuntimeMaxEntryMemorySize, clusterReplicationChannel=clusterReplicationChannel, entityCacheCurrentStateRuntimeMemoryUsage=entityCacheCurrentStateRuntimeMemoryUsage, serverDebugDebugDiagnosticImage=serverDebugDebugDiagnosticImage, userLockoutManagerRuntimeLoginAttemptsWhileLockedTotalCount=userLockoutManagerRuntimeLoginAttemptsWhileLockedTotalCount, domainLibraryAbsoluteInstallDir=domainLibraryAbsoluteInstallDir, serverDebugDebugAppContainer=serverDebugDebugAppContainer, defaultFileStoreObjectName=defaultFileStoreObjectName, fileStoreBlockSize=fileStoreBlockSize, joltConnectionPoolSecurityContextEnabled=joltConnectionPoolSecurityContextEnabled, snmpAgentSendAutomaticTrapsEnabled=snmpAgentSendAutomaticTrapsEnabled, connectorConnectionRuntimeReserveTime=connectorConnectionRuntimeReserveTime, connectorServiceRuntimeRACount=connectorServiceRuntimeRACount, jmsDistributedDestinationIndex=jmsDistributedDestinationIndex, jrockitRuntimeOSVersion=jrockitRuntimeOSVersion, jmxTable=jmxTable, wlssnmpGaugeMonitorIndex=wlssnmpGaugeMonitorIndex, springApplicationContextRuntimeGetBeanCount=springApplicationContextRuntimeGetBeanCount, domainLastModificationTime=domainLastModificationTime, wanreplicationRuntimeDetailedSecondariesDistribution=wanreplicationRuntimeDetailedSecondariesDistribution, executeQueueRuntimePendingRequestOldestTime=executeQueueRuntimePendingRequestOldestTime, wlssnmpAttributeChangeAttributeName=wlssnmpAttributeChangeAttributeName, webserviceSecurityTokenName=webserviceSecurityTokenName, connectorInboundRuntimeParent=connectorInboundRuntimeParent, xmlRegistryEntry=xmlRegistryEntry, jdbcConnectionPoolRuntimeWaitingForConnectionCurrentCount=jdbcConnectionPoolRuntimeWaitingForConnectionCurrentCount, startupClassClassName=startupClassClassName, webServiceRuntimeIndex=webServiceRuntimeIndex, jtaMigratableTargetSecondsBetweenRestarts=jtaMigratableTargetSecondsBetweenRestarts, wtctBridgeGlobalRetries=wtctBridgeGlobalRetries, jmsSessionPoolType=jmsSessionPoolType, jmsDestCommonBytesMaximum=jmsDestCommonBytesMaximum, jmsVirtualDestinationEntry=jmsVirtualDestinationEntry, wseePolicySubjectManagerRuntimeType=wseePolicySubjectManagerRuntimeType, foreignJNDIProviderProviderURL=foreignJNDIProviderProviderURL, springApplicationContextRuntimeObjectName=springApplicationContextRuntimeObjectName, queryCacheRuntimeCacheHitCount=queryCacheRuntimeCacheHitCount, springViewRuntimeApplicationContextDisplayName=springViewRuntimeApplicationContextDisplayName, wlsAttributeChange=wlsAttributeChange, messageDrivenEJBRuntimeLastExceptionAsString=messageDrivenEJBRuntimeLastExceptionAsString, wtcRemoteTuxDomMinEncryptBits=wtcRemoteTuxDomMinEncryptBits, jmxCompatibilityMBeanServerEnabled=jmxCompatibilityMBeanServerEnabled, entityEJBRuntimeName=entityEJBRuntimeName, entityCacheRuntimeEntry=entityCacheRuntimeEntry, serverRuntimeTable=serverRuntimeTable, serverDebugDebugRAClassloader=serverDebugDebugRAClassloader, remoteSAFContextObjectName=remoteSAFContextObjectName, xmlEntityCacheType=xmlEntityCacheType, jtaMigratableTargetMigrationPolicy=jtaMigratableTargetMigrationPolicy, serverAcceptBacklog=serverAcceptBacklog, messagingBridgeRuntimeType=messagingBridgeRuntimeType, bridgeDestinationType=bridgeDestinationType, ejbTransactionRuntimeEntry=ejbTransactionRuntimeEntry, wlssnmpAgentRuntimeTable=wlssnmpAgentRuntimeTable, userLockoutManagerRuntimeName=userLockoutManagerRuntimeName, jmsDestCommonMessagesMaximum=jmsDestCommonMessagesMaximum, wsrmRemoteEndpointRuntimeBytesCurrentCount=wsrmRemoteEndpointRuntimeBytesCurrentCount, ejbPoolRuntimeAccessTotalCount=ejbPoolRuntimeAccessTotalCount, networkChannelDeploymentOrder=networkChannelDeploymentOrder, serverDebugDebugJMSModule=serverDebugDebugJMSModule, nonXAResourceRuntimeTransactionCommittedTotalCount=nonXAResourceRuntimeTransactionCommittedTotalCount, serverDebugDebugConnection=serverDebugDebugConnection, springApplicationContextRuntimeGetBeansOfTypeCount=springApplicationContextRuntimeGetBeansOfTypeCount, jtaEntry=jtaEntry, springTransactionManagerRuntimeResumeCount=springTransactionManagerRuntimeResumeCount, serverDebugDebugDeploymentService=serverDebugDebugDeploymentService, jmsDestCommonTable=jmsDestCommonTable, serverDebugDebugSecurityService=serverDebugDebugSecurityService, wseeRuntimeWebserviceDescriptionName=wseeRuntimeWebserviceDescriptionName, safRemoteEndpointRuntimeBytesHighCount=safRemoteEndpointRuntimeBytesHighCount, jdbcDataSourceFactoryFactoryName=jdbcDataSourceFactoryFactoryName, wlecConnectionPoolTable=wlecConnectionPoolTable, safAgentIncomingPausedAtStartup=safAgentIncomingPausedAtStartup, federationServicesSourceIdBase64=federationServicesSourceIdBase64, httpProxyMaxConnections=httpProxyMaxConnections, wlssnmpAttributeChangeTable=wlssnmpAttributeChangeTable, jdbcConnectionPoolRuntimeConnectionLeakProfileCount=jdbcConnectionPoolRuntimeConnectionLeakProfileCount, wtcRemoteTuxDomEntry=wtcRemoteTuxDomEntry, trapALSBAlertRuleName=trapALSBAlertRuleName, coherenceClusterRuntimeVersion=coherenceClusterRuntimeVersion, transactionNameRuntimeTransactionNoResourcesCommittedTotalCount=transactionNameRuntimeTransactionNoResourcesCommittedTotalCount, serverLowMemoryTimeInterval=serverLowMemoryTimeInterval, wlssnmpAgentDeploymentInformEnabled=wlssnmpAgentDeploymentInformEnabled, joltConnectionPoolName=joltConnectionPoolName, serverDebugDebugJpaDataCache=serverDebugDebugJpaDataCache, webServiceRuntimeWSDLHitCount=webServiceRuntimeWSDLHitCount, messagingBridgeDeploymentOrder=messagingBridgeDeploymentOrder, trapLogMsgId=trapLogMsgId, consoleRuntimeTable=consoleRuntimeTable, jmsDestinationTable=jmsDestinationTable, connectorInboundRuntimeType=connectorInboundRuntimeType, threadPoolRuntimeMinThreadsConstraintsPending=threadPoolRuntimeMinThreadsConstraintsPending, jmsPooledConnectionRuntimeTotalNumAllocated=jmsPooledConnectionRuntimeTotalNumAllocated, safRemoteEndpointRuntimeLastTimeFailedToConnect=safRemoteEndpointRuntimeLastTimeFailedToConnect, webServerMaxPostSize=webServerMaxPostSize, serverDebugDebugRA=serverDebugDebugRA, fairShareRequestClassTable=fairShareRequestClassTable, serverDebugDebugJpaManage=serverDebugDebugJpaManage, embeddedLDAPName=embeddedLDAPName, coherenceClusterSystemResourceType=coherenceClusterSystemResourceType, connectorComponentRuntimeIndex=connectorComponentRuntimeIndex, sslTrustedCAFileName=sslTrustedCAFileName, appDeploymentRuntimeTable=appDeploymentRuntimeTable, jmsMessageLogFileObjectName=jmsMessageLogFileObjectName, domainRuntimeTable=domainRuntimeTable, trapServerName=trapServerName, wlssnmpTrapDestinationName=wlssnmpTrapDestinationName, logName=logName, wldfWatchNotificationRuntimeMinimumHarvesterWatchEvaluationTime=wldfWatchNotificationRuntimeMinimumHarvesterWatchEvaluationTime, wldfRuntimeName=wldfRuntimeName, singleSignOnServicesIndex=singleSignOnServicesIndex, serverDebugDebugStoreIOPhysical=serverDebugDebugStoreIOPhysical, jdbcServiceRuntimeObjectName=jdbcServiceRuntimeObjectName, wseeClusterRoutingRuntimeObjectName=wseeClusterRoutingRuntimeObjectName, migrationDataRuntimeServerName=migrationDataRuntimeServerName, startupClassIndex=startupClassIndex, ejbPoolRuntimeParent=ejbPoolRuntimeParent, coherenceClusterRuntimeTable=coherenceClusterRuntimeTable, safAgentMessagesThresholdHigh=safAgentMessagesThresholdHigh, jmsDestCommonMessagesThresholdLow=jmsDestCommonMessagesThresholdLow, wldfServerDiagnosticStoreSizeCheckPeriod=wldfServerDiagnosticStoreSizeCheckPeriod, singleSignOnServicesServiceProviderEnabled=singleSignOnServicesServiceProviderEnabled, serverDebugDebugJMXCore=serverDebugDebugJMXCore, ejbCacheRuntimeCacheHitCount=ejbCacheRuntimeCacheHitCount, manAsyncReplicationRuntimeSecondaryServerName=manAsyncReplicationRuntimeSecondaryServerName, jmsServerRuntimeConsumptionPaused=jmsServerRuntimeConsumptionPaused, wldfDbstoreArchiveRuntimeRetrievedRecordCount=wldfDbstoreArchiveRuntimeRetrievedRecordCount, networkChannelCOMEnabled=networkChannelCOMEnabled, wtcExportName=wtcExportName, wlssnmpGaugeMonitorThresholdLow=wlssnmpGaugeMonitorThresholdLow, serverStartType=serverStartType, manReplicationRuntimeName=manReplicationRuntimeName, maxThreadsConstraintRuntimeType=maxThreadsConstraintRuntimeType, serverDebugDebugSAFManager=serverDebugDebugSAFManager, rmcFactoryDeploymentOrder=rmcFactoryDeploymentOrder, wldfImageCreationTaskRuntimeBeginTime=wldfImageCreationTaskRuntimeBeginTime, domainAdministrationProtocol=domainAdministrationProtocol, wseePortPolicyRuntimeIntegritySuccesses=wseePortPolicyRuntimeIntegritySuccesses, jmsDistributedDestinationName=jmsDistributedDestinationName, webAppComponentServletExtensionCaseSensitive=webAppComponentServletExtensionCaseSensitive, wtctBridgeRedirectTargetAccessPoint=wtctBridgeRedirectTargetAccessPoint, webAppContainerJSPCompilerBackwardsCompatible=webAppContainerJSPCompilerBackwardsCompatible, webServiceReliabilityType=webServiceReliabilityType, jdbcStorePrefixName=jdbcStorePrefixName, entityCacheCurrentStateRuntimeEntry=entityCacheCurrentStateRuntimeEntry, wseePolicyRuntimeObjectName=wseePolicyRuntimeObjectName, wseeClusterFrontEndRuntimeEntry=wseeClusterFrontEndRuntimeEntry, serverDebugDebugDRSStateTransitions=serverDebugDebugDRSStateTransitions, jmsDestinationRuntimeParent=jmsDestinationRuntimeParent, jdbcOracleDataSourceRuntimeLeakedConnectionCount=jdbcOracleDataSourceRuntimeLeakedConnectionCount, fileStoreLogicalName=fileStoreLogicalName, webserviceSecurityEntry=webserviceSecurityEntry, cacheExpirationIdleTime=cacheExpirationIdleTime, federationServicesPOSTRecipientCheckEnabled=federationServicesPOSTRecipientCheckEnabled, jmsConnectionRuntimeTable=jmsConnectionRuntimeTable, safAgentDefaultRetryDelayMultiplier=safAgentDefaultRetryDelayMultiplier, jdbcOracleDataSourceRuntimeWaitingForConnectionSuccessTotal=jdbcOracleDataSourceRuntimeWaitingForConnectionSuccessTotal, timerRuntimeName=timerRuntimeName, jrockitRuntimeLastGCEnd=jrockitRuntimeLastGCEnd, wlecConnectionRuntimeObjectName=wlecConnectionRuntimeObjectName, serverDebugDebugJpaTool=serverDebugDebugJpaTool, entityCacheRuntimeAvgPerEntryMemorySize=entityCacheRuntimeAvgPerEntryMemorySize, serverFailureTriggerName=serverFailureTriggerName, springApplicationContextRuntimeAverageGetBeanNamesForTypeTime=springApplicationContextRuntimeAverageGetBeanNamesForTypeTime, serverHostsMigratableServices=serverHostsMigratableServices, jmsServerRuntimeBytesPagedInTotalCount=jmsServerRuntimeBytesPagedInTotalCount, networkChannelEntry=networkChannelEntry, interceptionComponentRuntimeIndex=interceptionComponentRuntimeIndex, trapAttributeOldVal=trapAttributeOldVal, servletRuntimeTable=servletRuntimeTable, fairShareRequestClassType=fairShareRequestClassType, serverDebugDebugClusterHeartbeats=serverDebugDebugClusterHeartbeats, wseeOperationRuntimeErrorCount=wseeOperationRuntimeErrorCount, serverDebugDebugRAParsing=serverDebugDebugRAParsing, wseeClusterRoutingRuntimeRoutingFailureCount=wseeClusterRoutingRuntimeRoutingFailureCount, connectorInboundRuntimeName=connectorInboundRuntimeName, connectorConnectionRuntimeDeletable=connectorConnectionRuntimeDeletable, wseePortPolicyRuntimeTable=wseePortPolicyRuntimeTable, wtcImportEntry=wtcImportEntry, wlsServerShutDown=wlsServerShutDown, wlssnmpProxyTimeout=wlssnmpProxyTimeout, ejbLockingRuntimeEntry=ejbLockingRuntimeEntry, jmsPooledConnectionRuntimeHighestWaitSeconds=jmsPooledConnectionRuntimeHighestWaitSeconds, logMemoryBufferSize=logMemoryBufferSize, joltConnectionPoolFailoverAddresses=joltConnectionPoolFailoverAddresses, statefulEJBRuntimeEJBName=statefulEJBRuntimeEJBName, serverDebugDebugJpaJdbcSchema=serverDebugDebugJpaJdbcSchema, jvmRuntimeJavaVendor=jvmRuntimeJavaVendor)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", serverDebugDebugSecuritySAML2CredMap=serverDebugDebugSecuritySAML2CredMap, embeddedLDAPEntry=embeddedLDAPEntry, jdbcDriverRuntimeTable=jdbcDriverRuntimeTable, wtctBridgeGlobalTuxErrorQueue=wtctBridgeGlobalTuxErrorQueue, springViewResolverRuntimeBeanId=springViewResolverRuntimeBeanId, cacheMaxCacheUnits=cacheMaxCacheUnits, wtcResourcesViewTbl32Classes=wtcResourcesViewTbl32Classes, wlecConnectionRuntimeIndex=wlecConnectionRuntimeIndex, serverDebugDebugDRSHeartbeats=serverDebugDebugDRSHeartbeats, wseeWsrmRuntimeEntry=wseeWsrmRuntimeEntry, connectorConnectionRuntimeEntry=connectorConnectionRuntimeEntry, applicationRuntimeTable=applicationRuntimeTable, jdbcDataSourceRuntimePrepStmtCacheCurrentSize=jdbcDataSourceRuntimePrepStmtCacheCurrentSize, wtcRemoteTuxDomFederationURL=wtcRemoteTuxDomFederationURL, servletRuntimeServletName=servletRuntimeServletName, webServiceLogicalStoreName=webServiceLogicalStoreName, wldfHarvesterRuntimeTable=wldfHarvesterRuntimeTable, wseePortPolicyRuntimeIndex=wseePortPolicyRuntimeIndex, coherenceServerStartBeaHome=coherenceServerStartBeaHome, jmsPooledConnectionRuntimeHighestNumReserved=jmsPooledConnectionRuntimeHighestNumReserved, servletRuntimeReloadTotalCount=servletRuntimeReloadTotalCount, serverDebugDebugMuxerConnection=serverDebugDebugMuxerConnection, webServerLogLogFileRotationDir=webServerLogLogFileRotationDir, migrationDataRuntimeObjectName=migrationDataRuntimeObjectName, threadPoolRuntimeStandbyThreadCount=threadPoolRuntimeStandbyThreadCount, ejbRuntimeName=ejbRuntimeName, ejbPoolRuntimeName=ejbPoolRuntimeName, manAsyncReplicationRuntimeTable=manAsyncReplicationRuntimeTable, jmsSessionRuntimeConsumersCurrentCount=jmsSessionRuntimeConsumersCurrentCount, logBroadcasterRuntimeName=logBroadcasterRuntimeName, jmsConnectionRuntimeName=jmsConnectionRuntimeName, minThreadsConstraintRuntimeName=minThreadsConstraintRuntimeName, customResourceObjectName=customResourceObjectName, jmsConsumerRuntimeActive=jmsConsumerRuntimeActive, jmsMessageLogFileFileName=jmsMessageLogFileFileName, wtcRemoteTuxDomAccessPointId=wtcRemoteTuxDomAccessPointId, clusterInterClusterCommLinkHealthCheckInterval=clusterInterClusterCommLinkHealthCheckInterval, safAgentEntry=safAgentEntry, kodoPersistenceUnitRuntimeIndex=kodoPersistenceUnitRuntimeIndex, clusterRuntimeType=clusterRuntimeType, requestClassRuntimeRequestClassType=requestClassRuntimeRequestClassType, jrockitRuntimeJavaVMVendor=jrockitRuntimeJavaVMVendor, persistentStoreRuntimePhysicalWriteCount=persistentStoreRuntimePhysicalWriteCount, jdbcConnectionPoolRuntimeType=jdbcConnectionPoolRuntimeType, snmpAgentMibDataRefreshInterval=snmpAgentMibDataRefreshInterval, jmsPooledConnectionRuntimeName=jmsPooledConnectionRuntimeName, jmsServerRuntimeBytesPendingCount=jmsServerRuntimeBytesPendingCount, responseTimeRequestClassDeploymentOrder=responseTimeRequestClassDeploymentOrder, singleSignOnServicesAuthnRequestTimeout=singleSignOnServicesAuthnRequestTimeout, serverDebugMasterDeployer=serverDebugMasterDeployer, webServiceLogicalStoreRequestBufferingQueueJndiName=webServiceLogicalStoreRequestBufferingQueueJndiName, jmsComponentRuntimeName=jmsComponentRuntimeName, deploymentProgressObjectTargets=deploymentProgressObjectTargets, jmsBridgeDestinationDestinationType=jmsBridgeDestinationDestinationType, serverDebugDebugDescriptor=serverDebugDebugDescriptor, xmlRegistryTransformerFactory=xmlRegistryTransformerFactory, serverRuntimeOracleHome=serverRuntimeOracleHome, entityCacheCumulativeRuntimeIndex=entityCacheCumulativeRuntimeIndex, manAsyncReplicationRuntimeName=manAsyncReplicationRuntimeName, defaultFileStoreFileLockingEnabled=defaultFileStoreFileLockingEnabled, serverDebugDebugJTAPropagate=serverDebugDebugJTAPropagate, jmsDistributedDestinationParent=jmsDistributedDestinationParent, ejbLockingRuntimeLockManagerAccessCount=ejbLockingRuntimeLockManagerAccessCount, webAppComponentRuntimeSingleThreadedServletPoolSize=webAppComponentRuntimeSingleThreadedServletPoolSize, serverDebugClassChangeNotifier=serverDebugClassChangeNotifier, wseePortPolicyRuntimeName=wseePortPolicyRuntimeName, serverRuntimeSocketsOpenedTotalCount=serverRuntimeSocketsOpenedTotalCount, jmsPooledConnectionRuntimeType=jmsPooledConnectionRuntimeType, deploymentTaskRuntimeNotificationLevel=deploymentTaskRuntimeNotificationLevel, wldfFileArchiveRuntimeParent=wldfFileArchiveRuntimeParent, wseeOperationConfigurationRuntimeEntry=wseeOperationConfigurationRuntimeEntry, wlsMonitorNotification=wlsMonitorNotification, serverDebugDebugMessagingKernelBoot=serverDebugDebugMessagingKernelBoot, webserviceTimestampType=webserviceTimestampType, jdbcStoreDeletesPerBatchMaximum=jdbcStoreDeletesPerBatchMaximum, entityCacheCumulativeRuntimeTotalCurrentEntries=entityCacheCumulativeRuntimeTotalCurrentEntries, joltConnectionPoolMaximumPoolSize=joltConnectionPoolMaximumPoolSize, webserviceTokenHandlerObjectName=webserviceTokenHandlerObjectName, iiopDefaultCharCodeset=iiopDefaultCharCodeset, jmsComponentRuntimeEntry=jmsComponentRuntimeEntry, wseeOperationRuntimeInvocationCount=wseeOperationRuntimeInvocationCount, wlecConnectionPoolRuntimePoolState=wlecConnectionPoolRuntimePoolState, jmsProducerRuntimeName=jmsProducerRuntimeName, safConversationRuntimeQOS=safConversationRuntimeQOS, wldfFileArchiveRuntimeIndex=wldfFileArchiveRuntimeIndex, wtcRemoteTuxDomTuxedoGidKw=wtcRemoteTuxDomTuxedoGidKw, coherenceServerLifeCycleTaskRuntimeRunning=coherenceServerLifeCycleTaskRuntimeRunning, minThreadsConstraintRuntimeExecutingRequests=minThreadsConstraintRuntimeExecutingRequests, serverLifeCycleRuntimeState=serverLifeCycleRuntimeState, jdbcDataSourceRuntimeActiveConnectionsAverageCount=jdbcDataSourceRuntimeActiveConnectionsAverageCount, connectorConnectionRuntimeName=connectorConnectionRuntimeName, logMemoryBufferSeverity=logMemoryBufferSeverity, wtcRemoteTuxDomTable=wtcRemoteTuxDomTable, domainLibraryDeploymentPrincipalName=domainLibraryDeploymentPrincipalName, wlssnmpLogFilterSubsystemNames=wlssnmpLogFilterSubsystemNames, connectorConnectionPoolRuntimePoolName=connectorConnectionPoolRuntimePoolName, startupClassName=startupClassName, serverDebugDebugIIOPOTS=serverDebugDebugIIOPOTS, wldfInstrumentationRuntimeTable=wldfInstrumentationRuntimeTable, connectorInboundRuntimeState=connectorInboundRuntimeState, wldfWatchNotificationRuntimeObjectName=wldfWatchNotificationRuntimeObjectName, clusterPersistSessionsOnShutdown=clusterPersistSessionsOnShutdown, psAssemblyRuntimeObjectName=psAssemblyRuntimeObjectName, wldfDataAccessRuntimeLatestAvailableTimestamp=wldfDataAccessRuntimeLatestAvailableTimestamp, psAssemblyRuntimeIndex=psAssemblyRuntimeIndex, networkChannelOutgoingEnabled=networkChannelOutgoingEnabled, webPubSubRuntimeName=webPubSubRuntimeName, ejbPoolRuntimeDestroyedTotalCount=ejbPoolRuntimeDestroyedTotalCount, unixMachineIndex=unixMachineIndex, serverAdministrationPort=serverAdministrationPort, wldfInstrumentationRuntimeEntry=wldfInstrumentationRuntimeEntry, wlecConnectionRuntimePendingRequestCount=wlecConnectionRuntimePendingRequestCount, serverDebugDebugJMSCDS=serverDebugDebugJMSCDS, jmsDestCommonObjectName=jmsDestCommonObjectName, springViewRuntimeTable=springViewRuntimeTable, wlssnmpCounterMonitorMonitoredMBeanName=wlssnmpCounterMonitorMonitoredMBeanName, webServiceRequestBufferingQueueTable=webServiceRequestBufferingQueueTable, nodeManagerListenPort=nodeManagerListenPort, xmlParserSelectRegistryType=xmlParserSelectRegistryType, safAgentRuntimeBytesReceivedCount=safAgentRuntimeBytesReceivedCount, virtualHostKeepAliveEnabled=virtualHostKeepAliveEnabled, serverDebugDebugPathSvc=serverDebugDebugPathSvc, serviceMigrationDataRuntimeTable=serviceMigrationDataRuntimeTable, kodoQueryCompilationCacheRuntimeTotalCurrentEntries=kodoQueryCompilationCacheRuntimeTotalCurrentEntries, deploymentManagerObjectName=deploymentManagerObjectName, connectorComponentRuntimeActiveVersionId=connectorComponentRuntimeActiveVersionId, webAppContainerChangeSessionIDOnAuthentication=webAppContainerChangeSessionIDOnAuthentication, taskRuntimeBeginTime=taskRuntimeBeginTime, logFilterType=logFilterType, ejbContainerIndex=ejbContainerIndex, connectorConnectionPoolRuntimeShrinkingEnabled=connectorConnectionPoolRuntimeShrinkingEnabled, trapWatchSeverity=trapWatchSeverity, wlecConnectionPoolRuntimeIndex=wlecConnectionPoolRuntimeIndex, jmsPooledConnectionRuntimeNumUnavailable=jmsPooledConnectionRuntimeNumUnavailable, jmsServerRuntimePendingTransactions=jmsServerRuntimePendingTransactions, ejbContainerVerboseEJBDeploymentEnabled=ejbContainerVerboseEJBDeploymentEnabled, messagingBridgeParent=messagingBridgeParent, logDomainLogBroadcastSeverity=logDomainLogBroadcastSeverity, onsClientRuntimeTable=onsClientRuntimeTable, wseePortRuntimePolicyAttachmentSupport=wseePortRuntimePolicyAttachmentSupport, wseeClientPortRuntimeType=wseeClientPortRuntimeType, executeQueueRuntimeParent=executeQueueRuntimeParent, serverDebugDebugJTANamingStackTrace=serverDebugDebugJTANamingStackTrace, contextCaseType=contextCaseType, wldfHarvesterRuntimeCurrentSnapshotStartTime=wldfHarvesterRuntimeCurrentSnapshotStartTime, configurationPropertyEntry=configurationPropertyEntry, joltConnectionServiceRuntimeObjectName=joltConnectionServiceRuntimeObjectName, ejbPoolRuntimeObjectName=ejbPoolRuntimeObjectName, webServiceRuntimeHomePageHitCount=webServiceRuntimeHomePageHitCount, jmsDistributedDestinationMemberName=jmsDistributedDestinationMemberName, wanreplicationRuntimeSecondaryCount=wanreplicationRuntimeSecondaryCount, embeddedLDAPObjectName=embeddedLDAPObjectName, wldfWatchNotificationRuntimeTotalNotificationsPerformed=wldfWatchNotificationRuntimeTotalNotificationsPerformed, jmsRemoteEndpointRuntimeURL=jmsRemoteEndpointRuntimeURL, wldfServerDiagnosticDiagnosticDataArchiveType=wldfServerDiagnosticDiagnosticDataArchiveType, networkChannelSSLListenPortEnabled=networkChannelSSLListenPortEnabled, jmxRuntimeMBeanServerEnabled=jmxRuntimeMBeanServerEnabled, fileStoreMaxWindowBufferSize=fileStoreMaxWindowBufferSize, serverLifeCycleTaskRuntimeStatus=serverLifeCycleTaskRuntimeStatus, statefulEJBRuntimeTable=statefulEJBRuntimeTable, wtcLocalTuxDomRetryInterval=wtcLocalTuxDomRetryInterval, customResourceResourceClass=customResourceResourceClass, overloadProtectionFreeMemoryPercentHighThreshold=overloadProtectionFreeMemoryPercentHighThreshold, wseeClientPortRuntimePortName=wseeClientPortRuntimePortName, jmsSessionRuntimeMessagesSentCount=jmsSessionRuntimeMessagesSentCount, ejbComponentExtraEjbcOptions=ejbComponentExtraEjbcOptions, deploymentTaskRuntimeTask=deploymentTaskRuntimeTask, jdbcDataSourceTaskRuntimeStatus=jdbcDataSourceTaskRuntimeStatus, ejbCacheRuntimeEntry=ejbCacheRuntimeEntry, transactionNameRuntimeTransactionRolledBackAppTotalCount=transactionNameRuntimeTransactionRolledBackAppTotalCount, springApplicationContextRuntimeAverageGetBeanTime=springApplicationContextRuntimeAverageGetBeanTime, wtcImportTable=wtcImportTable, serverDebugDebugIIOPSecurity=serverDebugDebugIIOPSecurity, federationServicesTable=federationServicesTable, webServerRuntimeName=webServerRuntimeName, ejbTransactionRuntimeName=ejbTransactionRuntimeName, jtaRecoveryRuntimeRecoveredTransactionCompletionPercent=jtaRecoveryRuntimeRecoveredTransactionCompletionPercent, jMSDurableSubscriberRuntimeNoLocal=jMSDurableSubscriberRuntimeNoLocal, wldfHarvesterRuntimeSamplePeriod=wldfHarvesterRuntimeSamplePeriod, embeddedLDAPCacheSize=embeddedLDAPCacheSize, wsrmRemoteEndpointRuntimeBytesHighCount=wsrmRemoteEndpointRuntimeBytesHighCount, connectorComponentRuntimeType=connectorComponentRuntimeType, experimental=experimental, defaultFileStoreCacheDirectory=defaultFileStoreCacheDirectory, messagingBridgeAsyncEnabled=messagingBridgeAsyncEnabled, wseePortRuntimeName=wseePortRuntimeName, webServerAuthCookieEnabled=webServerAuthCookieEnabled, wldfImageRuntimeTable=wldfImageRuntimeTable, serverDebugDebugJMSSAF=serverDebugDebugJMSSAF, persistentStoreRuntimeAllocatedWindowBufferBytes=persistentStoreRuntimeAllocatedWindowBufferBytes, wseeV2RuntimeWebserviceDescriptionName=wseeV2RuntimeWebserviceDescriptionName, coherenceServerLifeCycleRuntimeTable=coherenceServerLifeCycleRuntimeTable, onsDaemonRuntimeHost=onsDaemonRuntimeHost, persistentStoreConnectionRuntimeType=persistentStoreConnectionRuntimeType, federationServicesIndex=federationServicesIndex, statefulEJBRuntimeType=statefulEJBRuntimeType, networkAccessPointEntry=networkAccessPointEntry, serverDebugDebugIIOPTunneling=serverDebugDebugIIOPTunneling, jmsConnectionRuntimeHostAddress=jmsConnectionRuntimeHostAddress, jmsRemoteEndpointRuntimeEntry=jmsRemoteEndpointRuntimeEntry, webAppContainerEntry=webAppContainerEntry, networkAccessPointName=networkAccessPointName, jdbcSystemResourceEntry=jdbcSystemResourceEntry, jdbcConnectionPoolRuntimeEntry=jdbcConnectionPoolRuntimeEntry, networkAccessPointProxyAddress=networkAccessPointProxyAddress, joltConnectionRuntimeLastAccessTime=joltConnectionRuntimeLastAccessTime, serverDebugDebugJTAGatewayStackTrace=serverDebugDebugJTAGatewayStackTrace, connectorComponentRuntimeSchema=connectorComponentRuntimeSchema, domainConsoleEnabled=domainConsoleEnabled, entityEJBRuntimeTable=entityEJBRuntimeTable, shutdownClassObjectName=shutdownClassObjectName, errorHandlingTable=errorHandlingTable, jmsMessageLogFileFileMinSize=jmsMessageLogFileFileMinSize, libraryRuntimeEntry=libraryRuntimeEntry, jmsMessageLogFileLogFileRotationDir=jmsMessageLogFileLogFileRotationDir, remoteSAFContextPassword=remoteSAFContextPassword, connectorInboundRuntimeTable=connectorInboundRuntimeTable, wldfDbstoreArchiveRuntimeDeletionCount=wldfDbstoreArchiveRuntimeDeletionCount, nonXAResourceRuntimeType=nonXAResourceRuntimeType, wtcPasswordLocalAccessPoint=wtcPasswordLocalAccessPoint, channelRuntimePublishedMessageCount=channelRuntimePublishedMessageCount, wsrmRemoteEndpointRuntimeLastTimeConnected=wsrmRemoteEndpointRuntimeLastTimeConnected, jmsVirtualDestinationObjectName=jmsVirtualDestinationObjectName, ejbCacheRuntimeIndex=ejbCacheRuntimeIndex, channelRuntimeType=channelRuntimeType, wseeClientOperationRuntimeDispatchTimeTotal=wseeClientOperationRuntimeDispatchTimeTotal, wseePortPolicyRuntimeObjectName=wseePortPolicyRuntimeObjectName, wseeClientRuntimeIndex=wseeClientRuntimeIndex, xmlRegistryIndex=xmlRegistryIndex, deploymentConfigurationRemoteDeployerEJBEnabled=deploymentConfigurationRemoteDeployerEJBEnabled, applicationRuntimeApplicationVersion=applicationRuntimeApplicationVersion, wsReliableDeliveryPolicyObjectName=wsReliableDeliveryPolicyObjectName, queryCacheRuntimeEntry=queryCacheRuntimeEntry, serverInterfaceAddress=serverInterfaceAddress, kodoQueryCacheRuntimeName=kodoQueryCacheRuntimeName, messagingBridgeType=messagingBridgeType, webAppComponentRuntimeStatus=webAppComponentRuntimeStatus, wseeClientOperationRuntimeExecutionTimeHigh=wseeClientOperationRuntimeExecutionTimeHigh, wldfDataRetirementByAgeRetirementPeriod=wldfDataRetirementByAgeRetirementPeriod, unicastMessagingRuntimeTotalGroupsCount=unicastMessagingRuntimeTotalGroupsCount, wseePortPolicyRuntimeAuthenticationSuccesses=wseePortPolicyRuntimeAuthenticationSuccesses, connectorConnectionPoolRuntimeCapacityIncrement=connectorConnectionPoolRuntimeCapacityIncrement, jtaMigratableTargetEntry=jtaMigratableTargetEntry, serverDebugDebugWTCJatmiEx=serverDebugDebugWTCJatmiEx, wlssnmpAgentDeploymentSNMPAccessForUserMBeansEnabled=wlssnmpAgentDeploymentSNMPAccessForUserMBeansEnabled, serverDebugDebugLibraries=serverDebugDebugLibraries, serverListenAddress=serverListenAddress, jmsConnectionConsumerObjectName=jmsConnectionConsumerObjectName, coherenceServerStartEntry=coherenceServerStartEntry, ejbPoolRuntimeTable=ejbPoolRuntimeTable, servletSessionRuntimeName=servletSessionRuntimeName, serverCompleteCOMMessageTimeout=serverCompleteCOMMessageTimeout, ejbCacheRuntimeCacheMissCount=ejbCacheRuntimeCacheMissCount, wlssnmpAgentDeploymentInformRetryInterval=wlssnmpAgentDeploymentInformRetryInterval)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", jmsComponentRuntimeDeploymentState=jmsComponentRuntimeDeploymentState, connectorConnectionPoolRuntimeNumWaiters=connectorConnectionPoolRuntimeNumWaiters, wldfDataRetirementByAgeRetirementTime=wldfDataRetirementByAgeRetirementTime, jmsSessionRuntimeName=jmsSessionRuntimeName, wlssnmpCounterMonitorEntry=wlssnmpCounterMonitorEntry, serverDebugDebugJpaProfile=serverDebugDebugJpaProfile, manAsyncReplicationRuntimeDetailedSecondariesDistribution=manAsyncReplicationRuntimeDetailedSecondariesDistribution, jmsPooledConnectionRuntimeHighestNumWaiters=jmsPooledConnectionRuntimeHighestNumWaiters, securityConfigurationConnectionLoggerEnabled=securityConfigurationConnectionLoggerEnabled, federationServicesSigningKeyAlias=federationServicesSigningKeyAlias, serverMaxT3MessageSize=serverMaxT3MessageSize, jrockitRuntimeTable=jrockitRuntimeTable, jmsPooledConnectionRuntimeCurrCapacity=jmsPooledConnectionRuntimeCurrCapacity, jmsServerRuntimeBytesThresholdTime=jmsServerRuntimeBytesThresholdTime, safAgentRuntimeMessagesPendingCount=safAgentRuntimeMessagesPendingCount, jMSDurableSubscriberRuntimeSelector=jMSDurableSubscriberRuntimeSelector, wseeMcRuntimeTable=wseeMcRuntimeTable, wldfDataRetirementByAgeEntry=wldfDataRetirementByAgeEntry, jmsSAFMessageLogFileFileName=jmsSAFMessageLogFileFileName, clusterRuntimeActiveSingletonServices=clusterRuntimeActiveSingletonServices, wseeClientPortRuntimePoolTotalPooledClientTakeCount=wseeClientPortRuntimePoolTotalPooledClientTakeCount, jtaRuntimeEntry=jtaRuntimeEntry, snmpAgentParent=snmpAgentParent, workManagerDeploymentOrder=workManagerDeploymentOrder, serverDebugDebugConnectorService=serverDebugDebugConnectorService, springViewResolverRuntimeIndex=springViewResolverRuntimeIndex, jrockitRuntimeGcAlgorithm=jrockitRuntimeGcAlgorithm, persistentStoreRuntimeObjectName=persistentStoreRuntimeObjectName, serverDebugDebugJAXPIncludeTime=serverDebugDebugJAXPIncludeTime, sslServerKeyFileName=sslServerKeyFileName, springBeanDefinitionRuntimeRole=springBeanDefinitionRuntimeRole, serverRuntimeMiddlewareHome=serverRuntimeMiddlewareHome, clusterJobSchedulerTableName=clusterJobSchedulerTableName, snmpAgentCommunityBasedAccessEnabled=snmpAgentCommunityBasedAccessEnabled, jmsDestinationRuntimeProductionPausedState=jmsDestinationRuntimeProductionPausedState, kernelCompleteCOMMessageTimeout=kernelCompleteCOMMessageTimeout, serverDebugDebugDRSMessages=serverDebugDebugDRSMessages, safRemoteEndpointRuntimeMessagesHighCount=safRemoteEndpointRuntimeMessagesHighCount, mailSessionRuntimeType=mailSessionRuntimeType, remoteSAFContextEntry=remoteSAFContextEntry, clusterRuntimeFragmentsReceivedCount=clusterRuntimeFragmentsReceivedCount, wseePortRuntimeType=wseePortRuntimeType, nodeManagerTable=nodeManagerTable, domainParent=domainParent, wldfSystemResourceDescriptorFileName=wldfSystemResourceDescriptorFileName, webAppContainerFilterDispatchedRequestsEnabled=webAppContainerFilterDispatchedRequestsEnabled, serverDebugDebugDiagnosticInstrumentationActions=serverDebugDebugDiagnosticInstrumentationActions, serverServerVersion=serverServerVersion, ejbPoolRuntimeIdleBeansCount=ejbPoolRuntimeIdleBeansCount, connectorConnectionPoolRuntimeJNDIName=connectorConnectionPoolRuntimeJNDIName, wldfWatchNotificationRuntimeAverageEventDataWatchEvaluationTime=wldfWatchNotificationRuntimeAverageEventDataWatchEvaluationTime, serverDebugDebugJNDI=serverDebugDebugJNDI, jmsSessionPoolAcknowledgeMode=jmsSessionPoolAcknowledgeMode, wtcLocalTuxDomType=wtcLocalTuxDomType, jmsServerProductionPausedAtStartup=jmsServerProductionPausedAtStartup, ejbTimerRuntimeTimeoutCount=ejbTimerRuntimeTimeoutCount, springBeanDefinitionRuntimeType=springBeanDefinitionRuntimeType, jmsDestinationRuntimeMessagesThresholdTime=jmsDestinationRuntimeMessagesThresholdTime, contextRequestClassIndex=contextRequestClassIndex, databaseLessLeasingBasisTable=databaseLessLeasingBasisTable, webServiceJmsConnectionFactory=webServiceJmsConnectionFactory, wldfImageCreationTaskRuntimeType=wldfImageCreationTaskRuntimeType, springApplicationContextRuntimeCustomScopeNames=springApplicationContextRuntimeCustomScopeNames, adminConsoleObjectName=adminConsoleObjectName, serverDebugDebugSecuritySAML2Lib=serverDebugDebugSecuritySAML2Lib, wtcServerIndex=wtcServerIndex, wlecConnectionServiceRuntimeType=wlecConnectionServiceRuntimeType, xmlEntitySpecRegistryName=xmlEntitySpecRegistryName, safAgentBytesThresholdLow=safAgentBytesThresholdLow, jvmRuntimeIndex=jvmRuntimeIndex, ejbRuntimeObjectName=ejbRuntimeObjectName, safRemoteEndpointRuntimeMessagesCurrentCount=safRemoteEndpointRuntimeMessagesCurrentCount, entityCacheCurrentStateRuntimeIndex=entityCacheCurrentStateRuntimeIndex, messageDrivenEJBRuntimeObjectName=messageDrivenEJBRuntimeObjectName, wldfWlstoreArchiveRuntimeObjectName=wldfWlstoreArchiveRuntimeObjectName, serverReplicationGroup=serverReplicationGroup, serverDebugDebugStoreIOLogicalBoot=serverDebugDebugStoreIOLogicalBoot, jvmRuntimeHeapSizeMax=jvmRuntimeHeapSizeMax, connectorConnectionPoolRuntimeEntry=connectorConnectionPoolRuntimeEntry, clusterClusterType=clusterClusterType, domainLibraryValidateDDSecurityData=domainLibraryValidateDDSecurityData, singleSignOnServicesTransportLayerSecurityKeyAlias=singleSignOnServicesTransportLayerSecurityKeyAlias, wtcExportResourceName=wtcExportResourceName, virtualDestinationEntry=virtualDestinationEntry, jmsConsumerRuntimeType=jmsConsumerRuntimeType, wldfSystemResourceDeploymentPrincipalName=wldfSystemResourceDeploymentPrincipalName, connectorComponentRuntimeSpecVersion=connectorComponentRuntimeSpecVersion, clusterServiceAgeThresholdSeconds=clusterServiceAgeThresholdSeconds, entityCacheRuntimeTotalPersistentCurrentEntries=entityCacheRuntimeTotalPersistentCurrentEntries, springBeanDefinitionRuntimeBeanId=springBeanDefinitionRuntimeBeanId, jmsServerMaximumMessageSize=jmsServerMaximumMessageSize, messagingBridgeName=messagingBridgeName, migratableServiceCoordinatorRuntimeTable=migratableServiceCoordinatorRuntimeTable, wseeClientPortRuntimeEntry=wseeClientPortRuntimeEntry, adminConsoleTable=adminConsoleTable, deploymentManagerTable=deploymentManagerTable, webServerTable=webServerTable, jdbcDataSourceRuntimeCurrCapacityHighCount=jdbcDataSourceRuntimeCurrCapacityHighCount, remoteSAFContextType=remoteSAFContextType, taskRuntimeRunning=taskRuntimeRunning, ejbComponentExtraRmicOptions=ejbComponentExtraRmicOptions, deploymentProgressObjectName=deploymentProgressObjectName, webServiceResponseBufferingQueueObjectName=webServiceResponseBufferingQueueObjectName, wseeClientOperationRuntimeEntry=wseeClientOperationRuntimeEntry, coherenceServerLifeCycleTaskRuntimeServerName=coherenceServerLifeCycleTaskRuntimeServerName, trapLogSeverity=trapLogSeverity, wlssnmpGaugeMonitorMonitoredAttributeName=wlssnmpGaugeMonitorMonitoredAttributeName, wtctBridgeGlobalAllowNonStandardTypes=wtctBridgeGlobalAllowNonStandardTypes, serverDebugDebugRAPoolVerbose=serverDebugDebugRAPoolVerbose, migratableServiceCoordinatorRuntimeType=migratableServiceCoordinatorRuntimeType, cacheName=cacheName, networkAccessPointChannelWeight=networkAccessPointChannelWeight, deploymentConfigurationName=deploymentConfigurationName, jtaRecoveryRuntimeObjectName=jtaRecoveryRuntimeObjectName, entityCacheCumulativeRuntimeAvgPerEntryMemorySize=entityCacheCumulativeRuntimeAvgPerEntryMemorySize, xmlParserSelectRegistryTransformerFactory=xmlParserSelectRegistryTransformerFactory, trapALSBAlertSeverity=trapALSBAlertSeverity, ejbContainerType=ejbContainerType, jmsSAFMessageLogFileTable=jmsSAFMessageLogFileTable, wldfSystemResourceObjectName=wldfSystemResourceObjectName, serverLifeCycleTaskRuntimeObjectName=serverLifeCycleTaskRuntimeObjectName, onsDaemonRuntimeType=onsDaemonRuntimeType, startupClassTable=startupClassTable, wlssnmpStringMonitorMonitoredMBeanType=wlssnmpStringMonitorMonitoredMBeanType, wtcLocalTuxDomMinEncryptBits=wtcLocalTuxDomMinEncryptBits, jdbcDataSourceTaskRuntimeName=jdbcDataSourceTaskRuntimeName, networkAccessPointCompleteMessageTimeout=networkAccessPointCompleteMessageTimeout, cacheStoreWorkManager=cacheStoreWorkManager, jmsServerRuntimePagingAllocatedWindowBufferBytes=jmsServerRuntimePagingAllocatedWindowBufferBytes, jtaMigratableTargetType=jtaMigratableTargetType, safRemoteEndpointRuntimeMessagesThresholdTime=safRemoteEndpointRuntimeMessagesThresholdTime, wtcRemoteTuxDomKeepAliveWait=wtcRemoteTuxDomKeepAliveWait, serverStartupTimeout=serverStartupTimeout, connectorConnectionRuntimeReserveDurationTime=connectorConnectionRuntimeReserveDurationTime, serverStartTable=serverStartTable, minThreadsConstraintRuntimeOutOfOrderExecutionCount=minThreadsConstraintRuntimeOutOfOrderExecutionCount, httpProxyType=httpProxyType, sslSSLRejectionLoggingEnabled=sslSSLRejectionLoggingEnabled, wseeOperationRuntimePolicySubjectName=wseeOperationRuntimePolicySubjectName, connectorConnectionRuntimeObjectName=connectorConnectionRuntimeObjectName, serverStartObjectName=serverStartObjectName, jtaMigratableTargetIndex=jtaMigratableTargetIndex, wseePolicyRuntimeType=wseePolicyRuntimeType, iiopObjectName=iiopObjectName, virtualHostType=virtualHostType, wlecConnectionServiceRuntimeName=wlecConnectionServiceRuntimeName, joltConnectionRuntimeObjectName=joltConnectionRuntimeObjectName, clusterName=clusterName, queryCacheRuntimeParent=queryCacheRuntimeParent, serverDebugDebugWTCConfig=serverDebugDebugWTCConfig, minThreadsConstraintRuntimeMaxWaitTime=minThreadsConstraintRuntimeMaxWaitTime, webserviceTokenHandlerName=webserviceTokenHandlerName, joltConnectionPoolType=joltConnectionPoolType, entityEJBRuntimeEJBName=entityEJBRuntimeEJBName, wlecConnectionPoolDeploymentOrder=wlecConnectionPoolDeploymentOrder, jmxPlatformMBeanServerEnabled=jmxPlatformMBeanServerEnabled, wldfImageCreationTaskRuntimeName=wldfImageCreationTaskRuntimeName, wtcPasswordLocalPasswordIV=wtcPasswordLocalPasswordIV, webserviceSecurityIndex=webserviceSecurityIndex, wsrmRemoteEndpointRuntimeMessagesThresholdTime=wsrmRemoteEndpointRuntimeMessagesThresholdTime, connectorConnectionPoolRuntimeFreePoolSizeHighWaterMark=connectorConnectionPoolRuntimeFreePoolSizeHighWaterMark, foreignJNDIProviderType=foreignJNDIProviderType, jdbcStoreTable=jdbcStoreTable, ejbComponentForceGeneration=ejbComponentForceGeneration, jdbcDataSourceRuntimePrepStmtCacheAccessCount=jdbcDataSourceRuntimePrepStmtCacheAccessCount, jdbcDataSourceRuntimeFailuresToReconnectCount=jdbcDataSourceRuntimeFailuresToReconnectCount, virtualHostSendServerHeaderEnabled=virtualHostSendServerHeaderEnabled, jmsServerRuntimeParent=jmsServerRuntimeParent, jrockitRuntimeParallel=jrockitRuntimeParallel, connectorConnectionPoolRuntimeConnectionsRejectedTotalCount=connectorConnectionPoolRuntimeConnectionsRejectedTotalCount, jtaBeforeCompletionIterationLimit=jtaBeforeCompletionIterationLimit, wldfWatchNotificationRuntimeTotalSNMPNotificationsPerformed=wldfWatchNotificationRuntimeTotalSNMPNotificationsPerformed, serverDebugDebugSAFVerbose=serverDebugDebugSAFVerbose, jdbcDataSourceRuntimeTable=jdbcDataSourceRuntimeTable, networkAccessPointParent=networkAccessPointParent, messageDrivenEJBRuntimeDestination=messageDrivenEJBRuntimeDestination, wlssnmpAgentRuntimeServerStopTrapCount=wlssnmpAgentRuntimeServerStopTrapCount, interceptionComponentRuntimeName=interceptionComponentRuntimeName, deploymentTaskRuntimeEntry=deploymentTaskRuntimeEntry, wldfServerDiagnosticTable=wldfServerDiagnosticTable, domainLibraryEntry=domainLibraryEntry, jmsSAFMessageLogFileRotationType=jmsSAFMessageLogFileRotationType, wldfImageCreationTaskRuntimeEndTime=wldfImageCreationTaskRuntimeEndTime, jmsDestinationParent=jmsDestinationParent, nonXAResourceRuntimeTable=nonXAResourceRuntimeTable, ejbTimerRuntimeObjectName=ejbTimerRuntimeObjectName, nodeManagerAdapterVersion=nodeManagerAdapterVersion, domainLibraryAbsolutePlanDir=domainLibraryAbsolutePlanDir, jdbcOracleDataSourceRuntimeHighestNumUnavailable=jdbcOracleDataSourceRuntimeHighestNumUnavailable, wldfDbstoreArchiveRuntimeRecordSeekTime=wldfDbstoreArchiveRuntimeRecordSeekTime, transactionNameRuntimeTransactionRolledBackTotalCount=transactionNameRuntimeTransactionRolledBackTotalCount, jmsMessageLogFileBufferSizeKB=jmsMessageLogFileBufferSizeKB, servletRuntimeParent=servletRuntimeParent, entityCacheRuntimeType=entityCacheRuntimeType, entityCacheCurrentStateRuntimeType=entityCacheCurrentStateRuntimeType, coherenceServerStartArguments=coherenceServerStartArguments, embeddedLDAPCacheEnabled=embeddedLDAPCacheEnabled, serverSecurityRuntimeType=serverSecurityRuntimeType, jmsServerRuntimeMessagesPagedOutTotalCount=jmsServerRuntimeMessagesPagedOutTotalCount, webServerRuntimeObjectName=webServerRuntimeObjectName, clusterSecureReplicationEnabled=clusterSecureReplicationEnabled, entityCacheCumulativeRuntimeTotalItemsMemoryPurged=entityCacheCumulativeRuntimeTotalItemsMemoryPurged, comTable=comTable, jdbcConnectionPoolRuntimeActiveConnectionsHighCount=jdbcConnectionPoolRuntimeActiveConnectionsHighCount, jmsBridgeDestinationParent=jmsBridgeDestinationParent, nodeManagerIndex=nodeManagerIndex, serverDebugDebugJMSMessagePath=serverDebugDebugJMSMessagePath, jobRuntimeName=jobRuntimeName, wldfAccessRuntimeName=wldfAccessRuntimeName, webPubSubRuntimeTable=webPubSubRuntimeTable, comVerboseLoggingEnabled=comVerboseLoggingEnabled, networkAccessPointUseFastSerialization=networkAccessPointUseFastSerialization, wldfImageRuntimeEntry=wldfImageRuntimeEntry, networkAccessPointClusterAddress=networkAccessPointClusterAddress, connectorInboundRuntimeEntry=connectorInboundRuntimeEntry, cacheStoreTable=cacheStoreTable, fileStoreObjectName=fileStoreObjectName, serverUse81StyleExecuteQueues=serverUse81StyleExecuteQueues, serverAdminReconnectIntervalSeconds=serverAdminReconnectIntervalSeconds, serverDebugDebugJMSJDBCScavengeOnFlush=serverDebugDebugJMSJDBCScavengeOnFlush, wlssnmpAgentRuntimeGaugeMonitorTrapCount=wlssnmpAgentRuntimeGaugeMonitorTrapCount, domainRuntimeName=domainRuntimeName, jmsDestinationRuntimeEntry=jmsDestinationRuntimeEntry, webAppComponentRuntimeServletReloadCheckSecs=webAppComponentRuntimeServletReloadCheckSecs, jmsServerPagingMinWindowBufferSize=jmsServerPagingMinWindowBufferSize, serverMaxCOMMessageSize=serverMaxCOMMessageSize, cacheExpirationTTL=cacheExpirationTTL, jtaMigratableTargetTable=jtaMigratableTargetTable, kernelReverseDNSAllowed=kernelReverseDNSAllowed, domainName=domainName, serverDebugDebugJTAXA=serverDebugDebugJTAXA, ejbComponentTmpPath=ejbComponentTmpPath, jmsRemoteEndpointRuntimeDowntimeHigh=jmsRemoteEndpointRuntimeDowntimeHigh, serverDebugDebugIIOPStartup=serverDebugDebugIIOPStartup, errorHandlingType=errorHandlingType, consoleRuntimeObjectName=consoleRuntimeObjectName, pageFlowRuntimeType=pageFlowRuntimeType, wlssnmpGaugeMonitorType=wlssnmpGaugeMonitorType, jmsPooledConnectionRuntimeMaxCapacity=jmsPooledConnectionRuntimeMaxCapacity, securityIndex=securityIndex, serverStartName=serverStartName, entityCacheCurrentStateRuntimeObjectName=entityCacheCurrentStateRuntimeObjectName, ejbTransactionRuntimeObjectName=ejbTransactionRuntimeObjectName, jmsServerRuntimeMessagesPagedInTotalCount=jmsServerRuntimeMessagesPagedInTotalCount, jrockitRuntimeThreadStackDump=jrockitRuntimeThreadStackDump, singleSignOnServicesIdentityProviderPOSTBindingEnabled=singleSignOnServicesIdentityProviderPOSTBindingEnabled, jmsVirtualDestinationTable=jmsVirtualDestinationTable, joltConnectionRuntimeErrorCount=joltConnectionRuntimeErrorCount, safAgentRuntimeMessagesReceivedCount=safAgentRuntimeMessagesReceivedCount, jmsDestinationRuntimeDestinationType=jmsDestinationRuntimeDestinationType, bridgeDestinationAdapterJNDIName=bridgeDestinationAdapterJNDIName, jmxDomainMBeanServerEnabled=jmxDomainMBeanServerEnabled, serverDebugDebugJTALLR=serverDebugDebugJTALLR, jmsBridgeDestinationTable=jmsBridgeDestinationTable)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", jmxObjectName=jmxObjectName, kodoDataCacheRuntimeStatistics=kodoDataCacheRuntimeStatistics, iiopUseJavaSerialization=iiopUseJavaSerialization, wldfHarvesterRuntimeName=wldfHarvesterRuntimeName, wlecConnectionPoolRuntimeSecurityContextPropagation=wlecConnectionPoolRuntimeSecurityContextPropagation, connectorConnectionPoolRuntimeConnectorEisType=connectorConnectionPoolRuntimeConnectorEisType, serverChannelRuntimeAcceptCount=serverChannelRuntimeAcceptCount, domainTable=domainTable, jmsServerRuntimeSessionPoolsTotalCount=jmsServerRuntimeSessionPoolsTotalCount, serverDebugDebugClassRedef=serverDebugDebugClassRedef, trapMonitorType=trapMonitorType, workManagerRuntimeStuckThreadCount=workManagerRuntimeStuckThreadCount, wtctBridgeRedirectSourceName=wtctBridgeRedirectSourceName, ejbCacheRuntimeParent=ejbCacheRuntimeParent, queryCacheRuntimeObjectName=queryCacheRuntimeObjectName, selfTuningTable=selfTuningTable, minThreadsConstraintEntry=minThreadsConstraintEntry, virtualHostDefaultWebAppContextRoot=virtualHostDefaultWebAppContextRoot, applicationRuntimeEntry=applicationRuntimeEntry, contextRequestClassEntry=contextRequestClassEntry, selfTuningType=selfTuningType, webserviceCredentialProviderTable=webserviceCredentialProviderTable, psAssemblyRuntimeEntry=psAssemblyRuntimeEntry, webServiceRuntimeTable=webServiceRuntimeTable, servletRuntimeEntry=servletRuntimeEntry, snmpAgentSNMPPort=snmpAgentSNMPPort, connectorConnectionPoolRuntimeShrinkCountDownTime=connectorConnectionPoolRuntimeShrinkCountDownTime, virtualDestinationDeploymentOrder=virtualDestinationDeploymentOrder, serverFailureTriggerMaxStuckThreadTime=serverFailureTriggerMaxStuckThreadTime, wldfWatchNotificationRuntimeMaximumLogWatchEvaluationTime=wldfWatchNotificationRuntimeMaximumLogWatchEvaluationTime, kernelNativeIOEnabled=kernelNativeIOEnabled, wseeClientOperationRuntimeResponseTimeHigh=wseeClientOperationRuntimeResponseTimeHigh, kodoQueryCacheRuntimeTotalCurrentEntries=kodoQueryCacheRuntimeTotalCurrentEntries, maxThreadsConstraintIndex=maxThreadsConstraintIndex, safAgentRuntimePausedForForwarding=safAgentRuntimePausedForForwarding, jmsSessionRuntimeObjectName=jmsSessionRuntimeObjectName, safRemoteEndpointRuntimeBytesCurrentCount=safRemoteEndpointRuntimeBytesCurrentCount, jmsPooledConnectionRuntimeAverageReserved=jmsPooledConnectionRuntimeAverageReserved, clusterRuntimePrimaryCount=clusterRuntimePrimaryCount, connectorServiceRuntimeParent=connectorServiceRuntimeParent, serverDebugDebugJDBCRMI=serverDebugDebugJDBCRMI, messagingBridgeDurabilityEnabled=messagingBridgeDurabilityEnabled, singleSignOnServicesPassive=singleSignOnServicesPassive, webServiceReliabilitySequenceExpiration=webServiceReliabilitySequenceExpiration, trapWatchName=trapWatchName, wldfWlstoreArchiveRuntimeRecordSeekTime=wldfWlstoreArchiveRuntimeRecordSeekTime, serverIIOPTxMechanism=serverIIOPTxMechanism, joltConnectionPoolTable=joltConnectionPoolTable, wlecConnectionRuntimeInTransaction=wlecConnectionRuntimeInTransaction, wsrmRemoteEndpointRuntimeDowntimeHigh=wsrmRemoteEndpointRuntimeDowntimeHigh, wseeV2RuntimeImplementationType=wseeV2RuntimeImplementationType, wsReliableDeliveryPolicyTable=wsReliableDeliveryPolicyTable, appRuntimeStateRuntimeType=appRuntimeStateRuntimeType, federationServicesAssertionRetrievalURIs=federationServicesAssertionRetrievalURIs, jdbcDataSourceRuntimeWaitingForConnectionSuccessTotal=jdbcDataSourceRuntimeWaitingForConnectionSuccessTotal, jmsRuntimeIndex=jmsRuntimeIndex, serverJavaCompiler=serverJavaCompiler, wsReliableDeliveryPolicyDefaultRetryCount=wsReliableDeliveryPolicyDefaultRetryCount, serviceMigrationDataRuntimeClusterName=serviceMigrationDataRuntimeClusterName, virtualHostDeploymentOrder=virtualHostDeploymentOrder, jtaRuntimeTransactionRolledBackResourceTotalCount=jtaRuntimeTransactionRolledBackResourceTotalCount, psAssemblyRuntimeType=psAssemblyRuntimeType, ejbLockingRuntimeTable=ejbLockingRuntimeTable, entityCacheCumulativeRuntimeTotalNumberMemoryPurges=entityCacheCumulativeRuntimeTotalNumberMemoryPurges, taskRuntimeName=taskRuntimeName, connectorConnectionPoolRuntimeMaxIdleTime=connectorConnectionPoolRuntimeMaxIdleTime, jdbcOracleDataSourceRuntimeVersionJDBCDriver=jdbcOracleDataSourceRuntimeVersionJDBCDriver, clusterRuntimeSecondaryServerDetails=clusterRuntimeSecondaryServerDetails, wtctBridgeRedirectMetaDataFile=wtctBridgeRedirectMetaDataFile, clusterRuntimeResendRequestsCount=clusterRuntimeResendRequestsCount, securityConfigurationTable=securityConfigurationTable, trapLogTransactionId=trapLogTransactionId, wldfDataAccessRuntimeTimestampAvailable=wldfDataAccessRuntimeTimestampAvailable, webServerLogBufferSizeKB=webServerLogBufferSizeKB, jmsSessionPoolRuntimeParent=jmsSessionPoolRuntimeParent, jrockitRuntimeParent=jrockitRuntimeParent, jtaRecoveryRuntimeInitialRecoveredTransactionTotalCount=jtaRecoveryRuntimeInitialRecoveredTransactionTotalCount, connectorServiceRuntimeEntry=connectorServiceRuntimeEntry, bridgeDestinationObjectName=bridgeDestinationObjectName, entityCacheCurrentStateRuntimeTotalTransientCurrentEntries=entityCacheCurrentStateRuntimeTotalTransientCurrentEntries, jmsMessageLogFileNumberOfFilesLimited=jmsMessageLogFileNumberOfFilesLimited, jmsSAFMessageLogFileDateFormatPattern=jmsSAFMessageLogFileDateFormatPattern, jmsSessionRuntimeProducersHighCount=jmsSessionRuntimeProducersHighCount, wldfInstrumentationRuntimeName=wldfInstrumentationRuntimeName, jdbcConnectionPoolRuntimeHighestNumAvailable=jdbcConnectionPoolRuntimeHighestNumAvailable, springViewResolverRuntimeResolveViewNameCount=springViewResolverRuntimeResolveViewNameCount, owsmSecurityPolicyRuntimeEntry=owsmSecurityPolicyRuntimeEntry, wtctBridgeGlobalJmsToTuxPriorityMap=wtctBridgeGlobalJmsToTuxPriorityMap, cacheTable=cacheTable, xmlEntityCacheMaxSize=xmlEntityCacheMaxSize, xmlRegistryDocumentBuilderFactory=xmlRegistryDocumentBuilderFactory, singleSignOnServicesWantTransportLayerSecurityClientAtn=singleSignOnServicesWantTransportLayerSecurityClientAtn, webserviceSecurityTokenType=webserviceSecurityTokenType, logRotationTime=logRotationTime, jobSchedulerRuntimeIndex=jobSchedulerRuntimeIndex, libraryRuntimeType=libraryRuntimeType, domainProductionModeEnabled=domainProductionModeEnabled, serverPreferredSecondaryGroup=serverPreferredSecondaryGroup, serverRestartDelaySeconds=serverRestartDelaySeconds, jmxType=jmxType, jmsSessionPoolEntry=jmsSessionPoolEntry, jMSDurableSubscriberRuntimeObjectName=jMSDurableSubscriberRuntimeObjectName, jtaMigratableTargetObjectName=jtaMigratableTargetObjectName, pathServiceDeploymentOrder=pathServiceDeploymentOrder, clusterIndex=clusterIndex, bridgeDestinationEntry=bridgeDestinationEntry, ejbComponentRuntimeDeploymentState=ejbComponentRuntimeDeploymentState, embeddedLDAPBackupCopies=embeddedLDAPBackupCopies, jmsInteropModuleDeploymentPrincipalName=jmsInteropModuleDeploymentPrincipalName, messagingBridgeIdleTimeMaximum=messagingBridgeIdleTimeMaximum, jmxPlatformMBeanServerUsed=jmxPlatformMBeanServerUsed, trapALSBAlertServerName=trapALSBAlertServerName, defaultFileStoreDirectory=defaultFileStoreDirectory, serverLifeCycleTaskRuntimeTable=serverLifeCycleTaskRuntimeTable, connectorServiceRuntimeObjectName=connectorServiceRuntimeObjectName, statefulEJBRuntimeEntry=statefulEJBRuntimeEntry, jobRuntimeID=jobRuntimeID, jdbcDataSourceRuntimeWaitSecondsHighCount=jdbcDataSourceRuntimeWaitSecondsHighCount, wlssnmpCounterMonitorMonitoredMBeanType=wlssnmpCounterMonitorMonitoredMBeanType, jmsDestinationRuntimeMessagesHighCount=jmsDestinationRuntimeMessagesHighCount, jtaRuntimeRegisteredResourceNames=jtaRuntimeRegisteredResourceNames, clusterMulticastDataEncryption=clusterMulticastDataEncryption, serverDebugDebugJMXRuntime=serverDebugDebugJMXRuntime, maxThreadsConstraintRuntimeExecutingRequests=maxThreadsConstraintRuntimeExecutingRequests, entityEJBRuntimeEntry=entityEJBRuntimeEntry, cacheTransactionIndex=cacheTransactionIndex, wtcRemoteTuxDomMaxRetries=wtcRemoteTuxDomMaxRetries, comEntry=comEntry, mailSessionType=mailSessionType, jmsConsumerRuntimeSubscriptionSharingPolicy=jmsConsumerRuntimeSubscriptionSharingPolicy, wldfWatchJMXNotificationRuntimeObjectName=wldfWatchJMXNotificationRuntimeObjectName, webServicePhysicalStoreName=webServicePhysicalStoreName, wldfFileArchiveRuntimeName=wldfFileArchiveRuntimeName, foreignJNDILinkEntry=foreignJNDILinkEntry, wlssnmpLogFilterMessageSubstring=wlssnmpLogFilterMessageSubstring, logType=logType, wtctBridgeRedirectReplyQ=wtctBridgeRedirectReplyQ, entityCacheCurrentStateRuntimeParent=entityCacheCurrentStateRuntimeParent, httpProxyHealthCheckInterval=httpProxyHealthCheckInterval, wlssnmpProxyObjectName=wlssnmpProxyObjectName, cacheLoaderCustomLoader=cacheLoaderCustomLoader, wseeV2RuntimeObjectName=wseeV2RuntimeObjectName, bridgeDestinationCommonTable=bridgeDestinationCommonTable, wldfDbstoreArchiveRuntimeLastDataRetirementStartTime=wldfDbstoreArchiveRuntimeLastDataRetirementStartTime, jmsRuntimeTable=jmsRuntimeTable, serverDebugDebugJMSCommon=serverDebugDebugJMSCommon, jtaTwoPhaseEnabled=jtaTwoPhaseEnabled, singleSignOnServicesReplicatedCacheEnabled=singleSignOnServicesReplicatedCacheEnabled, coherenceServerRestartDelaySeconds=coherenceServerRestartDelaySeconds, wtctBridgeGlobalUserId=wtctBridgeGlobalUserId, ejbComponentIndex=ejbComponentIndex, wanreplicationRuntimeEntry=wanreplicationRuntimeEntry, xmlEntitySpecRegistryEntityURI=xmlEntitySpecRegistryEntityURI, webserviceSecurityTable=webserviceSecurityTable, serverDebugDebugJNDIFactories=serverDebugDebugJNDIFactories, wseeOperationRuntimeResponseTimeLow=wseeOperationRuntimeResponseTimeLow, queryCacheRuntimeCacheMissByBeanEvictionCount=queryCacheRuntimeCacheMissByBeanEvictionCount, transactionNameRuntimeTransactionCommittedTotalCount=transactionNameRuntimeTransactionCommittedTotalCount, serverLifeCycleRuntimeName=serverLifeCycleRuntimeName, kernelMaxT3MessageSize=kernelMaxT3MessageSize, taskRuntimeEndTime=taskRuntimeEndTime, logFilterObjectName=logFilterObjectName, springTransactionTemplateRuntimeName=springTransactionTemplateRuntimeName, wldfDbstoreArchiveRuntimeTable=wldfDbstoreArchiveRuntimeTable, ejbRuntimeType=ejbRuntimeType, snmpAgentIndex=snmpAgentIndex, xmlEntitySpecRegistryCacheTimeoutInterval=xmlEntitySpecRegistryCacheTimeoutInterval, wtcLocalTuxDomBlockTime=wtcLocalTuxDomBlockTime, trapALSBAlertAnnotation=trapALSBAlertAnnotation, networkChannelParent=networkChannelParent, webAppContainerWAPEnabled=webAppContainerWAPEnabled, workManagerTable=workManagerTable, wseeRuntimeTable=wseeRuntimeTable, domainAdministrationMBeanAuditingEnabled=domainAdministrationMBeanAuditingEnabled, wlssnmpCounterMonitorName=wlssnmpCounterMonitorName, clusterRuntimeObjectName=clusterRuntimeObjectName, wldfFileArchiveRuntimeRetrievedRecordCount=wldfFileArchiveRuntimeRetrievedRecordCount, serverIgnoreSessionsDuringShutdown=serverIgnoreSessionsDuringShutdown, springTransactionTemplateRuntimeTable=springTransactionTemplateRuntimeTable, wtcPasswordRemotePassword=wtcPasswordRemotePassword, connectorConnectionPoolRuntimeConnectionProfilingEnabled=connectorConnectionPoolRuntimeConnectionProfilingEnabled, wlssnmpAttributeChangeObjectName=wlssnmpAttributeChangeObjectName, webServiceResponseBufferingQueueConnectionFactoryJndiName=webServiceResponseBufferingQueueConnectionFactoryJndiName, jmsServerRuntimeObjectName=jmsServerRuntimeObjectName, springBeanDefinitionRuntimeAbstract=springBeanDefinitionRuntimeAbstract, capacityType=capacityType, wldfHarvesterRuntimeCurrentSampleTimeAnOutlier=wldfHarvesterRuntimeCurrentSampleTimeAnOutlier, entityCacheCumulativeRuntimeAvgPercentPersistent=entityCacheCumulativeRuntimeAvgPercentPersistent, connectorComponentRuntimeParent=connectorComponentRuntimeParent, ejbContainerObjectName=ejbContainerObjectName, wldfServerDiagnosticDiagnosticStoreBlockSize=wldfServerDiagnosticDiagnosticStoreBlockSize, webAppComponentAuthRealmName=webAppComponentAuthRealmName, serverKeyStores=serverKeyStores, wlecConnectionPoolIndex=wlecConnectionPoolIndex, messagingBridgeQualityOfService=messagingBridgeQualityOfService, selfTuningEntry=selfTuningEntry, jmsRemoteEndpointRuntimeUptimeTotal=jmsRemoteEndpointRuntimeUptimeTotal, logBroadcasterRuntimeObjectName=logBroadcasterRuntimeObjectName, bridgeDestinationCommonClasspath=bridgeDestinationCommonClasspath, webServerFrontendHTTPSPort=webServerFrontendHTTPSPort, messageDrivenControlEJBRuntimeObjectName=messageDrivenControlEJBRuntimeObjectName, webServiceReliabilityName=webServiceReliabilityName, jdbcConnectionPoolRuntimeObjectName=jdbcConnectionPoolRuntimeObjectName, jdbcDataSourceRuntimeFailedReserveRequestCount=jdbcDataSourceRuntimeFailedReserveRequestCount, comParent=comParent, jmsServerParent=jmsServerParent, messageDrivenEJBRuntimeTable=messageDrivenEJBRuntimeTable, kernelObjectName=kernelObjectName, wseeClientOperationRuntimeIndex=wseeClientOperationRuntimeIndex, webServiceObjectName=webServiceObjectName, wtcRemoteTuxDomAclPolicy=wtcRemoteTuxDomAclPolicy, jdbcConnectionPoolRuntimeVersionJDBCDriver=jdbcConnectionPoolRuntimeVersionJDBCDriver, clusterEntry=clusterEntry, serverRuntimeCurrentDirectory=serverRuntimeCurrentDirectory, virtualHostWAPEnabled=virtualHostWAPEnabled, pageFlowRuntimeCreateCount=pageFlowRuntimeCreateCount, webServiceRequestBufferingQueueIndex=webServiceRequestBufferingQueueIndex, transactionNameRuntimeTransactionRolledBackTimeoutTotalCount=transactionNameRuntimeTransactionRolledBackTimeoutTotalCount, virtualDestinationTable=virtualDestinationTable, singletonServiceAppScopedObjectName=singletonServiceAppScopedObjectName, pageFlowActionRuntimeSuccessDispatchTimeTotal=pageFlowActionRuntimeSuccessDispatchTimeTotal, logBroadcasterRuntimeParent=logBroadcasterRuntimeParent, jdbcDataSourceTaskRuntimeDescription=jdbcDataSourceTaskRuntimeDescription, webServiceResponseBufferingQueueName=webServiceResponseBufferingQueueName, jvmRuntimeEntry=jvmRuntimeEntry, serverExternalDNSName=serverExternalDNSName, springViewResolverRuntimeApplicationContextDisplayName=springViewResolverRuntimeApplicationContextDisplayName, coherenceClusterSystemResourceCompatibilityName=coherenceClusterSystemResourceCompatibilityName, wseePortPolicyRuntimeIntegrityViolations=wseePortPolicyRuntimeIntegrityViolations, deploymentProgressObjectId=deploymentProgressObjectId, jmsBridgeDestinationConnectionURL=jmsBridgeDestinationConnectionURL, databaseLessLeasingBasisIndex=databaseLessLeasingBasisIndex, serverDebugDebugXMLEntityCacheUseShortClass=serverDebugDebugXMLEntityCacheUseShortClass, sslHostnameVerificationIgnored=sslHostnameVerificationIgnored, domainLibraryCompatibilityName=domainLibraryCompatibilityName, serverDebugDebugSAFTransport=serverDebugDebugSAFTransport, transactionNameRuntimeTransactionTwoPhaseCommittedTotalCount=transactionNameRuntimeTransactionTwoPhaseCommittedTotalCount, jmsSAFMessageLogFileNumberOfFilesLimited=jmsSAFMessageLogFileNumberOfFilesLimited, messageDrivenEJBRuntimeConnectionStatus=messageDrivenEJBRuntimeConnectionStatus, overloadProtectionFailureAction=overloadProtectionFailureAction, servletSessionRuntimeTable=servletSessionRuntimeTable, securityConfigurationEntry=securityConfigurationEntry, serverDebugDebugJTAMigration=serverDebugDebugJTAMigration, serverDebugForceGCEachDGCPeriod=serverDebugForceGCEachDGCPeriod, springApplicationContextRuntimeIndex=springApplicationContextRuntimeIndex, wseeClientOperationRuntimeExecutionTimeLow=wseeClientOperationRuntimeExecutionTimeLow, webAppComponentRuntimeIndexDirectoryEnabled=webAppComponentRuntimeIndexDirectoryEnabled, jMSDurableSubscriberRuntimeMessagesCurrentCount=jMSDurableSubscriberRuntimeMessagesCurrentCount, mailSessionTable=mailSessionTable, jdbcDataSourceTaskRuntimeTable=jdbcDataSourceTaskRuntimeTable, domainRuntimeParent=domainRuntimeParent, networkChannelCompleteT3MessageTimeout=networkChannelCompleteT3MessageTimeout, wtctBridgeGlobalName=wtctBridgeGlobalName, threadPoolRuntimeHoggingThreadCount=threadPoolRuntimeHoggingThreadCount)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", webserviceSecurityObjectName=webserviceSecurityObjectName, webServerIndex=webServerIndex, serverLifeCycleRuntimeParent=serverLifeCycleRuntimeParent, servletRuntimePoolMaxCapacity=servletRuntimePoolMaxCapacity, wlssnmpLogFilterEntry=wlssnmpLogFilterEntry, wtcLocalTuxDomAccessPointId=wtcLocalTuxDomAccessPointId, wseeClientPortRuntimeObjectName=wseeClientPortRuntimeObjectName, customResourceSourcePath=customResourceSourcePath, connectorComponentRuntimeState=connectorComponentRuntimeState, jmsRemoteEndpointRuntimeDowntimeTotal=jmsRemoteEndpointRuntimeDowntimeTotal, wlssnmpAttributeChangeEntry=wlssnmpAttributeChangeEntry, clusterSessionFlushThreshold=clusterSessionFlushThreshold, embeddedLDAPRefreshReplicaAtStartup=embeddedLDAPRefreshReplicaAtStartup, jmsDestinationRuntimeObjectName=jmsDestinationRuntimeObjectName, appDeploymentRuntimeType=appDeploymentRuntimeType, wlecConnectionPoolRuntimeParent=wlecConnectionPoolRuntimeParent, serverCustomTrustKeyStoreType=serverCustomTrustKeyStoreType, wldfDbstoreArchiveRuntimeType=wldfDbstoreArchiveRuntimeType, deploymentTaskRuntimeDescription=deploymentTaskRuntimeDescription, serverEntry=serverEntry, ejbRuntimeEntry=ejbRuntimeEntry, safAgentConversationIdleTimeMaximum=safAgentConversationIdleTimeMaximum, serverDebugDebugReplication=serverDebugDebugReplication, clusterRuntimeSecondaryDistributionNames=clusterRuntimeSecondaryDistributionNames, safAgentReceivingPausedAtStartup=safAgentReceivingPausedAtStartup, wseePortRuntimeTransportProtocolType=wseePortRuntimeTransportProtocolType, deploymentManagerMaximumDeploymentProgressObjectsCount=deploymentManagerMaximumDeploymentProgressObjectsCount, serverOutboundEnabled=serverOutboundEnabled, jMSDurableSubscriberRuntimeMessagesReceivedCount=jMSDurableSubscriberRuntimeMessagesReceivedCount, webServiceRuntimeObjectName=webServiceRuntimeObjectName, coherenceServerLifeCycleTaskRuntimeStatus=coherenceServerLifeCycleTaskRuntimeStatus, serverRuntimeStateVal=serverRuntimeStateVal, interceptionComponentRuntimeParent=interceptionComponentRuntimeParent, userLockoutManagerRuntimeType=userLockoutManagerRuntimeType, pageFlowsRuntimeHttpServerName=pageFlowsRuntimeHttpServerName, bridgeDestinationCommonParent=bridgeDestinationCommonParent, adminConsoleType=adminConsoleType, unicastMessagingRuntimeObjectName=unicastMessagingRuntimeObjectName, manAsyncReplicationRuntimeObjectName=manAsyncReplicationRuntimeObjectName, webServiceLogicalStoreCleanerInterval=webServiceLogicalStoreCleanerInterval, serverDebugDebugDiagnosticsHarvester=serverDebugDebugDiagnosticsHarvester, jdbcConnectionPoolRuntimeConnectionsTotalCount=jdbcConnectionPoolRuntimeConnectionsTotalCount, wtcRemoteTuxDomRetryInterval=wtcRemoteTuxDomRetryInterval, jmsConsumerRuntimeMemberDestinationName=jmsConsumerRuntimeMemberDestinationName, minThreadsConstraintRuntimeMustRunCount=minThreadsConstraintRuntimeMustRunCount, threadPoolRuntimeThroughput=threadPoolRuntimeThroughput, trapLogMessage=trapLogMessage, serverDebugDebugEmbeddedLDAPLogLevel=serverDebugDebugEmbeddedLDAPLogLevel, messagingBridgePreserveMsgProperty=messagingBridgePreserveMsgProperty, domainConsoleExtensionDirectory=domainConsoleExtensionDirectory, jmsSessionPoolName=jmsSessionPoolName, webServicePhysicalStoreEntry=webServicePhysicalStoreEntry, jdbcSystemResourceDescriptorFileName=jdbcSystemResourceDescriptorFileName, startupClassEntry=startupClassEntry, deploymentProgressObjectTable=deploymentProgressObjectTable, coherenceServerLifeCycleTaskRuntimeEndTime=coherenceServerLifeCycleTaskRuntimeEndTime, wtcServerEntry=wtcServerEntry, threadPoolRuntimeExecuteThreadTotalCount=threadPoolRuntimeExecuteThreadTotalCount, jmsDestinationRuntimeBytesThresholdTime=jmsDestinationRuntimeBytesThresholdTime, serverDebugDebugMuxerException=serverDebugDebugMuxerException, wseeClientRuntimeType=wseeClientRuntimeType, jdbcDataSourceRuntimePrepStmtCacheAddCount=jdbcDataSourceRuntimePrepStmtCacheAddCount, jdbcDataSourceTaskRuntimeBeginTime=jdbcDataSourceTaskRuntimeBeginTime, wldfWatchNotificationRuntimeTable=wldfWatchNotificationRuntimeTable, coherenceServerLifeCycleTaskRuntimeObjectName=coherenceServerLifeCycleTaskRuntimeObjectName, interceptionComponentRuntimeObjectName=interceptionComponentRuntimeObjectName, coherenceServerLifeCycleRuntimeType=coherenceServerLifeCycleRuntimeType, kodoPersistenceUnitRuntimeType=kodoPersistenceUnitRuntimeType, connectorInboundRuntimeObjectName=connectorInboundRuntimeObjectName, cacheStoreIndex=cacheStoreIndex, serviceMigrationRuntimeObjectName=serviceMigrationRuntimeObjectName, jrockitRuntimeIndex=jrockitRuntimeIndex, networkAccessPointMaxConnectedClients=networkAccessPointMaxConnectedClients, singleSignOnServicesType=singleSignOnServicesType, nodeManagerNMType=nodeManagerNMType, webServiceBufferingObjectName=webServiceBufferingObjectName, springViewResolverRuntimeTable=springViewResolverRuntimeTable, springBeanDefinitionRuntimeScope=springBeanDefinitionRuntimeScope, trapLogThreadId=trapLogThreadId, jvmRuntimeObjectName=jvmRuntimeObjectName, serverWeblogicPluginEnabled=serverWeblogicPluginEnabled, jrockitRuntimeTotalNumberOfThreads=jrockitRuntimeTotalNumberOfThreads, networkChannelTunnelingClientPingSecs=networkChannelTunnelingClientPingSecs, wseeOperationConfigurationRuntimeName=wseeOperationConfigurationRuntimeName, capacityEntry=capacityEntry, logEntry=logEntry, transactionResourceRuntimeTransactionHeuristicsTotalCount=transactionResourceRuntimeTransactionHeuristicsTotalCount, bridgeDestinationCommonUserName=bridgeDestinationCommonUserName, webServiceCallbackQueue=webServiceCallbackQueue, serverRuntimeState=serverRuntimeState, serverPeriodLength=serverPeriodLength, safRemoteEndpointRuntimeName=safRemoteEndpointRuntimeName, serverDebugDebugLoggingConfiguration=serverDebugDebugLoggingConfiguration, wlecConnectionPoolType=wlecConnectionPoolType, embeddedLDAPAnonymousBindAllowed=embeddedLDAPAnonymousBindAllowed, unixMachineAddresses=unixMachineAddresses, jmsSAFMessageLogFileName=jmsSAFMessageLogFileName, wldfDataRetirementTaskRuntimeEntry=wldfDataRetirementTaskRuntimeEntry, coherenceClusterRuntimeIndex=coherenceClusterRuntimeIndex, jmsSessionRuntimeBytesReceivedCount=jmsSessionRuntimeBytesReceivedCount, jmsServerRuntimeBytesReceivedCount=jmsServerRuntimeBytesReceivedCount, wldfHarvesterRuntimeKnownHarvestableTypes=wldfHarvesterRuntimeKnownHarvestableTypes, wseeHandlerRuntimeType=wseeHandlerRuntimeType, sslParent=sslParent, wseeV2RuntimeEntry=wseeV2RuntimeEntry, serverDebugClassFinder=serverDebugClassFinder, migrationDataRuntimeName=migrationDataRuntimeName, xmlEntityCacheEntry=xmlEntityCacheEntry, jrockitRuntimeName=jrockitRuntimeName, serverDebugDebugXMLEntityCacheDebugName=serverDebugDebugXMLEntityCacheDebugName, servletRuntimeServletPath=servletRuntimeServletPath, safRemoteEndpointRuntimeBytesThresholdTime=safRemoteEndpointRuntimeBytesThresholdTime, safConversationRuntimeParent=safConversationRuntimeParent, connectorConnectionRuntimeTable=connectorConnectionRuntimeTable, entityCacheRuntimeIndex=entityCacheRuntimeIndex, jmsServerBytesThresholdHigh=jmsServerBytesThresholdHigh, pageFlowActionRuntimeSuccessDispatchTimeLow=pageFlowActionRuntimeSuccessDispatchTimeLow, pageFlowActionRuntimeIndex=pageFlowActionRuntimeIndex, xmlRegistryHandleEntityInvalidation=xmlRegistryHandleEntityInvalidation, coherenceClusterRuntimeType=coherenceClusterRuntimeType, wlecConnectionPoolParent=wlecConnectionPoolParent, webserviceCredentialProviderTokenType=webserviceCredentialProviderTokenType, migratableServiceCoordinatorRuntimeName=migratableServiceCoordinatorRuntimeName, springTransactionManagerRuntimeType=springTransactionManagerRuntimeType, cacheStoreStoreBatchSize=cacheStoreStoreBatchSize, wlssnmpProxyCommunity=wlssnmpProxyCommunity, cacheJNDIName=cacheJNDIName, comPrefetchEnums=comPrefetchEnums, webServiceLogicalStoreEntry=webServiceLogicalStoreEntry, springTransactionManagerRuntimeApplicationContextDisplayName=springTransactionManagerRuntimeApplicationContextDisplayName, deploymentTaskRuntimeApplicationName=deploymentTaskRuntimeApplicationName, sslIdentityAndTrustLocations=sslIdentityAndTrustLocations, ejbComponentType=ejbComponentType, deploymentTaskRuntimeType=deploymentTaskRuntimeType, queryCacheRuntimeType=queryCacheRuntimeType, nodeManagerDebugEnabled=nodeManagerDebugEnabled, networkAccessPointClientCertificateEnforced=networkAccessPointClientCertificateEnforced, errorHandlingObjectName=errorHandlingObjectName, cacheTransactionConcurrency=cacheTransactionConcurrency, wsrmRemoteEndpointRuntimeBytesPendingCount=wsrmRemoteEndpointRuntimeBytesPendingCount, jdbcOracleDataSourceInstanceRuntimeObjectName=jdbcOracleDataSourceInstanceRuntimeObjectName, wldfServerDiagnosticEventsImageCaptureInterval=wldfServerDiagnosticEventsImageCaptureInterval, wseePortPolicyRuntimeConfidentialitySuccesses=wseePortPolicyRuntimeConfidentialitySuccesses, safConversationRuntimeType=safConversationRuntimeType, deploymentTaskRuntimeState=deploymentTaskRuntimeState, kernelScatteredReadsEnabled=kernelScatteredReadsEnabled, serverExtraEjbcOptions=serverExtraEjbcOptions, serverDebugDebugCluster=serverDebugDebugCluster, httpProxyEntry=httpProxyEntry, pageFlowsRuntimeName=pageFlowsRuntimeName, clusterWeblogicPluginEnabled=clusterWeblogicPluginEnabled, jdbcSystemResourceTable=jdbcSystemResourceTable, workManagerRuntimeIndex=workManagerRuntimeIndex, wlssnmpAgentRuntimeServerStartTrapCount=wlssnmpAgentRuntimeServerStartTrapCount, jMSDurableSubscriberRuntimeActive=jMSDurableSubscriberRuntimeActive, wseeClientOperationRuntimeLastResponseErrorTime=wseeClientOperationRuntimeLastResponseErrorTime, wtcRemoteTuxDomTuxedoUidKw=wtcRemoteTuxDomTuxedoUidKw, jdbcOracleDataSourceInstanceRuntimeReserveRequestCount=jdbcOracleDataSourceInstanceRuntimeReserveRequestCount, serverJavaCompilerPostClassPath=serverJavaCompilerPostClassPath, webAppContainerRtexprvalueJspParamName=webAppContainerRtexprvalueJspParamName, serverDebugDebugJTARecoveryStackTrace=serverDebugDebugJTARecoveryStackTrace, serverDebugDebugDiagnosticInstrumentation=serverDebugDebugDiagnosticInstrumentation, virtualHostMaxPostTimeSecs=virtualHostMaxPostTimeSecs, jmsRemoteEndpointRuntimeUptimeHigh=jmsRemoteEndpointRuntimeUptimeHigh, wtcLocalTuxDomInteroperate=wtcLocalTuxDomInteroperate, sslIndex=sslIndex, serverLifeCycleTaskRuntimeEndTime=serverLifeCycleTaskRuntimeEndTime, sslEntry=sslEntry, wtcLocalTuxDomPrivateKeyAlias=wtcLocalTuxDomPrivateKeyAlias, wldfServerDiagnosticImageDir=wldfServerDiagnosticImageDir, connectorConnectionPoolRuntimeConsDestroyedByShrinkingTotalCount=connectorConnectionPoolRuntimeConsDestroyedByShrinkingTotalCount, virtualHostWriteChunkBytes=virtualHostWriteChunkBytes, connectorConnectionRuntimeEISProductName=connectorConnectionRuntimeEISProductName, deploymentConfigurationType=deploymentConfigurationType, wtcPasswordLocalPassword=wtcPasswordLocalPassword, jmsRuntimeObjectName=jmsRuntimeObjectName, jrockitRuntimeUsedPhysicalMemory=jrockitRuntimeUsedPhysicalMemory, serverRuntimeWeblogicVersion=serverRuntimeWeblogicVersion, serverChannelRuntimeType=serverChannelRuntimeType, clusterClientCertProxyEnabled=clusterClientCertProxyEnabled, pathServiceName=pathServiceName, serverFailureTriggerStuckThreadCount=serverFailureTriggerStuckThreadCount, appDeploymentRuntimeApplicationName=appDeploymentRuntimeApplicationName, federationServicesUsedAssertionCacheClassName=federationServicesUsedAssertionCacheClassName, safRemoteEndpointRuntimeOperationState=safRemoteEndpointRuntimeOperationState, safAgentRuntimeEntry=safAgentRuntimeEntry, bridgeDestinationCommonAdapterJNDIName=bridgeDestinationCommonAdapterJNDIName, wtcRemoteTuxDomAccessPoint=wtcRemoteTuxDomAccessPoint, serverDebugDebugJTATransactionName=serverDebugDebugJTATransactionName, jmsDestinationRuntimeConsumptionPaused=jmsDestinationRuntimeConsumptionPaused, minThreadsConstraintRuntimeTable=minThreadsConstraintRuntimeTable, federationServicesAssertionConsumerURIs=federationServicesAssertionConsumerURIs, serverLifeCycleTaskRuntimeOperation=serverLifeCycleTaskRuntimeOperation, wldfDataRetirementTaskRuntimeDescription=wldfDataRetirementTaskRuntimeDescription, onsClientRuntimeEntry=onsClientRuntimeEntry, serverDebugDebugWebAppSecurity=serverDebugDebugWebAppSecurity, migrationDataRuntimeMachinesAttempted=migrationDataRuntimeMachinesAttempted, jmsRemoteEndpointRuntimePausedForIncoming=jmsRemoteEndpointRuntimePausedForIncoming, wldfAccessRuntimeType=wldfAccessRuntimeType, onsClientRuntimeIndex=onsClientRuntimeIndex, safRemoteEndpointRuntimeTable=safRemoteEndpointRuntimeTable, workManagerShutdownTriggerObjectName=workManagerShutdownTriggerObjectName, coherenceClusterSystemResourceObjectName=coherenceClusterSystemResourceObjectName, webServiceRuntimeURI=webServiceRuntimeURI, xmlEntitySpecRegistryIndex=xmlEntitySpecRegistryIndex, jtaRuntimeTransactionHeuristicsTotalCount=jtaRuntimeTransactionHeuristicsTotalCount, startupClassDeploymentOrder=startupClassDeploymentOrder, wseePolicySubjectManagerRuntimeIndex=wseePolicySubjectManagerRuntimeIndex, connectorConnectionRuntimeShared=connectorConnectionRuntimeShared, serverDebugDebugDiagnosticFileArchive=serverDebugDebugDiagnosticFileArchive, wlecConnectionPoolRuntimeType=wlecConnectionPoolRuntimeType, serverDebugDebugDiagnosticInstrumentationConfig=serverDebugDebugDiagnosticInstrumentationConfig, jmsConnectionConsumerIndex=jmsConnectionConsumerIndex, serverDebugDebugIIOPNaming=serverDebugDebugIIOPNaming, connectorConnectionPoolRuntimeCurrentCapacity=connectorConnectionPoolRuntimeCurrentCapacity, wldfWlstoreArchiveRuntimeDeletionCount=wldfWlstoreArchiveRuntimeDeletionCount, webserviceTimestampLaxPrecision=webserviceTimestampLaxPrecision, kernelMaxHTTPMessageSize=kernelMaxHTTPMessageSize, cacheIndex=cacheIndex, wtctBridgeGlobalWlsErrorDestination=wtctBridgeGlobalWlsErrorDestination, wldfSystemResourceEntry=wldfSystemResourceEntry, connectorServiceRuntimeConnectionPoolCurrentCount=connectorServiceRuntimeConnectionPoolCurrentCount, jdbcDataSourceRuntimeEntry=jdbcDataSourceRuntimeEntry, jvmRuntimeHeapSizeCurrent=jvmRuntimeHeapSizeCurrent, databaseLessLeasingBasisType=databaseLessLeasingBasisType, entityCacheRuntimeMinEntryMemorySize=entityCacheRuntimeMinEntryMemorySize, virtualHostUseHighestCompatibleHTTPVersion=virtualHostUseHighestCompatibleHTTPVersion, jmsSessionRuntimeMessagesPendingCount=jmsSessionRuntimeMessagesPendingCount, wtctBridgeRedirectSourceAccessPoint=wtctBridgeRedirectSourceAccessPoint, workManagerRuntimeEntry=workManagerRuntimeEntry, wseeClientPortRuntimePoolCapacity=wseeClientPortRuntimePoolCapacity, jmsDestinationRuntimeMessagesDeletedCurrentCount=jmsDestinationRuntimeMessagesDeletedCurrentCount, queryCacheRuntimeTotalCachedQueriesCount=queryCacheRuntimeTotalCachedQueriesCount, wseePortRuntimePolicySubjectType=wseePortRuntimePolicySubjectType, foreignJNDILinkObjectName=foreignJNDILinkObjectName, wanreplicationRuntimeSecondaryServerDetails=wanreplicationRuntimeSecondaryServerDetails, safAgentRuntimeType=safAgentRuntimeType, jdbcOracleDataSourceRuntimeObjectName=jdbcOracleDataSourceRuntimeObjectName, wlssnmpProxySecurityLevel=wlssnmpProxySecurityLevel, webAppComponentRuntimeEntry=webAppComponentRuntimeEntry, connectorConnectionRuntimeCreationDurationTime=connectorConnectionRuntimeCreationDurationTime, jmsConsumerRuntimeBytesPendingCount=jmsConsumerRuntimeBytesPendingCount, serverDebugDebugRAXAwork=serverDebugDebugRAXAwork, webAppComponentIndex=webAppComponentIndex, jdbcDataSourceFactoryIndex=jdbcDataSourceFactoryIndex, requestClassRuntimePendingRequestCount=requestClassRuntimePendingRequestCount, wlssnmpProxyTable=wlssnmpProxyTable, networkAccessPointTwoWaySSLEnabled=networkAccessPointTwoWaySSLEnabled, foreignJNDILinkLocalJNDIName=foreignJNDILinkLocalJNDIName, singletonServiceAppScopedType=singletonServiceAppScopedType, messagingBridgeBatchInterval=messagingBridgeBatchInterval, jdbcServiceRuntimeEntry=jdbcServiceRuntimeEntry, libraryRuntimeLibraryName=libraryRuntimeLibraryName, jdbcStoreInsertsPerBatchMaximum=jdbcStoreInsertsPerBatchMaximum)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", jmsDestinationJNDINameReplicated=jmsDestinationJNDINameReplicated, webServerLogDateFormatPattern=webServerLogDateFormatPattern, jdbcOracleDataSourceRuntimeWaitingForConnectionCurrentCount=jdbcOracleDataSourceRuntimeWaitingForConnectionCurrentCount, securityConfigurationCompatibilityConnectionFiltersEnabled=securityConfigurationCompatibilityConnectionFiltersEnabled, clusterMillisToSleepBetweenAutoMigrationAttempts=clusterMillisToSleepBetweenAutoMigrationAttempts, wseeRuntimeURI=wseeRuntimeURI, entityCacheRuntimeMaxEntryTimeout=entityCacheRuntimeMaxEntryTimeout, unixMachinePostBindUIDEnabled=unixMachinePostBindUIDEnabled, webServiceCallbackQueueMDBRunAsPrincipalName=webServiceCallbackQueueMDBRunAsPrincipalName, cacheStoreEntry=cacheStoreEntry, virtualHostAcceptContextPathInGetRealPath=virtualHostAcceptContextPathInGetRealPath, connectorComponentRuntimeModuleId=connectorComponentRuntimeModuleId, logFilterIndex=logFilterIndex, psAssemblyRuntimeTable=psAssemblyRuntimeTable, timerRuntimeObjectName=timerRuntimeObjectName, unicastMessagingRuntimeName=unicastMessagingRuntimeName, serverDebugDebugJMSFrontEnd=serverDebugDebugJMSFrontEnd, wtcRuntimeType=wtcRuntimeType, jmsSAFMessageLogFileFileCount=jmsSAFMessageLogFileFileCount, messagingBridgeRuntimeParent=messagingBridgeRuntimeParent, safAgentRuntimeRemoteEndpointsCurrentCount=safAgentRuntimeRemoteEndpointsCurrentCount, serverRuntimeListenPortEnabled=serverRuntimeListenPortEnabled, connectorInboundRuntimeMsgListenerType=connectorInboundRuntimeMsgListenerType, federationServicesSourceIdHex=federationServicesSourceIdHex, webServiceRequestBufferingQueueObjectName=webServiceRequestBufferingQueueObjectName, entityCacheCumulativeRuntimeEntry=entityCacheCumulativeRuntimeEntry, serverMessagingBridgeThreadPoolSize=serverMessagingBridgeThreadPoolSize, pageFlowActionRuntimeHandledExceptionDispatchTimeHigh=pageFlowActionRuntimeHandledExceptionDispatchTimeHigh, jvmRuntimeOSVersion=jvmRuntimeOSVersion, wtcResourcesMBEncodingMapFile=wtcResourcesMBEncodingMapFile, kernelLogRemoteExceptionsEnabled=kernelLogRemoteExceptionsEnabled, threadPoolRuntimePendingUserRequestCount=threadPoolRuntimePendingUserRequestCount, wseeRuntimeObjectName=wseeRuntimeObjectName, messageDrivenEJBRuntimeName=messageDrivenEJBRuntimeName, jmsServerRuntimeMessagesCurrentCount=jmsServerRuntimeMessagesCurrentCount, domainLibraryType=domainLibraryType, jmsServerRuntimeMessagesPendingCount=jmsServerRuntimeMessagesPendingCount, wldfDataRetirementTaskRuntimeEndTime=wldfDataRetirementTaskRuntimeEndTime, wtcRemoteTuxDomParent=wtcRemoteTuxDomParent, executeQueueRuntimeName=executeQueueRuntimeName, entityCacheCurrentStateRuntimeAvgPerEntryMemorySize=entityCacheCurrentStateRuntimeAvgPerEntryMemorySize, serverJDBCLoginTimeoutSeconds=serverJDBCLoginTimeoutSeconds, serverDebugDebugDGCEnrollment=serverDebugDebugDGCEnrollment, executeQueueRuntimeObjectName=executeQueueRuntimeObjectName, deploymentTaskRuntimeStatus=deploymentTaskRuntimeStatus, jrockitRuntimeTotalGarbageCollectionTime=jrockitRuntimeTotalGarbageCollectionTime, wlssnmpAgentDeploymentSNMPPort=wlssnmpAgentDeploymentSNMPPort, webAppContainerIndex=webAppContainerIndex, wseeClusterRoutingRuntimeRequestCount=wseeClusterRoutingRuntimeRequestCount, coherenceServerAutoRestart=coherenceServerAutoRestart, wlecConnectionRuntimeEntry=wlecConnectionRuntimeEntry, networkAccessPointOutboundPrivateKeyEnabled=networkAccessPointOutboundPrivateKeyEnabled, pageFlowActionRuntimeObjectName=pageFlowActionRuntimeObjectName, webServiceLogicalStoreIndex=webServiceLogicalStoreIndex, jtaRuntimeParent=jtaRuntimeParent, ejbComponentEntry=ejbComponentEntry, ejbContainerTmpPath=ejbContainerTmpPath, wlssnmpAgentRuntimeIndex=wlssnmpAgentRuntimeIndex, springViewResolverRuntimeResolveViewNameFailedCount=springViewResolverRuntimeResolveViewNameFailedCount, wldfDbstoreArchiveRuntimeIndex=wldfDbstoreArchiveRuntimeIndex, webAppComponentRuntimeSessionCookieName=webAppComponentRuntimeSessionCookieName, webServiceRuntimeName=webServiceRuntimeName, jrockitRuntimeAllProcessorsAverageLoad=jrockitRuntimeAllProcessorsAverageLoad, wtcExportIndex=wtcExportIndex, domainLibraryAbsoluteSourcePath=domainLibraryAbsoluteSourcePath, serverDebugDebugDeploymentServiceTransportHttp=serverDebugDebugDeploymentServiceTransportHttp, domainLibraryModuleType=domainLibraryModuleType, webserviceTimestampIndex=webserviceTimestampIndex, webAppComponentName=webAppComponentName, clusterRuntimeEntry=clusterRuntimeEntry, comName=comName, jrockitRuntimeJavaVersion=jrockitRuntimeJavaVersion, jmsServerEntry=jmsServerEntry, domainLibraryName=domainLibraryName, entityCacheCurrentStateRuntimeTable=entityCacheCurrentStateRuntimeTable, entityCacheCurrentStateRuntimeMinEntryTimeout=entityCacheCurrentStateRuntimeMinEntryTimeout, ejbLockingRuntimeLockEntriesCurrentCount=ejbLockingRuntimeLockEntriesCurrentCount, threadPoolRuntimeCompletedRequestCount=threadPoolRuntimeCompletedRequestCount, pageFlowRuntimeClassName=pageFlowRuntimeClassName, wanreplicationRuntimeIndex=wanreplicationRuntimeIndex, domainRuntimeActivationTime=domainRuntimeActivationTime, wtcResourcesFldTbl32Classes=wtcResourcesFldTbl32Classes, wldfWatchNotificationRuntimeTotalJMXNotificationsPerformed=wldfWatchNotificationRuntimeTotalJMXNotificationsPerformed, springViewRuntimeRenderCount=springViewRuntimeRenderCount, webAppComponentRuntimeObjectName=webAppComponentRuntimeObjectName, springViewRuntimeRenderFailedCount=springViewRuntimeRenderFailedCount, jmsSessionRuntimeBytesSentCount=jmsSessionRuntimeBytesSentCount, libraryRuntimeName=libraryRuntimeName, transactionResourceRuntimeName=transactionResourceRuntimeName, entityCacheCumulativeRuntimeMostRecentDiskPurge=entityCacheCumulativeRuntimeMostRecentDiskPurge, taskRuntimeDescription=taskRuntimeDescription, cacheAsyncListenersName=cacheAsyncListenersName, jmsConnectionConsumerName=jmsConnectionConsumerName, kernelCompleteIIOPMessageTimeout=kernelCompleteIIOPMessageTimeout, jmsPooledConnectionRuntimeIndex=jmsPooledConnectionRuntimeIndex, kodoDataCacheRuntimeName=kodoDataCacheRuntimeName, servletRuntimeExecutionTimeHigh=servletRuntimeExecutionTimeHigh, serverRuntimeAdminServerHost=serverRuntimeAdminServerHost, transactionNameRuntimeEntry=transactionNameRuntimeEntry, wtcExportRemoteName=wtcExportRemoteName, wlssnmpAgentDeploymentType=wlssnmpAgentDeploymentType, jdbcOracleDataSourceRuntimeIndex=jdbcOracleDataSourceRuntimeIndex, wldfWatchNotificationRuntimeTotalFailedSNMPNotifications=wldfWatchNotificationRuntimeTotalFailedSNMPNotifications, serverTransactionLogFileWritePolicy=serverTransactionLogFileWritePolicy, webserviceTokenHandlerIndex=webserviceTokenHandlerIndex, entityCacheCumulativeRuntimeMinEntryMemorySize=entityCacheCumulativeRuntimeMinEntryMemorySize, networkAccessPointAcceptBacklog=networkAccessPointAcceptBacklog, domainLibraryPlanPath=domainLibraryPlanPath, webServerType=webServerType, responseTimeRequestClassObjectName=responseTimeRequestClassObjectName, jMSDurableSubscriberRuntimeClientID=jMSDurableSubscriberRuntimeClientID, jmsServerBytesMaximum=jmsServerBytesMaximum, serviceMigrationDataRuntimeEntry=serviceMigrationDataRuntimeEntry, wtctBridgeGlobalDefaultReplyDeliveryMode=wtctBridgeGlobalDefaultReplyDeliveryMode, serverFailureTriggerIndex=serverFailureTriggerIndex, joltConnectionServiceRuntimeIndex=joltConnectionServiceRuntimeIndex, wldfServerDiagnosticName=wldfServerDiagnosticName, jmsDistributedDestinationMemberWeight=jmsDistributedDestinationMemberWeight, webserviceTokenHandlerTable=webserviceTokenHandlerTable, springTransactionManagerRuntimeRollbackCount=springTransactionManagerRuntimeRollbackCount, jmsConsumerRuntimeBytesReceivedCount=jmsConsumerRuntimeBytesReceivedCount, virtualHostAuthCookieEnabled=virtualHostAuthCookieEnabled, springViewResolverRuntimeAverageResolveViewNameTime=springViewResolverRuntimeAverageResolveViewNameTime, serverDebugDebugSAFAdmin=serverDebugDebugSAFAdmin, manReplicationRuntimeDetailedSecondariesDistribution=manReplicationRuntimeDetailedSecondariesDistribution, messagingBridgeSelector=messagingBridgeSelector, jmsPooledConnectionRuntimeCreationDelayTime=jmsPooledConnectionRuntimeCreationDelayTime, jdbcOracleDataSourceRuntimeConnectionsTotalCount=jdbcOracleDataSourceRuntimeConnectionsTotalCount, cacheType=cacheType, maxThreadsConstraintRuntimeDeferredRequests=maxThreadsConstraintRuntimeDeferredRequests, jdbcDataSourceRuntimeHighestNumAvailable=jdbcDataSourceRuntimeHighestNumAvailable, jtaRuntimeActiveTransactionsTotalCount=jtaRuntimeActiveTransactionsTotalCount, ejbComponentJavaCompilerPostClassPath=ejbComponentJavaCompilerPostClassPath, wlssnmpAgentRuntimeRunning=wlssnmpAgentRuntimeRunning, serverDebugDebugTunnelingConnection=serverDebugDebugTunnelingConnection, safAgentForwardingPausedAtStartup=safAgentForwardingPausedAtStartup, jmsVirtualDestinationIndex=jmsVirtualDestinationIndex, connectorConnectionRuntimeActiveHandlesCurrentCount=connectorConnectionRuntimeActiveHandlesCurrentCount, wldfWlstoreArchiveRuntimeRecordCount=wldfWlstoreArchiveRuntimeRecordCount, mailSessionRuntimeEntry=mailSessionRuntimeEntry, wlssnmpLogFilterType=wlssnmpLogFilterType, wldfWatchNotificationRuntimeTotalJMSNotificationsPerformed=wldfWatchNotificationRuntimeTotalJMSNotificationsPerformed, wldfWatchNotificationRuntimeTotalFailedDIMGNotifications=wldfWatchNotificationRuntimeTotalFailedDIMGNotifications, xmlParserSelectRegistryDocumentBuilderFactory=xmlParserSelectRegistryDocumentBuilderFactory, serverDebugDebugJAXPUseShortClass=serverDebugDebugJAXPUseShortClass, jdbcDataSourceRuntimeNumUnavailable=jdbcDataSourceRuntimeNumUnavailable, joltConnectionRuntimeAlive=joltConnectionRuntimeAlive, jdbcDataSourceFactoryDriverClassName=jdbcDataSourceFactoryDriverClassName, webServicePersistenceObjectName=webServicePersistenceObjectName, unicastMessagingRuntimeRemoteGroupsDiscoveredCount=unicastMessagingRuntimeRemoteGroupsDiscoveredCount, wldfSystemResourceSourcePath=wldfSystemResourceSourcePath, networkChannelName=networkChannelName, serverDebugDebugServerMigration=serverDebugDebugServerMigration, transactionResourceRuntimeTransactionRolledBackTotalCount=transactionResourceRuntimeTransactionRolledBackTotalCount, federationServicesSourceSiteURL=federationServicesSourceSiteURL, safAgentMessageBufferSize=safAgentMessageBufferSize, logBroadcasterRuntimeIndex=logBroadcasterRuntimeIndex, jmsPooledConnectionRuntimeNumConnectionObjects=jmsPooledConnectionRuntimeNumConnectionObjects, webServerHttpsKeepAliveSecs=webServerHttpsKeepAliveSecs, kodoQueryCompilationCacheRuntimeName=kodoQueryCompilationCacheRuntimeName, wseeClientRuntimeEntry=wseeClientRuntimeEntry, webAppComponentRuntimeSessionCookieMaxAgeSecs=webAppComponentRuntimeSessionCookieMaxAgeSecs, clusterDefaultLoadAlgorithm=clusterDefaultLoadAlgorithm, ejbTimerRuntimeTable=ejbTimerRuntimeTable, capacityDeploymentOrder=capacityDeploymentOrder, contextRequestClassName=contextRequestClassName, defaultFileStoreEntry=defaultFileStoreEntry, jMSDurableSubscriberRuntimeBytesCurrentCount=jMSDurableSubscriberRuntimeBytesCurrentCount, securityConfigurationWebAppFilesCaseInsensitive=securityConfigurationWebAppFilesCaseInsensitive, webServicePersistenceName=webServicePersistenceName, domainLibraryTable=domainLibraryTable, jmsRemoteEndpointRuntimeTable=jmsRemoteEndpointRuntimeTable, federationServicesARSRequiresSSL=federationServicesARSRequiresSSL, jmsSessionPoolRuntimeConnectionConsumersCurrentCount=jmsSessionPoolRuntimeConnectionConsumersCurrentCount, jmsDestCommonDeliveryModeOverride=jmsDestCommonDeliveryModeOverride, jmsServerPagingBlockSize=jmsServerPagingBlockSize, logFileMinSize=logFileMinSize, configurationPropertyType=configurationPropertyType, messagingBridgeRuntimeObjectName=messagingBridgeRuntimeObjectName, clusterMulticastTTL=clusterMulticastTTL, jmsProducerRuntimeIndex=jmsProducerRuntimeIndex, singleSignOnServicesServiceProviderPOSTBindingEnabled=singleSignOnServicesServiceProviderPOSTBindingEnabled, joltConnectionServiceRuntimeConnectionPoolCount=joltConnectionServiceRuntimeConnectionPoolCount, executeQueueName=executeQueueName, snmpAgentSNMPAccessForUserMBeansEnabled=snmpAgentSNMPAccessForUserMBeansEnabled, wtcImportIndex=wtcImportIndex, messageDrivenControlEJBRuntimeEntry=messageDrivenControlEJBRuntimeEntry, serverHttpdEnabled=serverHttpdEnabled, fileStoreIoBufferSize=fileStoreIoBufferSize, sslCertAuthenticator=sslCertAuthenticator, kernelIdleConnectionTimeout=kernelIdleConnectionTimeout, singletonServiceAppScopedIndex=singletonServiceAppScopedIndex, wtcLocalTuxDomKeepAliveWait=wtcLocalTuxDomKeepAliveWait, workManagerName=workManagerName, webServicePersistenceTable=webServicePersistenceTable, wseeClusterRoutingRuntimeRoutedRequestCount=wseeClusterRoutingRuntimeRoutedRequestCount, cacheStoreName=cacheStoreName, clusterClusterAddress=clusterClusterAddress, webServerObjectName=webServerObjectName, jtaRecoveryRuntimeType=jtaRecoveryRuntimeType, maxThreadsConstraintRuntimeObjectName=maxThreadsConstraintRuntimeObjectName, wtcLocalTuxDomName=wtcLocalTuxDomName, fileStoreSynchronousWritePolicy=fileStoreSynchronousWritePolicy, webServiceLogicalStoreResponseBufferingQueueJndiName=webServiceLogicalStoreResponseBufferingQueueJndiName, nodeManagerEntry=nodeManagerEntry, serverDebugDebugSAFMessagePath=serverDebugDebugSAFMessagePath, serverDebugDebugServerLifeCycle=serverDebugDebugServerLifeCycle, springTransactionManagerRuntimeObjectName=springTransactionManagerRuntimeObjectName, networkChannelTunnelingEnabled=networkChannelTunnelingEnabled, fairShareRequestClassDeploymentOrder=fairShareRequestClassDeploymentOrder, xmlEntitySpecRegistryObjectName=xmlEntitySpecRegistryObjectName, requestClassRuntimeEntry=requestClassRuntimeEntry, virtualDestinationType=virtualDestinationType, wseeWsrmRuntimeIndex=wseeWsrmRuntimeIndex, snmpAgentSNMPTrapVersion=snmpAgentSNMPTrapVersion, safRemoteEndpointRuntimeEndpointType=safRemoteEndpointRuntimeEndpointType, jmsServerTemporaryTemplateName=jmsServerTemporaryTemplateName, serverDebugDebugXMLEntityCacheIncludeName=serverDebugDebugXMLEntityCacheIncludeName, jmsDestinationIndex=jmsDestinationIndex, jmsConsumerRuntimeSelector=jmsConsumerRuntimeSelector, serverSecurityRuntimeParent=serverSecurityRuntimeParent, webAppComponentRuntimeIndex=webAppComponentRuntimeIndex, jtaObjectName=jtaObjectName, jMSDurableSubscriberRuntimeEntry=jMSDurableSubscriberRuntimeEntry, serverDebugLogDGCStatistics=serverDebugLogDGCStatistics, serverListenPortEnabled=serverListenPortEnabled, jmsSAFMessageLogFileRotateLogOnStartup=jmsSAFMessageLogFileRotateLogOnStartup, wlssnmpAgentDeploymentMibDataRefreshInterval=wlssnmpAgentDeploymentMibDataRefreshInterval, userLockoutManagerRuntimeUserLockoutTotalCount=userLockoutManagerRuntimeUserLockoutTotalCount, ejbComponentName=ejbComponentName, connectorComponentRuntimeDescription=connectorComponentRuntimeDescription, ejbComponentURI=ejbComponentURI, jdbcStoreObjectName=jdbcStoreObjectName, wlssnmpStringMonitorIndex=wlssnmpStringMonitorIndex, cacheTransactionObjectName=cacheTransactionObjectName, messageDrivenControlEJBRuntimeTable=messageDrivenControlEJBRuntimeTable, wldfImageCreationTaskRuntimeRunning=wldfImageCreationTaskRuntimeRunning, wseeOperationRuntimeResponseTimeHigh=wseeOperationRuntimeResponseTimeHigh, webServerLogFileCount=webServerLogFileCount, serverSecurityRuntimeTable=serverSecurityRuntimeTable, ejbPoolRuntimeEntry=ejbPoolRuntimeEntry, webServerPostTimeoutSecs=webServerPostTimeoutSecs, safRemoteEndpointRuntimePausedForForwarding=safRemoteEndpointRuntimePausedForForwarding, embeddedLDAPType=embeddedLDAPType, kodoDataCacheRuntimeType=kodoDataCacheRuntimeType, jmsDestCommonTimeToDeliverOverride=jmsDestCommonTimeToDeliverOverride, jmsDestinationRuntimePaused=jmsDestinationRuntimePaused, jmxEntry=jmxEntry, serverDebugDebugSAFLifeCycle=serverDebugDebugSAFLifeCycle, minThreadsConstraintRuntimeIndex=minThreadsConstraintRuntimeIndex, workManagerRuntimeParent=workManagerRuntimeParent, minThreadsConstraintIndex=minThreadsConstraintIndex, serverDebugDebugWTCCorbaEx=serverDebugDebugWTCCorbaEx, webServerLogELFFields=webServerLogELFFields)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", serverDebugDebugSecurityEEngine=serverDebugDebugSecurityEEngine, mailSessionRuntimeTable=mailSessionRuntimeTable, userLockoutManagerRuntimeUnlockedUsersTotalCount=userLockoutManagerRuntimeUnlockedUsersTotalCount, safAgentRuntimeTable=safAgentRuntimeTable, shutdownClassName=shutdownClassName, serverChannelRuntimeConnectionsCount=serverChannelRuntimeConnectionsCount, workManagerRuntimeObjectName=workManagerRuntimeObjectName, ejbComponentTable=ejbComponentTable, entityCacheCurrentStateRuntimeMaxEntryMemorySize=entityCacheCurrentStateRuntimeMaxEntryMemorySize, jmsDistributedDestinationMemberIndex=jmsDistributedDestinationMemberIndex, sslClientCertificateEnforced=sslClientCertificateEnforced, serverDebugType=serverDebugType, springBeanDefinitionRuntimeSingleton=springBeanDefinitionRuntimeSingleton, coherenceClusterRuntimeName=coherenceClusterRuntimeName, springRuntimeSpringVersion=springRuntimeSpringVersion, webserviceTokenHandlerHandlingOrder=webserviceTokenHandlerHandlingOrder, sslUseServerCerts=sslUseServerCerts, safRemoteEndpointRuntimeUptimeTotal=safRemoteEndpointRuntimeUptimeTotal, jrockitRuntimeGCHandlesCompaction=jrockitRuntimeGCHandlesCompaction, wldfInstrumentationRuntimeModifiedClassesCount=wldfInstrumentationRuntimeModifiedClassesCount, sslPeerValidationEnforced=sslPeerValidationEnforced, connectorConnectionPoolRuntimeParent=connectorConnectionPoolRuntimeParent, wldfWatchNotificationRuntimeAverageLogWatchEvaluationTime=wldfWatchNotificationRuntimeAverageLogWatchEvaluationTime, serverFailureTriggerTable=serverFailureTriggerTable, jmsComponentRuntimeIndex=jmsComponentRuntimeIndex, httpProxyDeploymentOrder=httpProxyDeploymentOrder, servletRuntimeServletClassName=servletRuntimeServletClassName, safRemoteEndpointRuntimeBytesPendingCount=safRemoteEndpointRuntimeBytesPendingCount, wtcResourcesFldTbl16Classes=wtcResourcesFldTbl16Classes, serverRuntimeSSLListenPortEnabled=serverRuntimeSSLListenPortEnabled, serviceMigrationDataRuntimeStatus=serviceMigrationDataRuntimeStatus, serverDebugDebugDiagnosticWlstoreArchive=serverDebugDebugDiagnosticWlstoreArchive, jdbcOracleDataSourceRuntimeWaitingForConnectionFailureTotal=jdbcOracleDataSourceRuntimeWaitingForConnectionFailureTotal, wldfImageCreationTaskRuntimeEntry=wldfImageCreationTaskRuntimeEntry, ejbLockingRuntimeIndex=ejbLockingRuntimeIndex, jmsServerRuntimeProductionPausedState=jmsServerRuntimeProductionPausedState, connectorInboundRuntimeIndex=connectorInboundRuntimeIndex, serverMaxOpenSockCount=serverMaxOpenSockCount, jdbcOracleDataSourceRuntimeType=jdbcOracleDataSourceRuntimeType, jmxInvocationTimeoutSeconds=jmxInvocationTimeoutSeconds, wldfFileArchiveRuntimeRotatedFilesCount=wldfFileArchiveRuntimeRotatedFilesCount, taskRuntimeSystemTask=taskRuntimeSystemTask, requestClassRuntimeVirtualTimeIncrement=requestClassRuntimeVirtualTimeIncrement, networkAccessPointMaxBackoffBetweenFailures=networkAccessPointMaxBackoffBetweenFailures, wlssnmpGaugeMonitorObjectName=wlssnmpGaugeMonitorObjectName, connectorConnectionPoolRuntimePoolSizeHighWaterMark=connectorConnectionPoolRuntimePoolSizeHighWaterMark, wseeClusterRoutingRuntimeLastRoutingFailure=wseeClusterRoutingRuntimeLastRoutingFailure, workManagerIgnoreStuckThreads=workManagerIgnoreStuckThreads, serverDebugDebugJMSBackEnd=serverDebugDebugJMSBackEnd, customResourceName=customResourceName, serverDebugDebugSecurityRealm=serverDebugDebugSecurityRealm, webserviceSecurityCompatibilityPreference=webserviceSecurityCompatibilityPreference, jdbcConnectionPoolRuntimeNumAvailable=jdbcConnectionPoolRuntimeNumAvailable, migratableServiceCoordinatorRuntimeIndex=migratableServiceCoordinatorRuntimeIndex, wtcRemoteTuxDomCmpLimit=wtcRemoteTuxDomCmpLimit, wldfWatchNotificationRuntimeTotalFailedJMXNotifications=wldfWatchNotificationRuntimeTotalFailedJMXNotifications, entityCacheCumulativeRuntimeMaxEntryMemorySize=entityCacheCumulativeRuntimeMaxEntryMemorySize, workManagerShutdownTriggerType=workManagerShutdownTriggerType, springViewRuntimeName=springViewRuntimeName, fileStoreInitialSize=fileStoreInitialSize, unicastMessagingRuntimeLocalGroupLeaderName=unicastMessagingRuntimeLocalGroupLeaderName, springApplicationContextRuntimeAverageRefreshTime=springApplicationContextRuntimeAverageRefreshTime, entityCacheCurrentStateRuntimeAvgTimeout=entityCacheCurrentStateRuntimeAvgTimeout, connectorConnectionPoolRuntimeLogFileName=connectorConnectionPoolRuntimeLogFileName, messagingBridgeEntry=messagingBridgeEntry, coherenceClusterSystemResourceEntry=coherenceClusterSystemResourceEntry, interceptionComponentRuntimeModuleId=interceptionComponentRuntimeModuleId, serverStartJavaVendor=serverStartJavaVendor, serverLowMemoryGCThreshold=serverLowMemoryGCThreshold, singleSignOnServicesContactPersonEmailAddress=singleSignOnServicesContactPersonEmailAddress, serverDebugDebugJAXPIncludeName=serverDebugDebugJAXPIncludeName, statelessEJBRuntimeIndex=statelessEJBRuntimeIndex, wtctBridgeRedirectSourceQspace=wtctBridgeRedirectSourceQspace, wtcRuntimeTable=wtcRuntimeTable, servletSessionRuntimeParent=servletSessionRuntimeParent, jmsSessionPoolListenerClass=jmsSessionPoolListenerClass, wlssnmpGaugeMonitorPollingInterval=wlssnmpGaugeMonitorPollingInterval, serverDebugDebugSecurityAuditor=serverDebugDebugSecurityAuditor, deploymentTaskRuntimeBeginTime=deploymentTaskRuntimeBeginTime, nonXAResourceRuntimeTransactionRolledBackTotalCount=nonXAResourceRuntimeTransactionRolledBackTotalCount, transactionNameRuntimeTransactionRolledBackSystemTotalCount=transactionNameRuntimeTransactionRolledBackSystemTotalCount, wldfDbstoreArchiveRuntimeDeletionTime=wldfDbstoreArchiveRuntimeDeletionTime, logStdoutFormat=logStdoutFormat, jmsRemoteEndpointRuntimeName=jmsRemoteEndpointRuntimeName, trapMachineName=trapMachineName, serverDebugDebugXMLRegistryIncludeTime=serverDebugDebugXMLRegistryIncludeTime, wsrmRemoteEndpointRuntimeEntry=wsrmRemoteEndpointRuntimeEntry, wlecConnectionRuntimeAlive=wlecConnectionRuntimeAlive, iiopIdleConnectionTimeout=iiopIdleConnectionTimeout, networkChannelListenPort=networkChannelListenPort, securityObjectName=securityObjectName, joltConnectionRuntimeIndex=joltConnectionRuntimeIndex, jdbcOracleDataSourceRuntimeFailedAffinityBasedBorrowCount=jdbcOracleDataSourceRuntimeFailedAffinityBasedBorrowCount, jdbcDataSourceRuntimeDatabaseProductVersion=jdbcDataSourceRuntimeDatabaseProductVersion, wldfWatchNotificationRuntimeTotalHarvesterEvaluationCycles=wldfWatchNotificationRuntimeTotalHarvesterEvaluationCycles, logFileTimeSpan=logFileTimeSpan, wlssnmpAgentRuntimeFailedAuthenticationCount=wlssnmpAgentRuntimeFailedAuthenticationCount, pathServiceEntry=pathServiceEntry, coherenceServerStartRootDirectory=coherenceServerStartRootDirectory, serverChannelRuntimeEntry=serverChannelRuntimeEntry, serverDebugDebugJAXPDebugLevel=serverDebugDebugJAXPDebugLevel, entityCacheCumulativeRuntimeTotalNumberOfRenewals=entityCacheCumulativeRuntimeTotalNumberOfRenewals, springRuntimeObjectName=springRuntimeObjectName, wtctBridgeRedirectType=wtctBridgeRedirectType, cacheStoreBufferWriteAttempts=cacheStoreBufferWriteAttempts, serverDebugDebugConsensusLeasing=serverDebugDebugConsensusLeasing, serverDebugDebugSecurityUserLockout=serverDebugDebugSecurityUserLockout, cacheExpirationName=cacheExpirationName, serverDebugDebugDeploymentServiceTransport=serverDebugDebugDeploymentServiceTransport, entityCacheCumulativeRuntimeAvgEntrySizeDiskPurged=entityCacheCumulativeRuntimeAvgEntrySizeDiskPurged, wseeClientOperationRuntimeType=wseeClientOperationRuntimeType, jdbcOracleDataSourceInstanceRuntimeEntry=jdbcOracleDataSourceInstanceRuntimeEntry, jmsConnectionRuntimeEntry=jmsConnectionRuntimeEntry, fileStoreType=fileStoreType, serverStartClassPath=serverStartClassPath, serverRuntimeName=serverRuntimeName, wseeClientOperationRuntimeResponseCount=wseeClientOperationRuntimeResponseCount, serverDebugDebugMuxer=serverDebugDebugMuxer, clusterAutoMigrationTableName=clusterAutoMigrationTableName, jmsSessionRuntimeConsumersTotalCount=jmsSessionRuntimeConsumersTotalCount, serverJDBCLLRTableName=serverJDBCLLRTableName, webServerEntry=webServerEntry, wtcServerDeploymentOrder=wtcServerDeploymentOrder, wlssnmpAgentRuntimeEntry=wlssnmpAgentRuntimeEntry, jmsComponentRuntimeModuleId=jmsComponentRuntimeModuleId, comNativeModeEnabled=comNativeModeEnabled, wtcImportName=wtcImportName, threadPoolRuntimeExecuteThreadIdleCount=threadPoolRuntimeExecuteThreadIdleCount, jPADefaultJPAProvider=jPADefaultJPAProvider, iiopUseFullRepositoryIdList=iiopUseFullRepositoryIdList, serverDebugDebugJAXPIncludeClass=serverDebugDebugJAXPIncludeClass, domainConfigurationAuditType=domainConfigurationAuditType, executeQueueThreadsMaximum=executeQueueThreadsMaximum, pageFlowActionRuntimeTable=pageFlowActionRuntimeTable, kernelCompleteT3MessageTimeout=kernelCompleteT3MessageTimeout, responseTimeRequestClassTable=responseTimeRequestClassTable, serverRuntimeWeblogicHome=serverRuntimeWeblogicHome, manReplicationRuntimeSecondaryServerDetails=manReplicationRuntimeSecondaryServerDetails, comObjectName=comObjectName, wsReliableDeliveryPolicyDefaultTimeToLive=wsReliableDeliveryPolicyDefaultTimeToLive, coherenceServerStartTable=coherenceServerStartTable, wtctBridgeGlobalEntry=wtctBridgeGlobalEntry, joltConnectionPoolPrimaryAddresses=joltConnectionPoolPrimaryAddresses, serverMigrationRuntimeType=serverMigrationRuntimeType, wldfDataRetirementTaskRuntimeRunning=wldfDataRetirementTaskRuntimeRunning, clusterHttpTraceSupportEnabled=clusterHttpTraceSupportEnabled, networkChannelMaxHTTPMessageSize=networkChannelMaxHTTPMessageSize, connectorConnectionRuntimeHandlesCreatedTotalCount=connectorConnectionRuntimeHandlesCreatedTotalCount, transactionNameRuntimeTransactionAbandonedTotalCount=transactionNameRuntimeTransactionAbandonedTotalCount, transactionResourceRuntimeTransactionCommittedTotalCount=transactionResourceRuntimeTransactionCommittedTotalCount, connectorConnectionPoolRuntimeObjectName=connectorConnectionPoolRuntimeObjectName, rmcFactoryJNDIName=rmcFactoryJNDIName, wsReliableDeliveryPolicyName=wsReliableDeliveryPolicyName, jmsProducerRuntimeType=jmsProducerRuntimeType, nodeManagerType=nodeManagerType, domainGuardianEnabled=domainGuardianEnabled, adminConsoleCookieName=adminConsoleCookieName, jPAName=jPAName, responseTimeRequestClassIndex=responseTimeRequestClassIndex, jmsDistributedDestinationType=jmsDistributedDestinationType, connectorConnectionPoolRuntimeKey=connectorConnectionPoolRuntimeKey, interceptionComponentRuntimeTable=interceptionComponentRuntimeTable, virtualHostName=virtualHostName, startupClassParent=startupClassParent, jtaTable=jtaTable, realmRuntimeEntry=realmRuntimeEntry, jtaRuntimeTable=jtaRuntimeTable, wldfWatchNotificationRuntimeTotalSMTPNotificationsPerformed=wldfWatchNotificationRuntimeTotalSMTPNotificationsPerformed, logBroadcasterRuntimeMessagesLogged=logBroadcasterRuntimeMessagesLogged, ejbLockingRuntimeTimeoutTotalCount=ejbLockingRuntimeTimeoutTotalCount, wlssnmpAttributeChangeName=wlssnmpAttributeChangeName, wtcLocalTuxDomConnectionPolicy=wtcLocalTuxDomConnectionPolicy, comApartmentThreaded=comApartmentThreaded, jmsServerBytesThresholdLow=jmsServerBytesThresholdLow, serverAutoKillIfFailed=serverAutoKillIfFailed, userLockoutManagerRuntimeParent=userLockoutManagerRuntimeParent, jmsRuntimeJMSServersHighCount=jmsRuntimeJMSServersHighCount, wseeOperationRuntimeExecutionTimeAverage=wseeOperationRuntimeExecutionTimeAverage, wtcLocalTuxDomCmpLimit=wtcLocalTuxDomCmpLimit, kernelStuckThreadMaxTime=kernelStuckThreadMaxTime, jmsSessionRuntimeTable=jmsSessionRuntimeTable, jdbcDataSourceRuntimeWaitingForConnectionFailureTotal=jdbcDataSourceRuntimeWaitingForConnectionFailureTotal, jmsDestinationRuntimeTable=jmsDestinationRuntimeTable, wlecConnectionServiceRuntimeObjectName=wlecConnectionServiceRuntimeObjectName, wlssnmpAgentRuntimeMasterAgentXPort=wlssnmpAgentRuntimeMasterAgentXPort, xmlRegistryName=xmlRegistryName, wlssnmpGaugeMonitorMonitoredMBeanType=wlssnmpGaugeMonitorMonitoredMBeanType, deploymentProgressObjectEntry=deploymentProgressObjectEntry, serverLifeCycleRuntimeEntry=serverLifeCycleRuntimeEntry, executeQueueIndex=executeQueueIndex, wseeClientOperationRuntimeTable=wseeClientOperationRuntimeTable, trapMBeanName=trapMBeanName, wldfDbstoreArchiveRuntimeDataRetirementCycles=wldfDbstoreArchiveRuntimeDataRetirementCycles, fileStoreTable=fileStoreTable, cacheLoaderEntry=cacheLoaderEntry, manAsyncReplicationRuntimeIndex=manAsyncReplicationRuntimeIndex, networkChannelType=networkChannelType, jMSDurableSubscriberRuntimeSubscribersCurrentCount=jMSDurableSubscriberRuntimeSubscribersCurrentCount, networkChannelLoginTimeoutMillis=networkChannelLoginTimeoutMillis, jmsDistributedDestinationMemberType=jmsDistributedDestinationMemberType, serverStartRootDirectory=serverStartRootDirectory, wtcRemoteTuxDomFederationName=wtcRemoteTuxDomFederationName, wseeClientOperationRuntimeLastErrorTime=wseeClientOperationRuntimeLastErrorTime, jmsDistributedDestinationMemberObjectName=jmsDistributedDestinationMemberObjectName, webAppComponentRuntimeName=webAppComponentRuntimeName, wseePortRuntimePolicySubjectResourcePattern=wseePortRuntimePolicySubjectResourcePattern, jmsDistributedDestinationTable=jmsDistributedDestinationTable, snmpAgentPrivacyProtocol=snmpAgentPrivacyProtocol, wtcImportRemoteName=wtcImportRemoteName, overloadProtectionFreeMemoryPercentLowThreshold=overloadProtectionFreeMemoryPercentLowThreshold, threadPoolRuntimeMinThreadsConstraintsCompleted=threadPoolRuntimeMinThreadsConstraintsCompleted, serverDebugDebugJTA2PCStackTrace=serverDebugDebugJTA2PCStackTrace, wldfAccessRuntimeEntry=wldfAccessRuntimeEntry, wtcLocalTuxDomUseSSL=wtcLocalTuxDomUseSSL, logBroadcasterRuntimeTable=logBroadcasterRuntimeTable, jmsServerStoreEnabled=jmsServerStoreEnabled, bridgeDestinationClasspath=bridgeDestinationClasspath, safAgentDefaultRetryDelayMaximum=safAgentDefaultRetryDelayMaximum, coherenceClusterRuntimeMembers=coherenceClusterRuntimeMembers, jmsConnectionConsumerEntry=jmsConnectionConsumerEntry, logRedirectStdoutToServerLogEnabled=logRedirectStdoutToServerLogEnabled, webServiceReliabilityIndex=webServiceReliabilityIndex, safAgentDeploymentOrder=safAgentDeploymentOrder, jdbcConnectionPoolRuntimeModuleId=jdbcConnectionPoolRuntimeModuleId, httpProxyMaxRetries=httpProxyMaxRetries, clusterAsyncSessionQueueTimeout=clusterAsyncSessionQueueTimeout, jdbcOracleDataSourceRuntimeDeploymentState=jdbcOracleDataSourceRuntimeDeploymentState, jmsVirtualDestinationType=jmsVirtualDestinationType, wseeClusterFrontEndRuntimeIndex=wseeClusterFrontEndRuntimeIndex, jmsRemoteEndpointRuntimeObjectName=jmsRemoteEndpointRuntimeObjectName, jmsRemoteEndpointRuntimeMessagesCurrentCount=jmsRemoteEndpointRuntimeMessagesCurrentCount, ejbComponentDeploymentOrder=ejbComponentDeploymentOrder, webServiceIndex=webServiceIndex, cacheAsyncListenersWorkManager=cacheAsyncListenersWorkManager, logBroadcasterRuntimeType=logBroadcasterRuntimeType, wseeOperationRuntimeEntry=wseeOperationRuntimeEntry, snmpAgentCommunityPrefix=snmpAgentCommunityPrefix, overloadProtectionObjectName=overloadProtectionObjectName, securityConnectionFilterRules=securityConnectionFilterRules, ejbComponentJavaCompiler=ejbComponentJavaCompiler, securityConfigurationType=securityConfigurationType, serverMigrationRuntimeTable=serverMigrationRuntimeTable, adminConsoleIndex=adminConsoleIndex, fairShareRequestClassObjectName=fairShareRequestClassObjectName, wldfServerDiagnosticDiagnosticStoreIoBufferSize=wldfServerDiagnosticDiagnosticStoreIoBufferSize, jmsBridgeDestinationClasspath=jmsBridgeDestinationClasspath, manAsyncReplicationRuntimeSecondaryCount=manAsyncReplicationRuntimeSecondaryCount, ejbComponentRuntimeIndex=ejbComponentRuntimeIndex, jmsBridgeDestinationName=jmsBridgeDestinationName, jmsProducerRuntimeMessagesSentCount=jmsProducerRuntimeMessagesSentCount, libraryRuntimeTable=libraryRuntimeTable, fileStoreEntry=fileStoreEntry, wldfDataRetirementTaskRuntimeSystemTask=wldfDataRetirementTaskRuntimeSystemTask, kodoQueryCacheRuntimeStatistics=kodoQueryCacheRuntimeStatistics)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", taskRuntimeObjectName=taskRuntimeObjectName, wldfWatchNotificationRuntimeTotalFailedNotifications=wldfWatchNotificationRuntimeTotalFailedNotifications, bridgeDestinationTable=bridgeDestinationTable, jdbcStoreDeletesPerStatementMaximum=jdbcStoreDeletesPerStatementMaximum, jrockitRuntimeTotalHeap=jrockitRuntimeTotalHeap, networkChannelLoginTimeoutMillisSSL=networkChannelLoginTimeoutMillisSSL, wlssnmpTrapDestinationSecurityName=wlssnmpTrapDestinationSecurityName, virtualHostObjectName=virtualHostObjectName, wldfWatchNotificationRuntimeMinimumLogWatchEvaluationTime=wldfWatchNotificationRuntimeMinimumLogWatchEvaluationTime, xmlEntityCacheObjectName=xmlEntityCacheObjectName, springApplicationContextRuntimeAverageSingletonBeanCreationTime=springApplicationContextRuntimeAverageSingletonBeanCreationTime, safAgentName=safAgentName, entityEJBRuntimeType=entityEJBRuntimeType, entityCacheCurrentStateRuntimeName=entityCacheCurrentStateRuntimeName, contextCaseGroupName=contextCaseGroupName, serverInstrumentStackTraceEnabled=serverInstrumentStackTraceEnabled, manAsyncReplicationRuntimeEntry=manAsyncReplicationRuntimeEntry, configurationPropertyObjectName=configurationPropertyObjectName, wtcPasswordObjectName=wtcPasswordObjectName, safAgentRuntimeBytesPendingCount=safAgentRuntimeBytesPendingCount, singletonServiceTable=singletonServiceTable, springBeanDefinitionRuntimeAliases=springBeanDefinitionRuntimeAliases, applicationRuntimeObjectName=applicationRuntimeObjectName, jmsServerExpirationScanInterval=jmsServerExpirationScanInterval, wseeOperationConfigurationRuntimeType=wseeOperationConfigurationRuntimeType, webserviceSecurityType=webserviceSecurityType, ejbCacheRuntimeName=ejbCacheRuntimeName, kernelIIOPTxMechanism=kernelIIOPTxMechanism, jdbcStoreIndex=jdbcStoreIndex, responseTimeRequestClassGoalMs=responseTimeRequestClassGoalMs, servletSessionRuntimeMaxInactiveInterval=servletSessionRuntimeMaxInactiveInterval, jmsConnectionRuntimeSessionsCurrentCount=jmsConnectionRuntimeSessionsCurrentCount, jobRuntimeState=jobRuntimeState, jmsDestCommonPriorityOverride=jmsDestCommonPriorityOverride, serverGracefulShutdownTimeout=serverGracefulShutdownTimeout, virtualHostParent=virtualHostParent, messageDrivenEJBRuntimeParent=messageDrivenEJBRuntimeParent, coherenceClusterSystemResourceUsingCustomClusterConfigurationFile=coherenceClusterSystemResourceUsingCustomClusterConfigurationFile, jmsServerRuntimeBytesHighCount=jmsServerRuntimeBytesHighCount, domainAdministrationPortEnabled=domainAdministrationPortEnabled, webServiceRuntimeLastResetTime=webServiceRuntimeLastResetTime, wseeOperationConfigurationRuntimePolicySubjectType=wseeOperationConfigurationRuntimePolicySubjectType, jtaRuntimeTransactionAbandonedTotalCount=jtaRuntimeTransactionAbandonedTotalCount, webServiceRequestBufferingQueueTransactionEnabled=webServiceRequestBufferingQueueTransactionEnabled, shutdownClassDeploymentOrder=shutdownClassDeploymentOrder, taskRuntimeParent=taskRuntimeParent, txNameRuntimeTxReadOnlyOnePhaseCommittedTotalCount=txNameRuntimeTxReadOnlyOnePhaseCommittedTotalCount, springApplicationContextRuntimeEntry=springApplicationContextRuntimeEntry, coherenceServerStartJavaHome=coherenceServerStartJavaHome, bridgeDestinationCommonObjectName=bridgeDestinationCommonObjectName, mailSessionJNDIName=mailSessionJNDIName, jmsServerInsertionPausedAtStartup=jmsServerInsertionPausedAtStartup, userLockoutManagerRuntimeEntry=userLockoutManagerRuntimeEntry, webAppComponentRuntimeSessionTimeoutSecs=webAppComponentRuntimeSessionTimeoutSecs, serverChannelRuntimeBytesReceivedCount=serverChannelRuntimeBytesReceivedCount, webserviceTimestampTable=webserviceTimestampTable, clusterGreedySessionFlushInterval=clusterGreedySessionFlushInterval, coherenceClusterSystemResourceName=coherenceClusterSystemResourceName, jmsServerBlockingSendPolicy=jmsServerBlockingSendPolicy, deploymentProgressObjectMessages=deploymentProgressObjectMessages, serverMaxHTTPMessageSize=serverMaxHTTPMessageSize, serverDebugDebugSecurityAtz=serverDebugDebugSecurityAtz, applicationRuntimeParent=applicationRuntimeParent, kernelThreadPoolPercentSocketReaders=kernelThreadPoolPercentSocketReaders, wseeWsrmRuntimeName=wseeWsrmRuntimeName, serverDebugDebugJDBCDriverLogging=serverDebugDebugJDBCDriverLogging, wsrmRemoteEndpointRuntimeUptimeHigh=wsrmRemoteEndpointRuntimeUptimeHigh, ejbTransactionRuntimeTransactionsRolledBackTotalCount=ejbTransactionRuntimeTransactionsRolledBackTotalCount, webServiceRuntimeMalformedRequestCount=webServiceRuntimeMalformedRequestCount, jmsServerRuntimeBytesCurrentCount=jmsServerRuntimeBytesCurrentCount, serverDebugDebugEmbeddedLDAPLogToConsole=serverDebugDebugEmbeddedLDAPLogToConsole, jmsServerMessagesMaximum=jmsServerMessagesMaximum, jdbcDataSourceRuntimePrepStmtCacheHitCount=jdbcDataSourceRuntimePrepStmtCacheHitCount, entityCacheCumulativeRuntimeTable=entityCacheCumulativeRuntimeTable, jdbcOracleDataSourceRuntimeDatabaseProductName=jdbcOracleDataSourceRuntimeDatabaseProductName, serverParent=serverParent, txNameRuntimeTxOneResourceOnePhaseCommittedTotalCount=txNameRuntimeTxOneResourceOnePhaseCommittedTotalCount, responseTimeRequestClassEntry=responseTimeRequestClassEntry, webServiceName=webServiceName, webserviceSecurityTokenEntry=webserviceSecurityTokenEntry, wseePortRuntimePolicyFaults=wseePortRuntimePolicyFaults, serviceMigrationRuntimeClusterMasterName=serviceMigrationRuntimeClusterMasterName, timerRuntimeType=timerRuntimeType, jmsServerRuntimeSessionPoolsHighCount=jmsServerRuntimeSessionPoolsHighCount, jdbcConnectionPoolRuntimeState=jdbcConnectionPoolRuntimeState, wlssnmpTrapDestinationTable=wlssnmpTrapDestinationTable, kodoPersistenceUnitRuntimeName=kodoPersistenceUnitRuntimeName, connectorConnectionRuntimeInTransaction=connectorConnectionRuntimeInTransaction, safAgentRuntimeBytesHighCount=safAgentRuntimeBytesHighCount, webServiceLogicalStoreDefaultMaximumObjectLifetime=webServiceLogicalStoreDefaultMaximumObjectLifetime, webServerLogLogTimeInGMT=webServerLogLogTimeInGMT, webserviceTimestampMaxProcessingDelay=webserviceTimestampMaxProcessingDelay, domainClusterConstraintsEnabled=domainClusterConstraintsEnabled, deploymentProgressObjectBeginTime=deploymentProgressObjectBeginTime, webServiceRuntimeType=webServiceRuntimeType, serverStartArguments=serverStartArguments, serverLifeCycleTaskRuntimeDescription=serverLifeCycleTaskRuntimeDescription, wtcRemoteTuxDomConnectionPolicy=wtcRemoteTuxDomConnectionPolicy, clusterNumberOfServersInClusterAddress=clusterNumberOfServersInClusterAddress, jmsDestCommonType=jmsDestCommonType, wlecConnectionPoolRuntimeConnections=wlecConnectionPoolRuntimeConnections, jMSDurableSubscriberRuntimeIndex=jMSDurableSubscriberRuntimeIndex, jmsConsumerRuntimeDestinationName=jmsConsumerRuntimeDestinationName, singleSignOnServicesOrganizationName=singleSignOnServicesOrganizationName, entityCacheRuntimeTotalTransientCurrentEntries=entityCacheRuntimeTotalTransientCurrentEntries, fileStoreCacheDirectory=fileStoreCacheDirectory, wlssnmpCounterMonitorTable=wlssnmpCounterMonitorTable, entityCacheCumulativeRuntimeTotalTransientCurrentEntries=entityCacheCumulativeRuntimeTotalTransientCurrentEntries, jmsPooledConnectionRuntimeHighestNumAvailable=jmsPooledConnectionRuntimeHighestNumAvailable, jdbcStoreEntry=jdbcStoreEntry, threadPoolRuntimeParent=threadPoolRuntimeParent, serverDebugDebugReplicationDetails=serverDebugDebugReplicationDetails, wldfServerDiagnosticDiagnosticStoreMinWindowBufferSize=wldfServerDiagnosticDiagnosticStoreMinWindowBufferSize, serverMigrationRuntimeIndex=serverMigrationRuntimeIndex, webServicePhysicalStoreLocation=webServicePhysicalStoreLocation, jmsRemoteEndpointRuntimeType=jmsRemoteEndpointRuntimeType, serverDebugDebugRALifecycle=serverDebugDebugRALifecycle, singleSignOnServicesObjectName=singleSignOnServicesObjectName, springRuntimeName=springRuntimeName, wseeClientOperationRuntimeExecutionTimeAverage=wseeClientOperationRuntimeExecutionTimeAverage, trapALSBAlertRuleId=trapALSBAlertRuleId, joltConnectionPoolRuntimeType=joltConnectionPoolRuntimeType, servletSessionRuntimeMainAttribute=servletSessionRuntimeMainAttribute, clusterMemberWarmupTimeoutSeconds=clusterMemberWarmupTimeoutSeconds, networkAccessPointIndex=networkAccessPointIndex, serverStartIndex=serverStartIndex, jrockitRuntimeType=jrockitRuntimeType, springApplicationContextRuntimeType=springApplicationContextRuntimeType, webServerWriteChunkBytes=webServerWriteChunkBytes, entityCacheCurrentStateRuntimeTotalCurrentEntries=entityCacheCurrentStateRuntimeTotalCurrentEntries, remoteSAFContextUrl=remoteSAFContextUrl, ejbComponentRuntimeEntry=ejbComponentRuntimeEntry, wsrmRemoteEndpointRuntimeConversationsCurrentCount=wsrmRemoteEndpointRuntimeConversationsCurrentCount, springTransactionTemplateRuntimeExecuteCount=springTransactionTemplateRuntimeExecuteCount, wlssnmpAgentDeploymentCommunityBasedAccessEnabled=wlssnmpAgentDeploymentCommunityBasedAccessEnabled, sslServerPrivateKeyAlias=sslServerPrivateKeyAlias, trapAttributeChangeType=trapAttributeChangeType, serverRuntimeListenAddress=serverRuntimeListenAddress, fairShareRequestClassName=fairShareRequestClassName, defaultFileStoreMaxFileSize=defaultFileStoreMaxFileSize, wldfInstrumentationRuntimeIndex=wldfInstrumentationRuntimeIndex, wldfWlstoreArchiveRuntimeRetiredRecordCount=wldfWlstoreArchiveRuntimeRetiredRecordCount, ejbTimerRuntimeEntry=ejbTimerRuntimeEntry, clusterOneWayRmiForReplicationEnabled=clusterOneWayRmiForReplicationEnabled, domainArchiveConfigurationCount=domainArchiveConfigurationCount, networkChannelHTTPSEnabled=networkChannelHTTPSEnabled, serverDebugWebModule=serverDebugWebModule, ejbLockingRuntimeParent=ejbLockingRuntimeParent, libraryRuntimeImplementationVersion=libraryRuntimeImplementationVersion, cacheExpirationTable=cacheExpirationTable, persistentStoreRuntimeName=persistentStoreRuntimeName, jmsSessionPoolRuntimeEntry=jmsSessionPoolRuntimeEntry, serverCOMEnabled=serverCOMEnabled, safAgentWindowInterval=safAgentWindowInterval, serverDebugDebugJMSBoot=serverDebugDebugJMSBoot, webServerRuntimeIndex=webServerRuntimeIndex, iiopName=iiopName, wldfServerDiagnosticWLDFDiagnosticVolume=wldfServerDiagnosticWLDFDiagnosticVolume, wseePolicyRuntimeIndex=wseePolicyRuntimeIndex, webServiceReliabilityEntry=webServiceReliabilityEntry, jdbcDataSourceRuntimeWaitingForConnectionHighCount=jdbcDataSourceRuntimeWaitingForConnectionHighCount, wldfWatchNotificationRuntimeIndex=wldfWatchNotificationRuntimeIndex, kodoQueryCacheRuntimeCacheHitRatio=kodoQueryCacheRuntimeCacheHitRatio, rmcFactoryParent=rmcFactoryParent, requestClassRuntimeObjectName=requestClassRuntimeObjectName, connectorConnectionPoolRuntimeActiveConnectionsCurrentCount=connectorConnectionPoolRuntimeActiveConnectionsCurrentCount, pageFlowsRuntimeAppName=pageFlowsRuntimeAppName, coherenceServerStartObjectName=coherenceServerStartObjectName, coherenceServerStartType=coherenceServerStartType, jmsConnectionRuntimeSessionsHighCount=jmsConnectionRuntimeSessionsHighCount, securityConfigurationDowngradeUntrustedPrincipals=securityConfigurationDowngradeUntrustedPrincipals, wldfFileArchiveRuntimeType=wldfFileArchiveRuntimeType, connectorConnectionPoolRuntimeFreeConnectionsCurrentCount=connectorConnectionPoolRuntimeFreeConnectionsCurrentCount, clusterHealthCheckPeriodsUntilFencing=clusterHealthCheckPeriodsUntilFencing, jobRuntimeType=jobRuntimeType, serverDebugDebugJpaEnhance=serverDebugDebugJpaEnhance, xmlEntitySpecRegistrySystemId=xmlEntitySpecRegistrySystemId, jrockitRuntimeNumberOfProcessors=jrockitRuntimeNumberOfProcessors, webServerLogLoggingEnabled=webServerLogLoggingEnabled, webAppContainerRetainOriginalURL=webAppContainerRetainOriginalURL, wlssnmpAgentRuntimeLogMessageTrapCount=wlssnmpAgentRuntimeLogMessageTrapCount, safConversationRuntimeIndex=safConversationRuntimeIndex, clusterClusterMessagingMode=clusterClusterMessagingMode, jmsSessionPoolIndex=jmsSessionPoolIndex, ejbContainerEntry=ejbContainerEntry, jmsVirtualDestinationName=jmsVirtualDestinationName, serverDebugDebugIIOPMarshal=serverDebugDebugIIOPMarshal, connectorComponentRuntimeEISResourceId=connectorComponentRuntimeEISResourceId, wldfFileArchiveRuntimeIncrementalIndexCycleCount=wldfFileArchiveRuntimeIncrementalIndexCycleCount, networkAccessPointListenPort=networkAccessPointListenPort, nodeManagerName=nodeManagerName, webserviceSecurityTokenObjectName=webserviceSecurityTokenObjectName, serverChannelRuntimeParent=serverChannelRuntimeParent, domainLibraryIndex=domainLibraryIndex, wtctBridgeGlobalTuxFactory=wtctBridgeGlobalTuxFactory, wseeOperationRuntimeDispatchTimeLow=wseeOperationRuntimeDispatchTimeLow, webServicePhysicalStoreIndex=webServicePhysicalStoreIndex, domainObjectName=domainObjectName, ejbComponentKeepGenerated=ejbComponentKeepGenerated, serverLifeCycleRuntimeMiddlewareHome=serverLifeCycleRuntimeMiddlewareHome, jmsServerMessagesThresholdLow=jmsServerMessagesThresholdLow, jdbcStoreXAResourceName=jdbcStoreXAResourceName, unicastMessagingRuntimeGroups=unicastMessagingRuntimeGroups, executeQueueEntry=executeQueueEntry, jdbcDataSourceFactoryUserName=jdbcDataSourceFactoryUserName, securityConfigurationConsoleFullDelegationEnabled=securityConfigurationConsoleFullDelegationEnabled, springViewResolverRuntimeEntry=springViewResolverRuntimeEntry, wlecConnectionPoolRuntimeCertificateBasedAuthentication=wlecConnectionPoolRuntimeCertificateBasedAuthentication, serverFailureTriggerType=serverFailureTriggerType, manAsyncReplicationRuntimeSessionsWaitingForFlushCount=manAsyncReplicationRuntimeSessionsWaitingForFlushCount, connectorConnectionRuntimeCurrentlyInUse=connectorConnectionRuntimeCurrentlyInUse, wseeOperationRuntimeName=wseeOperationRuntimeName, maxThreadsConstraintRuntimeIndex=maxThreadsConstraintRuntimeIndex, webServiceRequestBufferingQueueType=webServiceRequestBufferingQueueType, wldfImageRuntimeName=wldfImageRuntimeName, migrationDataRuntimeTable=migrationDataRuntimeTable, wtctBridgeRedirectParent=wtctBridgeRedirectParent, remoteSAFContextJndiProperty=remoteSAFContextJndiProperty, wseePortPolicyRuntimeTotalFaults=wseePortPolicyRuntimeTotalFaults, iiopMaxMessageSize=iiopMaxMessageSize, transactionResourceRuntimeParent=transactionResourceRuntimeParent, embeddedLDAPBackupMinute=embeddedLDAPBackupMinute, wtcPasswordType=wtcPasswordType, wlssnmpStringMonitorObjectName=wlssnmpStringMonitorObjectName, virtualHostPostTimeoutSecs=virtualHostPostTimeoutSecs, entityCacheRuntimeObjectName=entityCacheRuntimeObjectName, serverLifeCycleTaskRuntimeSystemTask=serverLifeCycleTaskRuntimeSystemTask, wlecConnectionPoolRuntimePoolName=wlecConnectionPoolRuntimePoolName, errorHandlingLogPolicy=errorHandlingLogPolicy, wtctBridgeGlobalTimeout=wtctBridgeGlobalTimeout, connectorComponentRuntimeSuspendedState=connectorComponentRuntimeSuspendedState, ejbContainerTable=ejbContainerTable, serviceMigrationRuntimeEntry=serviceMigrationRuntimeEntry, nonXAResourceRuntimeName=nonXAResourceRuntimeName, wsrmRemoteEndpointRuntimeDowntimeTotal=wsrmRemoteEndpointRuntimeDowntimeTotal, jmsPooledConnectionRuntimeTable=jmsPooledConnectionRuntimeTable, connectorComponentRuntimeName=connectorComponentRuntimeName, jtaMigratableTargetPostScriptFailureFatal=jtaMigratableTargetPostScriptFailureFatal, migrationDataRuntimeMigrationStartTime=migrationDataRuntimeMigrationStartTime, cacheEvictionPolicy=cacheEvictionPolicy, nodeManagerInstalledVMMAdapters=nodeManagerInstalledVMMAdapters, joltConnectionRuntimeInTransaction=joltConnectionRuntimeInTransaction, ejbCacheRuntimeCachedBeansCurrentCount=ejbCacheRuntimeCachedBeansCurrentCount, connectorConnectionRuntimeType=connectorConnectionRuntimeType, connectorComponentRuntimeActiveVersion=connectorComponentRuntimeActiveVersion, serviceMigrationDataRuntimeMigratedTo=serviceMigrationDataRuntimeMigratedTo, wldfWlstoreArchiveRuntimeDataRetirementTotalTime=wldfWlstoreArchiveRuntimeDataRetirementTotalTime, wldfHarvesterRuntimeCurrentSnapshotElapsedTime=wldfHarvesterRuntimeCurrentSnapshotElapsedTime, wldfWatchNotificationRuntimeType=wldfWatchNotificationRuntimeType, jrockitRuntimeFreeHeap=jrockitRuntimeFreeHeap, jmsPooledConnectionRuntimeNumFailuresToRefresh=jmsPooledConnectionRuntimeNumFailuresToRefresh, jmsBridgeDestinationConnectionFactoryJNDIName=jmsBridgeDestinationConnectionFactoryJNDIName, kernelMaxCOMMessageSize=kernelMaxCOMMessageSize, wanreplicationRuntimeObjectName=wanreplicationRuntimeObjectName)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", networkChannelTable=networkChannelTable, coherenceServerStartJavaVendor=coherenceServerStartJavaVendor, ejbTransactionRuntimeIndex=ejbTransactionRuntimeIndex, jMSDurableSubscriberRuntimeBytesPendingCount=jMSDurableSubscriberRuntimeBytesPendingCount, kernelIdlePeriodsUntilTimeout=kernelIdlePeriodsUntilTimeout, wseeMcRuntimeObjectName=wseeMcRuntimeObjectName, jmsServerRuntimeBytesPageableCurrentCount=jmsServerRuntimeBytesPageableCurrentCount, serverDebugDebugConfigurationEdit=serverDebugDebugConfigurationEdit, serverDebugDebugSecuritySAMLService=serverDebugDebugSecuritySAMLService, wanreplicationRuntimeNumberOfSessionsFlushedToTheDatabase=wanreplicationRuntimeNumberOfSessionsFlushedToTheDatabase, maxThreadsConstraintTable=maxThreadsConstraintTable, springViewResolverRuntimeName=springViewResolverRuntimeName, unixMachinePostBindGID=unixMachinePostBindGID, jtaRuntimeObjectName=jtaRuntimeObjectName, onsClientRuntimeName=onsClientRuntimeName, serverDebugDebugEjbSecurity=serverDebugDebugEjbSecurity, jmsServerRuntimeBytesPagedOutTotalCount=jmsServerRuntimeBytesPagedOutTotalCount, migrationDataRuntimeEntry=migrationDataRuntimeEntry, serverChannelRuntimeMessagesReceivedCount=serverChannelRuntimeMessagesReceivedCount, joltConnectionServiceRuntimeType=joltConnectionServiceRuntimeType, wldfImageRuntimeObjectName=wldfImageRuntimeObjectName, wseeOperationRuntimeDispatchTimeHigh=wseeOperationRuntimeDispatchTimeHigh, wldfWlstoreArchiveRuntimeName=wldfWlstoreArchiveRuntimeName, serverLifeCycleTaskRuntimeType=serverLifeCycleTaskRuntimeType, wtctBridgeGlobalType=wtctBridgeGlobalType, serverDebugDebugEjbCmpDeployment=serverDebugDebugEjbCmpDeployment, deploymentTaskRuntimeInUse=deploymentTaskRuntimeInUse, wtcExportParent=wtcExportParent, jmsSAFMessageLogFileFileTimeSpan=jmsSAFMessageLogFileFileTimeSpan, statelessEJBRuntimeEntry=statelessEJBRuntimeEntry, jdbcOracleDataSourceInstanceRuntimeSignature=jdbcOracleDataSourceInstanceRuntimeSignature, wldfWatchNotificationRuntimeEntry=wldfWatchNotificationRuntimeEntry, safAgentRuntimeConversationsCurrentCount=safAgentRuntimeConversationsCurrentCount, jvmRuntimeParent=jvmRuntimeParent, defaultFileStoreBlockSize=defaultFileStoreBlockSize, securityName=securityName, kernelPeriodLength=kernelPeriodLength, wldfHarvesterRuntimeTotalSamplingTimeOutlierCount=wldfHarvesterRuntimeTotalSamplingTimeOutlierCount, wldfFileArchiveRuntimeIncrementalIndexTime=wldfFileArchiveRuntimeIncrementalIndexTime, logLogFileRotationDir=logLogFileRotationDir, webServicePhysicalStoreObjectName=webServicePhysicalStoreObjectName, connectorConnectionPoolRuntimeNumberDetectedLeaks=connectorConnectionPoolRuntimeNumberDetectedLeaks, singleSignOnServicesRuntimeIndex=singleSignOnServicesRuntimeIndex, wtcImportObjectName=wtcImportObjectName, pageFlowActionRuntimeHandledExceptionDispatchTimeAverage=pageFlowActionRuntimeHandledExceptionDispatchTimeAverage, deploymentTaskRuntimeIndex=deploymentTaskRuntimeIndex, cacheTransactionEntry=cacheTransactionEntry, serverDebugDebugXMLEntityCacheIncludeLocation=serverDebugDebugXMLEntityCacheIncludeLocation, networkChannelSSLListenPort=networkChannelSSLListenPort, wlecConnectionRuntimeName=wlecConnectionRuntimeName, serverJMSDefaultConnectionFactoriesEnabled=serverJMSDefaultConnectionFactoriesEnabled, jmsMessageLogFileFileTimeSpan=jmsMessageLogFileFileTimeSpan, serverDebugDebugSSL=serverDebugDebugSSL, wlsServerStart=wlsServerStart, jmsServerPagingMaxFileSize=jmsServerPagingMaxFileSize, libraryRuntimeSpecificationVersion=libraryRuntimeSpecificationVersion, xmlEntitySpecRegistryParent=xmlEntitySpecRegistryParent, jobSchedulerRuntimeType=jobSchedulerRuntimeType, wseePortPolicyRuntimeTotalSecurityFaults=wseePortPolicyRuntimeTotalSecurityFaults, webAppContainerMaxPostSize=webAppContainerMaxPostSize, jPAEntry=jPAEntry, pageFlowRuntimeName=pageFlowRuntimeName, virtualHostOverloadResponseCode=virtualHostOverloadResponseCode, nodeManagerParent=nodeManagerParent, jmsDestinationRuntimeConsumersTotalCount=jmsDestinationRuntimeConsumersTotalCount, kernelMaxIIOPMessageSize=kernelMaxIIOPMessageSize, appClientComponentRuntimeModuleId=appClientComponentRuntimeModuleId, serverDebugDebugBootstrapServlet=serverDebugDebugBootstrapServlet, wseeOperationRuntimeExecutionTimeLow=wseeOperationRuntimeExecutionTimeLow, jmsDestCommonIndex=jmsDestCommonIndex, jrockitRuntimeUsedHeap=jrockitRuntimeUsedHeap, wsReliableDeliveryPolicyDefaultRetryInterval=wsReliableDeliveryPolicyDefaultRetryInterval, wlssnmpLogFilterTable=wlssnmpLogFilterTable, jdbcDataSourceRuntimePrepStmtCacheMissCount=jdbcDataSourceRuntimePrepStmtCacheMissCount, joltConnectionPoolRuntimePoolState=joltConnectionPoolRuntimePoolState, jmsSessionPoolRuntimeObjectName=jmsSessionPoolRuntimeObjectName, xmlRegistryParent=xmlRegistryParent, jmsServerRuntimeInsertionPaused=jmsServerRuntimeInsertionPaused, snmpAgentInformEnabled=snmpAgentInformEnabled, sslEnabled=sslEnabled, jmsSAFMessageLogFileType=jmsSAFMessageLogFileType, connectorConnectionPoolRuntimeTable=connectorConnectionPoolRuntimeTable, wseeClusterFrontEndRuntimeTable=wseeClusterFrontEndRuntimeTable, foreignJNDILinkName=foreignJNDILinkName, jmsSessionRuntimeType=jmsSessionRuntimeType, safRemoteEndpointRuntimeObjectName=safRemoteEndpointRuntimeObjectName, serverDebugDebugRAConnections=serverDebugDebugRAConnections, mailSessionEntry=mailSessionEntry, overloadProtectionEntry=overloadProtectionEntry, appRuntimeStateRuntimeTable=appRuntimeStateRuntimeTable, trapALSBAlertServiceName=trapALSBAlertServiceName, messagingBridgeReconnectDelayMinimum=messagingBridgeReconnectDelayMinimum, wldfWlstoreArchiveRuntimeDataRetirementCycles=wldfWlstoreArchiveRuntimeDataRetirementCycles, wlssnmpProxyIndex=wlssnmpProxyIndex, connectorConnectionPoolRuntimeFreeConnectionsHighCount=connectorConnectionPoolRuntimeFreeConnectionsHighCount, httpProxyTable=httpProxyTable, serverDebugDebugJTARMI=serverDebugDebugJTARMI, jmsDestinationRuntimeConsumersCurrentCount=jmsDestinationRuntimeConsumersCurrentCount, wsrmRemoteEndpointRuntimeMessagesReceivedCount=wsrmRemoteEndpointRuntimeMessagesReceivedCount, connectorConnectionPoolRuntimeMCFClassName=connectorConnectionPoolRuntimeMCFClassName, wldfServerDiagnosticType=wldfServerDiagnosticType, jdbcConnectionPoolRuntimeEnabled=jdbcConnectionPoolRuntimeEnabled, trapWatchAlarmResetPeriod=trapWatchAlarmResetPeriod, jmsServerMessagesThresholdHigh=jmsServerMessagesThresholdHigh, kodoDataCacheRuntimeEntry=kodoDataCacheRuntimeEntry, kodoQueryCacheRuntimeIndex=kodoQueryCacheRuntimeIndex, cacheStoreBufferMaxSize=cacheStoreBufferMaxSize, servletSessionRuntimeIndex=servletSessionRuntimeIndex, remoteSAFContextUsername=remoteSAFContextUsername, minThreadsConstraintRuntimePendingRequests=minThreadsConstraintRuntimePendingRequests, jrockitRuntimeJavaVendor=jrockitRuntimeJavaVendor, wseeOperationRuntimeResponseErrorCount=wseeOperationRuntimeResponseErrorCount, jdbcStoreCreateTableDDLFile=jdbcStoreCreateTableDDLFile, safConversationRuntimeTable=safConversationRuntimeTable, safRuntimeName=safRuntimeName, jdbcConnectionPoolRuntimeActiveConnectionsAverageCount=jdbcConnectionPoolRuntimeActiveConnectionsAverageCount, jMSDurableSubscriberRuntimeMessagesPendingCount=jMSDurableSubscriberRuntimeMessagesPendingCount, entityCacheCumulativeRuntimeTotalItemsDiskPurged=entityCacheCumulativeRuntimeTotalItemsDiskPurged, jmsServerRuntimeSessionPoolsCurrentCount=jmsServerRuntimeSessionPoolsCurrentCount, cacheTransactionName=cacheTransactionName, wseePolicyRuntimeEntry=wseePolicyRuntimeEntry, serverDebugDebugSecuritySAMLCredMap=serverDebugDebugSecuritySAMLCredMap, persistentStoreRuntimeType=persistentStoreRuntimeType, jtaWSATTransportSecurityMode=jtaWSATTransportSecurityMode, domainLibraryObjectName=domainLibraryObjectName, webServiceRuntimeServiceName=webServiceRuntimeServiceName, wtcRemoteTuxDomConnPrincipalName=wtcRemoteTuxDomConnPrincipalName, wldfInstrumentationRuntimeCallJoinpointCount=wldfInstrumentationRuntimeCallJoinpointCount, webAppContainerAllowAllRoles=webAppContainerAllowAllRoles, webAppContainerTable=webAppContainerTable, wtcExportObjectName=wtcExportObjectName, trapAttributeName=trapAttributeName, xmlEntityCacheCacheTimeoutInterval=xmlEntityCacheCacheTimeoutInterval, wldfWatchNotificationRuntimeMaximumHarvesterWatchEvaluationTime=wldfWatchNotificationRuntimeMaximumHarvesterWatchEvaluationTime, wseePortRuntimeEntry=wseePortRuntimeEntry, jdbcServiceRuntimeName=jdbcServiceRuntimeName, overloadProtectionType=overloadProtectionType, maxThreadsConstraintRuntimeTable=maxThreadsConstraintRuntimeTable, jmsRemoteEndpointRuntimeLastTimeFailedToConnect=jmsRemoteEndpointRuntimeLastTimeFailedToConnect, singleSignOnServicesRuntimeType=singleSignOnServicesRuntimeType, wldfWatchJMXNotificationRuntimeType=wldfWatchJMXNotificationRuntimeType, connectorConnectionPoolRuntimeConnectionFactoryName=connectorConnectionPoolRuntimeConnectionFactoryName, executeQueueRuntimeExecuteThreadCurrentIdleCount=executeQueueRuntimeExecuteThreadCurrentIdleCount, serverDebugDebugDiagnosticWatch=serverDebugDebugDiagnosticWatch, maxThreadsConstraintRuntimeName=maxThreadsConstraintRuntimeName, wtcImportParent=wtcImportParent, connectorComponentRuntimeDeploymentState=connectorComponentRuntimeDeploymentState, minThreadsConstraintRuntimeCompletedRequests=minThreadsConstraintRuntimeCompletedRequests, joltConnectionServiceRuntimeName=joltConnectionServiceRuntimeName, connectorConnectionPoolRuntimeResourceLink=connectorConnectionPoolRuntimeResourceLink, appClientComponentRuntimeTable=appClientComponentRuntimeTable, manReplicationRuntimeIndex=manReplicationRuntimeIndex, selfTuningName=selfTuningName, messageDrivenEJBRuntimeJMSConnectionAlive=messageDrivenEJBRuntimeJMSConnectionAlive, jmsServerAllowsPersistentDowngrade=jmsServerAllowsPersistentDowngrade, wtctBridgeGlobalParent=wtctBridgeGlobalParent, httpProxyMaxHealthCheckInterval=httpProxyMaxHealthCheckInterval, wlssnmpStringMonitorType=wlssnmpStringMonitorType, webServicePhysicalStoreTable=webServicePhysicalStoreTable, appDeploymentRuntimeApplicationVersion=appDeploymentRuntimeApplicationVersion, transactionNameRuntimeTransactionName=transactionNameRuntimeTransactionName, unixMachinePostBindGIDEnabled=unixMachinePostBindGIDEnabled, threadPoolRuntimeSharedCapacityForWorkManagers=threadPoolRuntimeSharedCapacityForWorkManagers, wldfDataAccessRuntimeType=wldfDataAccessRuntimeType, capacityObjectName=capacityObjectName, logParent=logParent, connectorConnectionRuntimeUserName=connectorConnectionRuntimeUserName, serverRuntimeAdminServerListenPortSecure=serverRuntimeAdminServerListenPortSecure, entityCacheCumulativeRuntimeTotalSizeOfRejections=entityCacheCumulativeRuntimeTotalSizeOfRejections, webPubSubRuntimeIndex=webPubSubRuntimeIndex, jPAObjectName=jPAObjectName, clusterHealthCheckIntervalMillis=clusterHealthCheckIntervalMillis, connectorConnectionPoolRuntimeConnectionIdleProfileCount=connectorConnectionPoolRuntimeConnectionIdleProfileCount, springApplicationContextRuntimePrototypeBeansCreatedCount=springApplicationContextRuntimePrototypeBeansCreatedCount, connectorConnectionPoolRuntimeConnectionsDestroyedTotalCount=connectorConnectionPoolRuntimeConnectionsDestroyedTotalCount, userLockoutManagerRuntimeInvalidLoginAttemptsTotalCount=userLockoutManagerRuntimeInvalidLoginAttemptsTotalCount, wldfRuntimeType=wldfRuntimeType, wlecConnectionServiceRuntimeEntry=wlecConnectionServiceRuntimeEntry, jMSDurableSubscriberRuntimeType=jMSDurableSubscriberRuntimeType, jtaName=jtaName, wldfWlstoreArchiveRuntimeType=wldfWlstoreArchiveRuntimeType, messagingBridgeObjectName=messagingBridgeObjectName, singleSignOnServicesLoginURL=singleSignOnServicesLoginURL, serverDebugDebugDiagnosticJdbcArchive=serverDebugDebugDiagnosticJdbcArchive, entityCacheCumulativeRuntimeAvgPerEntryDiskSize=entityCacheCumulativeRuntimeAvgPerEntryDiskSize, jtaMigratableTargetMillisToSleepBetweenAttempts=jtaMigratableTargetMillisToSleepBetweenAttempts, serverDebugDebugDRSCalls=serverDebugDebugDRSCalls, manReplicationRuntimeSecondaryCount=manReplicationRuntimeSecondaryCount, webServerLogRotationType=webServerLogRotationType, serverHealthCheckTimeoutSeconds=serverHealthCheckTimeoutSeconds, jdbcDataSourceTaskRuntimeEntry=jdbcDataSourceTaskRuntimeEntry, nonXAResourceRuntimeTransactionTotalCount=nonXAResourceRuntimeTransactionTotalCount, serverDebugDebugRouting=serverDebugDebugRouting, wlecConnectionRuntimeTable=wlecConnectionRuntimeTable, safAgentBytesThresholdHigh=safAgentBytesThresholdHigh, contextCaseObjectName=contextCaseObjectName, logStdoutLogStack=logStdoutLogStack, springBeanDefinitionRuntimeName=springBeanDefinitionRuntimeName, securityConfigurationObjectName=securityConfigurationObjectName, serverDebugDebugConfigurationRuntime=serverDebugDebugConfigurationRuntime, connectorConnectionRuntimeTransactionId=connectorConnectionRuntimeTransactionId, jmsDestCommonTimeToLiveOverride=jmsDestCommonTimeToLiveOverride, wtctBridgeRedirectDirection=wtctBridgeRedirectDirection, webServiceResponseBufferingQueueIndex=webServiceResponseBufferingQueueIndex, jmsDistributedDestinationEntry=jmsDistributedDestinationEntry, jmsDestinationRuntimeName=jmsDestinationRuntimeName, webServicePhysicalStoreSynchronousWritePolicy=webServicePhysicalStoreSynchronousWritePolicy, trapAttributeType=trapAttributeType, jdbcDataSourceTaskRuntimeEndTime=jdbcDataSourceTaskRuntimeEndTime, jmsPooledConnectionRuntimeTotalNumDestroyed=jmsPooledConnectionRuntimeTotalNumDestroyed, serverDebugDebugWANReplicationDetails=serverDebugDebugWANReplicationDetails, coherenceServerLifeCycleTaskRuntimeBeginTime=coherenceServerLifeCycleTaskRuntimeBeginTime, serverDebugDebugStoreIOLogical=serverDebugDebugStoreIOLogical, webAppComponentWebServers=webAppComponentWebServers, webAppContainerXPoweredByHeaderLevel=webAppContainerXPoweredByHeaderLevel, jtaMaxUniqueNameStatistics=jtaMaxUniqueNameStatistics, jtaMaxTransactions=jtaMaxTransactions, singleSignOnServicesTable=singleSignOnServicesTable, webServerUseHeaderEncoding=webServerUseHeaderEncoding, jvmRuntimeTable=jvmRuntimeTable, serverListenersBindEarly=serverListenersBindEarly, sslName=sslName, kodoQueryCompilationCacheRuntimeType=kodoQueryCompilationCacheRuntimeType, jmsProducerRuntimeTable=jmsProducerRuntimeTable, messagingBridgeReconnectDelayIncrease=messagingBridgeReconnectDelayIncrease, networkAccessPointObjectName=networkAccessPointObjectName, wldfInstrumentationRuntimeObjectName=wldfInstrumentationRuntimeObjectName, joltConnectionPoolUserName=joltConnectionPoolUserName, jmsConnectionRuntimeClientID=jmsConnectionRuntimeClientID, wseeClientOperationRuntimeLastResponseError=wseeClientOperationRuntimeLastResponseError, serverDebugDebugDiagnosticsHarvesterTreeBeanPlugin=serverDebugDebugDiagnosticsHarvesterTreeBeanPlugin, wseeClientOperationRuntimeInvocationCount=wseeClientOperationRuntimeInvocationCount, wldfImageCreationTaskRuntimeObjectName=wldfImageCreationTaskRuntimeObjectName, ejbCacheRuntimeObjectName=ejbCacheRuntimeObjectName, jmsPooledConnectionRuntimeNumAvailable=jmsPooledConnectionRuntimeNumAvailable, jtaRuntimeTransactionTwoPhaseCommittedTotalCount=jtaRuntimeTransactionTwoPhaseCommittedTotalCount, serverVerboseEJBDeploymentEnabled=serverVerboseEJBDeploymentEnabled, wldfFileArchiveRuntimeObjectName=wldfFileArchiveRuntimeObjectName, webServerAcceptContextPathInGetRealPath=webServerAcceptContextPathInGetRealPath, jtaMigratableTargetNonLocalPostAllowed=jtaMigratableTargetNonLocalPostAllowed, wlssnmpAgentDeploymentServerStatusCheckIntervalFactor=wlssnmpAgentDeploymentServerStatusCheckIntervalFactor, wsrmRemoteEndpointRuntimePausedForIncoming=wsrmRemoteEndpointRuntimePausedForIncoming, rmcFactoryIndex=rmcFactoryIndex, webServicePhysicalStoreType=webServicePhysicalStoreType, connectorConnectionPoolRuntimeIndex=connectorConnectionPoolRuntimeIndex, singleSignOnServicesRecipientCheckEnabled=singleSignOnServicesRecipientCheckEnabled, jtaRuntimeTransactionLLRCommittedTotalCount=jtaRuntimeTransactionLLRCommittedTotalCount, springApplicationContextRuntimeGetBeanNamesForTypeCount=springApplicationContextRuntimeGetBeanNamesForTypeCount, manReplicationRuntimeParent=manReplicationRuntimeParent, kernelUse81StyleExecuteQueues=kernelUse81StyleExecuteQueues, customResourceDeploymentOrder=customResourceDeploymentOrder, trapWatchAlarmType=trapWatchAlarmType, joltConnectionPoolEntry=joltConnectionPoolEntry, jmsInteropModuleDescriptorFileName=jmsInteropModuleDescriptorFileName)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", jtaRuntimeTransactionReadOnlyOnePhaseCommittedTotalCount=jtaRuntimeTransactionReadOnlyOnePhaseCommittedTotalCount, persistentStoreConnectionRuntimeObjectCount=persistentStoreConnectionRuntimeObjectCount, serverLifeCycleRuntimeType=serverLifeCycleRuntimeType, wtctBridgeGlobalTuxToJmsPriorityMap=wtctBridgeGlobalTuxToJmsPriorityMap, persistentStoreConnectionRuntimeParent=persistentStoreConnectionRuntimeParent, joltConnectionRuntimePendingRequestCount=joltConnectionRuntimePendingRequestCount, remoteSAFContextJndiInitialContextFactory=remoteSAFContextJndiInitialContextFactory, responseTimeRequestClassName=responseTimeRequestClassName, webServiceReliabilityBaseRetransmissionInterval=webServiceReliabilityBaseRetransmissionInterval, maxThreadsConstraintType=maxThreadsConstraintType, onsClientRuntimeObjectName=onsClientRuntimeObjectName, webServiceReliabilityAcknowledgementInterval=webServiceReliabilityAcknowledgementInterval, wseeV2RuntimeTable=wseeV2RuntimeTable, wldfDataRetirementTaskRuntimeStatus=wldfDataRetirementTaskRuntimeStatus, webserviceCredentialProviderName=webserviceCredentialProviderName, applicationRuntimeName=applicationRuntimeName, joltConnectionPoolTrustStoreName=joltConnectionPoolTrustStoreName, jmsBridgeDestinationDestinationJNDIName=jmsBridgeDestinationDestinationJNDIName, wseePortPolicyRuntimeConfidentialityViolations=wseePortPolicyRuntimeConfidentialityViolations, serverRuntimeAdministrationURL=serverRuntimeAdministrationURL, mailSessionIndex=mailSessionIndex, maxThreadsConstraintEntry=maxThreadsConstraintEntry, networkAccessPointPublicPort=networkAccessPointPublicPort, jmsDestinationRuntimeMessagesPendingCount=jmsDestinationRuntimeMessagesPendingCount, ejbComponentParent=ejbComponentParent, minThreadsConstraintTable=minThreadsConstraintTable, serverDebugDebugJMX=serverDebugDebugJMX, wtcLocalTuxDomSecurity=wtcLocalTuxDomSecurity, serverDebugDebugJMSXA=serverDebugDebugJMSXA, jobSchedulerRuntimeEntry=jobSchedulerRuntimeEntry, kodoPersistenceUnitRuntimeTable=kodoPersistenceUnitRuntimeTable, domainEntry=domainEntry, wlssnmpLogFilterMessageIds=wlssnmpLogFilterMessageIds, nodeManagerAdapter=nodeManagerAdapter, networkChannelCompleteHTTPMessageTimeout=networkChannelCompleteHTTPMessageTimeout, wseePolicySubjectManagerRuntimeTable=wseePolicySubjectManagerRuntimeTable, foreignJNDIProviderIndex=foreignJNDIProviderIndex, serverCompleteT3MessageTimeout=serverCompleteT3MessageTimeout, domainRuntimeType=domainRuntimeType, connectorComponentRuntimeEntry=connectorComponentRuntimeEntry, serverDefaultSecureProtocol=serverDefaultSecureProtocol, defaultFileStoreSynchronousWritePolicy=defaultFileStoreSynchronousWritePolicy, wtctBridgeGlobalObjectName=wtctBridgeGlobalObjectName, fairShareRequestClassFairShare=fairShareRequestClassFairShare, webserviceCredentialProviderIndex=webserviceCredentialProviderIndex, joltConnectionPoolRecvTimeout=joltConnectionPoolRecvTimeout, serverDebugDebugEjbCmpRuntime=serverDebugDebugEjbCmpRuntime, joltConnectionRuntimeRequestCount=joltConnectionRuntimeRequestCount, errorHandlingIndex=errorHandlingIndex, wtctBridgeRedirectEntry=wtctBridgeRedirectEntry, wseeHandlerRuntimeTable=wseeHandlerRuntimeTable, iiopCompleteMessageTimeout=iiopCompleteMessageTimeout, jvmRuntimeName=jvmRuntimeName, jdbcDataSourceRuntimeDatabaseProductName=jdbcDataSourceRuntimeDatabaseProductName, jdbcConnectionPoolRuntimeIndex=jdbcConnectionPoolRuntimeIndex, persistentStoreRuntimeAllocatedIoBufferBytes=persistentStoreRuntimeAllocatedIoBufferBytes, springBeanDefinitionRuntimeResourceDescription=springBeanDefinitionRuntimeResourceDescription, contextRequestClassType=contextRequestClassType, wtcRemoteTuxDomNWAddr=wtcRemoteTuxDomNWAddr, queryCacheRuntimeIndex=queryCacheRuntimeIndex, connectorConnectionRuntimeMaxConnections=connectorConnectionRuntimeMaxConnections, jdbcDataSourceRuntimeModuleId=jdbcDataSourceRuntimeModuleId, serverDebugDebugDiagnosticsHarvesterMBeanPlugin=serverDebugDebugDiagnosticsHarvesterMBeanPlugin, kodoQueryCacheRuntimeCacheMissCount=kodoQueryCacheRuntimeCacheMissCount, pageFlowActionRuntimeSuccessDispatchTimeHigh=pageFlowActionRuntimeSuccessDispatchTimeHigh, serverStagingMode=serverStagingMode, servletRuntimeExecutionTimeAverage=servletRuntimeExecutionTimeAverage, channelRuntimeObjectName=channelRuntimeObjectName, realmRuntimeType=realmRuntimeType, wseeClientPortRuntimeTotalSecurityFaults=wseeClientPortRuntimeTotalSecurityFaults, federationServicesName=federationServicesName, singletonServiceAppScopedCompatibilityName=singletonServiceAppScopedCompatibilityName, trapMonitorValue=trapMonitorValue, wsrmRemoteEndpointRuntimeConversationsHighCount=wsrmRemoteEndpointRuntimeConversationsHighCount, springApplicationContextRuntimeSingletonBeansCreatedCount=springApplicationContextRuntimeSingletonBeansCreatedCount, queryCacheRuntimeCacheMissByTimeoutCount=queryCacheRuntimeCacheMissByTimeoutCount, networkAccessPointEnabled=networkAccessPointEnabled, webAppComponentURI=webAppComponentURI, persistentStoreConnectionRuntimeDeleteCount=persistentStoreConnectionRuntimeDeleteCount, connectorConnectionRuntimeStackTrace=connectorConnectionRuntimeStackTrace, serverMigrationRuntimeClusterMaster=serverMigrationRuntimeClusterMaster, connectorConnectionPoolRuntimeRecycledTotal=connectorConnectionPoolRuntimeRecycledTotal, wlssnmpAgentRuntimeType=wlssnmpAgentRuntimeType, executeQueueRuntimePendingRequestCurrentCount=executeQueueRuntimePendingRequestCurrentCount, webServerLogRotateLogOnStartup=webServerLogRotateLogOnStartup, springBeanDefinitionRuntimeEntry=springBeanDefinitionRuntimeEntry, securityConfigurationEnforceStrictURLPattern=securityConfigurationEnforceStrictURLPattern, deploymentTaskRuntimeEndTime=deploymentTaskRuntimeEndTime, manAsyncReplicationRuntimeActiveServersInRemoteCluster=manAsyncReplicationRuntimeActiveServersInRemoteCluster, serverDebugDebugIIOP=serverDebugDebugIIOP, messageDrivenEJBRuntimeMDBStatus=messageDrivenEJBRuntimeMDBStatus, wseeClientPortRuntimePolicyFaults=wseeClientPortRuntimePolicyFaults, webserviceTokenHandlerClassName=webserviceTokenHandlerClassName, jdbcOracleDataSourceInstanceRuntimeConnectionsTotalCount=jdbcOracleDataSourceInstanceRuntimeConnectionsTotalCount, messageDrivenEJBRuntimeEJBName=messageDrivenEJBRuntimeEJBName, wtcLocalTuxDomEntry=wtcLocalTuxDomEntry, securityConfigurationEnforceValidBasicAuthCredentials=securityConfigurationEnforceValidBasicAuthCredentials, selfTuningIndex=selfTuningIndex, serverDebugDebugDiagnosticInstrumentationWeavingMatches=serverDebugDebugDiagnosticInstrumentationWeavingMatches, jmsBridgeDestinationInitialContextFactory=jmsBridgeDestinationInitialContextFactory, wlssnmpAgentDeploymentSNMPEngineId=wlssnmpAgentDeploymentSNMPEngineId, jobRuntimeTable=jobRuntimeTable, xmlEntitySpecRegistryType=xmlEntitySpecRegistryType, jmsSessionRuntimeMessagesReceivedCount=jmsSessionRuntimeMessagesReceivedCount, wldfWatchNotificationRuntimeTotalEventDataWatchesTriggered=wldfWatchNotificationRuntimeTotalEventDataWatchesTriggered, persistentStoreRuntimeReadCount=persistentStoreRuntimeReadCount, manReplicationRuntimeTable=manReplicationRuntimeTable, jmsServerRuntimeProductionPaused=jmsServerRuntimeProductionPaused, wseeClientOperationRuntimeDispatchTimeAverage=wseeClientOperationRuntimeDispatchTimeAverage, messagingBridgeStarted=messagingBridgeStarted, deploymentTaskRuntimeRunning=deploymentTaskRuntimeRunning, wseeClusterFrontEndRuntimeName=wseeClusterFrontEndRuntimeName, singletonServiceAppScopedEntry=singletonServiceAppScopedEntry, securityConfigurationCrossDomainSecurityEnabled=securityConfigurationCrossDomainSecurityEnabled, deploymentTaskRuntimeSystemTask=deploymentTaskRuntimeSystemTask, singleSignOnServicesName=singleSignOnServicesName, webServiceResponseBufferingQueueTable=webServiceResponseBufferingQueueTable, safAgentMessagesThresholdLow=safAgentMessagesThresholdLow, wlecConnectionRuntimeParent=wlecConnectionRuntimeParent, domainConfigurationVersion=domainConfigurationVersion, wsrmRemoteEndpointRuntimeLastTimeFailedToConnect=wsrmRemoteEndpointRuntimeLastTimeFailedToConnect, userLockoutManagerRuntimeObjectName=userLockoutManagerRuntimeObjectName, jdbcDataSourceRuntimeEnabled=jdbcDataSourceRuntimeEnabled, adminConsoleName=adminConsoleName, wtcRemoteTuxDomAllowAnonymous=wtcRemoteTuxDomAllowAnonymous, configurationPropertyTable=configurationPropertyTable, serverStagingDirectoryName=serverStagingDirectoryName, wtcExportEntry=wtcExportEntry, userLockoutManagerRuntimeInvalidLoginUsersHighCount=userLockoutManagerRuntimeInvalidLoginUsersHighCount, maxThreadsConstraintCount=maxThreadsConstraintCount, wsReliableDeliveryPolicyEntry=wsReliableDeliveryPolicyEntry, timerRuntimeTable=timerRuntimeTable, wseeClusterFrontEndRuntimeType=wseeClusterFrontEndRuntimeType, webserviceTokenHandlerEntry=webserviceTokenHandlerEntry, jdbcDataSourceRuntimeConnectionDelayTime=jdbcDataSourceRuntimeConnectionDelayTime, jdbcOracleDataSourceRuntimeSuccessfulAffinityBasedBorrowCount=jdbcOracleDataSourceRuntimeSuccessfulAffinityBasedBorrowCount, jmsSessionPoolRuntimeType=jmsSessionPoolRuntimeType, safRemoteEndpointRuntimeMessagesPendingCount=safRemoteEndpointRuntimeMessagesPendingCount, logTable=logTable, joltConnectionPoolRuntimeObjectName=joltConnectionPoolRuntimeObjectName, webServerRuntimeParent=webServerRuntimeParent, springTransactionTemplateRuntimeObjectName=springTransactionTemplateRuntimeObjectName, realmRuntimeObjectName=realmRuntimeObjectName, safAgentRuntimeBytesCurrentCount=safAgentRuntimeBytesCurrentCount, singletonServiceClassName=singletonServiceClassName, serverDebugDebugWTCGwtEx=serverDebugDebugWTCGwtEx, serverDebugDebugEjbCaching=serverDebugDebugEjbCaching, jMSDurableSubscriberRuntimeSubscriptionName=jMSDurableSubscriberRuntimeSubscriptionName, securityConnectionFilter=securityConnectionFilter, webAppContainerOverloadProtectionEnabled=webAppContainerOverloadProtectionEnabled, libraryRuntimeIndex=libraryRuntimeIndex, jdbcSystemResourceModuleType=jdbcSystemResourceModuleType, wldfDataRetirementByAgeType=wldfDataRetirementByAgeType, jobRuntimeTimeout=jobRuntimeTimeout, safAgentRuntimeMessagesCurrentCount=safAgentRuntimeMessagesCurrentCount, jobRuntimeDescription=jobRuntimeDescription, joltConnectionRuntimeName=joltConnectionRuntimeName, webAppComponentRuntimeContextRoot=webAppComponentRuntimeContextRoot, serverDebugDebugXMLRegistryIncludeLocation=serverDebugDebugXMLRegistryIncludeLocation, virtualHostUseHeaderEncoding=virtualHostUseHeaderEncoding, manReplicationRuntimeEntry=manReplicationRuntimeEntry, serverDebugDebugSecuritySSL=serverDebugDebugSecuritySSL, alsbTrapVars=alsbTrapVars, ejbContainerExtraEjbcOptions=ejbContainerExtraEjbcOptions, federationServicesPOSTOneUseCheckEnabled=federationServicesPOSTOneUseCheckEnabled, wldfWatchNotificationRuntimeTotalEventDataWatchEvaluations=wldfWatchNotificationRuntimeTotalEventDataWatchEvaluations, minThreadsConstraintName=minThreadsConstraintName, wldfInstrumentationRuntimeInspectedClassesCount=wldfInstrumentationRuntimeInspectedClassesCount, virtualHostFrontendHTTPSPort=virtualHostFrontendHTTPSPort, trapLogUserId=trapLogUserId, jdbcOracleDataSourceRuntimeState=jdbcOracleDataSourceRuntimeState, jmsConnectionRuntimeObjectName=jmsConnectionRuntimeObjectName, networkChannelCompleteCOMMessageTimeout=networkChannelCompleteCOMMessageTimeout, ejbLockingRuntimeWaiterTotalCount=ejbLockingRuntimeWaiterTotalCount, serverDebugDebugJ2EEManagement=serverDebugDebugJ2EEManagement, jtaCompletionTimeoutSeconds=jtaCompletionTimeoutSeconds, wseeOperationConfigurationRuntimePolicyAttachmentSupport=wseeOperationConfigurationRuntimePolicyAttachmentSupport, jtaRuntimeRegisteredNonXAResourceNames=jtaRuntimeRegisteredNonXAResourceNames, messagingBridgeRuntimeDescription=messagingBridgeRuntimeDescription, workManagerRuntimeName=workManagerRuntimeName, serverNativeIOEnabled=serverNativeIOEnabled, jmsSAFMessageLogFileEntry=jmsSAFMessageLogFileEntry, serviceMigrationDataRuntimeMigrationStartTime=serviceMigrationDataRuntimeMigrationStartTime, appDeploymentRuntimeEntry=appDeploymentRuntimeEntry, trapALSBAlertAlertId=trapALSBAlertAlertId, springBeanDefinitionRuntimeParentId=springBeanDefinitionRuntimeParentId, wsrmRemoteEndpointRuntimeEndpointType=wsrmRemoteEndpointRuntimeEndpointType, jrockitRuntimeGenerational=jrockitRuntimeGenerational, federationServicesAssertionStoreClassName=federationServicesAssertionStoreClassName, pageFlowActionRuntimeHandledExceptionDispatchTimeLow=pageFlowActionRuntimeHandledExceptionDispatchTimeLow, deploymentManagerName=deploymentManagerName, jmsDestinationName=jmsDestinationName, xmlParserSelectRegistryTable=xmlParserSelectRegistryTable, webServerSendServerHeaderEnabled=webServerSendServerHeaderEnabled, jmsMessageLogFileRotationType=jmsMessageLogFileRotationType, joltConnectionPoolRuntimeMaxCapacity=joltConnectionPoolRuntimeMaxCapacity, appRuntimeStateRuntimeEntry=appRuntimeStateRuntimeEntry, webPubSubRuntimeEntry=webPubSubRuntimeEntry, singleSignOnServicesIdentityProviderArtifactBindingEnabled=singleSignOnServicesIdentityProviderArtifactBindingEnabled, jdbcOracleDataSourceRuntimePrepStmtCacheMissCount=jdbcOracleDataSourceRuntimePrepStmtCacheMissCount, serverDebugDebugJMXCompatibility=serverDebugDebugJMXCompatibility, connectorConnectionPoolRuntimeHighestNumWaiters=connectorConnectionPoolRuntimeHighestNumWaiters, pageFlowActionRuntimeHandledExceptionDispatchTimeTotal=pageFlowActionRuntimeHandledExceptionDispatchTimeTotal, wtcRemoteTuxDomType=wtcRemoteTuxDomType, embeddedLDAPIndex=embeddedLDAPIndex, webserviceCredentialProviderEntry=webserviceCredentialProviderEntry, webserviceSecurityDefaultCredentialProviderSTSURI=webserviceSecurityDefaultCredentialProviderSTSURI, serverDebugDebugEjbTimers=serverDebugDebugEjbTimers, messageDrivenEJBRuntimeSuspendCount=messageDrivenEJBRuntimeSuspendCount, transactionResourceRuntimeTransactionHeuristicHazardTotalCount=transactionResourceRuntimeTransactionHeuristicHazardTotalCount, connectorComponentRuntimeVendorName=connectorComponentRuntimeVendorName, consoleRuntimeEntry=consoleRuntimeEntry, connectorServiceRuntimeName=connectorServiceRuntimeName, webserviceTokenHandlerTokenType=webserviceTokenHandlerTokenType, singleSignOnServicesIdentityProviderRedirectBindingEnabled=singleSignOnServicesIdentityProviderRedirectBindingEnabled, serviceMigrationDataRuntimeType=serviceMigrationDataRuntimeType, jdbcOracleDataSourceInstanceRuntimeCurrCapacity=jdbcOracleDataSourceInstanceRuntimeCurrCapacity, minThreadsConstraintObjectName=minThreadsConstraintObjectName, persistentStoreConnectionRuntimeObjectName=persistentStoreConnectionRuntimeObjectName, wanreplicationRuntimeSecondaryServerName=wanreplicationRuntimeSecondaryServerName, manReplicationRuntimeObjectName=manReplicationRuntimeObjectName, pageFlowsRuntimeIndex=pageFlowsRuntimeIndex, serverRuntimeObjectName=serverRuntimeObjectName, sslTable=sslTable, serverDebugDebugRSA=serverDebugDebugRSA, rmcFactoryTable=rmcFactoryTable, jmsServerMessageBufferSize=jmsServerMessageBufferSize, serverMSIFileReplicationEnabled=serverMSIFileReplicationEnabled, serverIIOPEnabled=serverIIOPEnabled, serverJNDITransportableObjectFactoryList=serverJNDITransportableObjectFactoryList, foreignJNDIProviderDeploymentOrder=foreignJNDIProviderDeploymentOrder, clusterFrontendHTTPSPort=clusterFrontendHTTPSPort, springRuntimeEntry=springRuntimeEntry, cacheAsyncListenersIndex=cacheAsyncListenersIndex, webServerLogRotationTime=webServerLogRotationTime, wlssnmpGaugeMonitorThresholdHigh=wlssnmpGaugeMonitorThresholdHigh, cacheLoaderObjectName=cacheLoaderObjectName, userLockoutManagerRuntimeLockedUsersCurrentCount=userLockoutManagerRuntimeLockedUsersCurrentCount, entityCacheCumulativeRuntimeObjectName=entityCacheCumulativeRuntimeObjectName, iiopSystemSecurity=iiopSystemSecurity, jdbcOracleDataSourceRuntimeActiveConnectionsHighCount=jdbcOracleDataSourceRuntimeActiveConnectionsHighCount, connectorServiceRuntimeIndex=connectorServiceRuntimeIndex, webServerRuntimeType=webServerRuntimeType, wldfDataAccessRuntimeObjectName=wldfDataAccessRuntimeObjectName, jmsSessionRuntimeBytesPendingCount=jmsSessionRuntimeBytesPendingCount, wldfHarvesterRuntimeObjectName=wldfHarvesterRuntimeObjectName, wldfHarvesterRuntimeMaximumSamplingTime=wldfHarvesterRuntimeMaximumSamplingTime, wlssnmpTrapDestinationHost=wlssnmpTrapDestinationHost, wldfDataRetirementByAgeIndex=wldfDataRetirementByAgeIndex, virtualHostMaxPostSize=virtualHostMaxPostSize, cacheLoaderName=cacheLoaderName, cacheStoreBufferWriteTimeout=cacheStoreBufferWriteTimeout, statefulEJBRuntimeName=statefulEJBRuntimeName, jmsDestCommonRedeliveryLimit=jmsDestCommonRedeliveryLimit)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", clusterRuntimeTable=clusterRuntimeTable, jmsDestinationRuntimeMessagesMovedCurrentCount=jmsDestinationRuntimeMessagesMovedCurrentCount, maxThreadsConstraintName=maxThreadsConstraintName, serverDebugDebugJTARecovery=serverDebugDebugJTARecovery, wlecConnectionPoolEntry=wlecConnectionPoolEntry, jmsDistributedDestinationMemberEntry=jmsDistributedDestinationMemberEntry, jmsVirtualDestinationJNDIName=jmsVirtualDestinationJNDIName, webserviceSecurityTokenClassName=webserviceSecurityTokenClassName, safRuntimeObjectName=safRuntimeObjectName, wldfDataRetirementTaskRuntimeIndex=wldfDataRetirementTaskRuntimeIndex, manAsyncReplicationRuntimeRemoteClusterReachable=manAsyncReplicationRuntimeRemoteClusterReachable, wseeRuntimeEntry=wseeRuntimeEntry, safConversationRuntimeEntry=safConversationRuntimeEntry, wldfFileArchiveRuntimeEntry=wldfFileArchiveRuntimeEntry, securityConnectionLoggerEnabled=securityConnectionLoggerEnabled, webServerFrontendHTTPPort=webServerFrontendHTTPPort, serverDebugDebugDRSUpdateStatus=serverDebugDebugDRSUpdateStatus, coherenceServerLifeCycleTaskRuntimeEntry=coherenceServerLifeCycleTaskRuntimeEntry, connectorConnectionPoolRuntimeProxyOn=connectorConnectionPoolRuntimeProxyOn, wtcLocalTuxDomTable=wtcLocalTuxDomTable, serverDebugDebugIIOPTransport=serverDebugDebugIIOPTransport, connectorConnectionPoolRuntimeTestable=connectorConnectionPoolRuntimeTestable, springTransactionManagerRuntimeTable=springTransactionManagerRuntimeTable, wldfHarvesterRuntimeTotalDataSampleCount=wldfHarvesterRuntimeTotalDataSampleCount, ejbContainerJavaCompilerPreClassPath=ejbContainerJavaCompilerPreClassPath, workManagerShutdownTriggerStuckThreadCount=workManagerShutdownTriggerStuckThreadCount, wtcResourcesTable=wtcResourcesTable, jmsSessionPoolTable=jmsSessionPoolTable, defaultFileStoreType=defaultFileStoreType, transactionResourceRuntimeIndex=transactionResourceRuntimeIndex, serverDebugDebugXMLRegistryUseShortClass=serverDebugDebugXMLRegistryUseShortClass, jdbcDataSourceRuntimeReserveRequestCount=jdbcDataSourceRuntimeReserveRequestCount, serverDebugDiagnosticContextDebugMode=serverDebugDiagnosticContextDebugMode, wldfWatchNotificationRuntimeTotalEventDataEvaluationCycles=wldfWatchNotificationRuntimeTotalEventDataEvaluationCycles, connectorConnectionPoolRuntimeName=connectorConnectionPoolRuntimeName, jmsConsumerRuntimeParent=jmsConsumerRuntimeParent, webServiceType=webServiceType, interceptionComponentRuntimeDeploymentState=interceptionComponentRuntimeDeploymentState, jmsServerTemporaryTemplateResource=jmsServerTemporaryTemplateResource, wtcLocalTuxDomMaxRetries=wtcLocalTuxDomMaxRetries, databaseLessLeasingBasisObjectName=databaseLessLeasingBasisObjectName, wldfDataRetirementTaskRuntimeTable=wldfDataRetirementTaskRuntimeTable, wseeOperationConfigurationRuntimePolicySubjectResourcePattern=wseeOperationConfigurationRuntimePolicySubjectResourcePattern, workManagerRuntimeApplicationName=workManagerRuntimeApplicationName, wldfWlstoreArchiveRuntimeLastDataRetirementTime=wldfWlstoreArchiveRuntimeLastDataRetirementTime, jdbcConnectionPoolRuntimeStatementProfileCount=jdbcConnectionPoolRuntimeStatementProfileCount, taskRuntimeEntry=taskRuntimeEntry, ejbContainerKeepGenerated=ejbContainerKeepGenerated, jmsDistributedDestinationObjectName=jmsDistributedDestinationObjectName, entityCacheCumulativeRuntimeType=entityCacheCumulativeRuntimeType, jmsPooledConnectionRuntimeObjectName=jmsPooledConnectionRuntimeObjectName, snmpAgentSNMPEngineId=snmpAgentSNMPEngineId, serverDebugDebugSNMPExtensionProvider=serverDebugDebugSNMPExtensionProvider, xmlParserSelectRegistryPublicId=xmlParserSelectRegistryPublicId, safAgentMaximumMessageSize=safAgentMaximumMessageSize, virtualDestinationName=virtualDestinationName, jdbcSystemResourceDeploymentPrincipalName=jdbcSystemResourceDeploymentPrincipalName, wldfDataAccessRuntimeEntry=wldfDataAccessRuntimeEntry, jtaRuntimeTransactionCommittedTotalCount=jtaRuntimeTransactionCommittedTotalCount, webAppComponentRuntimeType=webAppComponentRuntimeType, kodoPersistenceUnitRuntimePersistenceUnitName=kodoPersistenceUnitRuntimePersistenceUnitName, wldfWatchNotificationRuntimeTotalLogWatchEvaluations=wldfWatchNotificationRuntimeTotalLogWatchEvaluations, domainLibraryVersionIdentifier=domainLibraryVersionIdentifier, connectorConnectionPoolRuntimeEISResourceId=connectorConnectionPoolRuntimeEISResourceId, jmsInteropModuleType=jmsInteropModuleType, trapLogSubsystem=trapLogSubsystem, entityCacheRuntimeParent=entityCacheRuntimeParent, jdbcOracleDataSourceRuntimeWaitSecondsHighCount=jdbcOracleDataSourceRuntimeWaitSecondsHighCount, serverChannelRuntimeChannelName=serverChannelRuntimeChannelName, springTransactionManagerRuntimeCommitCount=springTransactionManagerRuntimeCommitCount, jdbcConnectionPoolRuntimeNumUnavailable=jdbcConnectionPoolRuntimeNumUnavailable, singleSignOnServicesArtifactMaxCacheSize=singleSignOnServicesArtifactMaxCacheSize, webServerLogIndex=webServerLogIndex, trapAttributeNewVal=trapAttributeNewVal, wtctBridgeRedirectTranslateFML=wtctBridgeRedirectTranslateFML, remoteSAFContextTable=remoteSAFContextTable, wlssnmpAgentDeploymentMaxInformRetryCount=wlssnmpAgentDeploymentMaxInformRetryCount, jobRuntimeIndex=jobRuntimeIndex, serverClasspathServletDisabled=serverClasspathServletDisabled, wtcLocalTuxDomAccessPoint=wtcLocalTuxDomAccessPoint, webAppContainerWorkContextPropagationEnabled=webAppContainerWorkContextPropagationEnabled, clusterRuntimeIndex=clusterRuntimeIndex, jmsRemoteEndpointRuntimeFailedMessagesTotal=jmsRemoteEndpointRuntimeFailedMessagesTotal, nodeManagerAdapterName=nodeManagerAdapterName, serverDebugDebugScaContainer=serverDebugDebugScaContainer, serverHealthCheckStartDelaySeconds=serverHealthCheckStartDelaySeconds, minThreadsConstraintRuntimeParent=minThreadsConstraintRuntimeParent, jMSDurableSubscriberRuntimeSubscriptionSharingPolicy=jMSDurableSubscriberRuntimeSubscriptionSharingPolicy, serviceMigrationDataRuntimeMigratedFrom=serviceMigrationDataRuntimeMigratedFrom, iiopParent=iiopParent, logIndex=logIndex, persistentStoreRuntimeDeleteCount=persistentStoreRuntimeDeleteCount, serverLifeCycleRuntimeObjectName=serverLifeCycleRuntimeObjectName, wldfImageRuntimeType=wldfImageRuntimeType, migrationDataRuntimeStatus=migrationDataRuntimeStatus, webserviceCredentialProviderType=webserviceCredentialProviderType, ejbComponentObjectName=ejbComponentObjectName, wsrmRemoteEndpointRuntimeFailedMessagesTotal=wsrmRemoteEndpointRuntimeFailedMessagesTotal, serverDebugDebugJTAJDBC=serverDebugDebugJTAJDBC, connectorComponentRuntimeComponentName=connectorComponentRuntimeComponentName, jdbcOracleDataSourceRuntimeActiveConnectionsCurrentCount=jdbcOracleDataSourceRuntimeActiveConnectionsCurrentCount, jdbcDataSourceRuntimeCurrCapacity=jdbcDataSourceRuntimeCurrCapacity, taskRuntimeTable=taskRuntimeTable, jvmRuntimeHeapFreeCurrent=jvmRuntimeHeapFreeCurrent, jmsDestCommonRedeliveryDelayOverride=jmsDestCommonRedeliveryDelayOverride, safAgentTable=safAgentTable, wlssnmpProxyPort=wlssnmpProxyPort, jmsRemoteEndpointRuntimeMessagesHighCount=jmsRemoteEndpointRuntimeMessagesHighCount, serverRuntimeSSLListenAddress=serverRuntimeSSLListenAddress, wseeClusterRoutingRuntimeName=wseeClusterRoutingRuntimeName, springTransactionTemplateRuntimeAverageExecuteTime=springTransactionTemplateRuntimeAverageExecuteTime, webserviceSecurityPolicySelectionPreference=webserviceSecurityPolicySelectionPreference, serverScatteredReadsEnabled=serverScatteredReadsEnabled, jdbcDataSourceRuntimeDriverVersion=jdbcDataSourceRuntimeDriverVersion, jtaRecoveryRuntimeEntry=jtaRecoveryRuntimeEntry, maxThreadsConstraintObjectName=maxThreadsConstraintObjectName, wlssnmpLogFilterUserIds=wlssnmpLogFilterUserIds, springApplicationContextRuntimeName=springApplicationContextRuntimeName, serverExtraRmicOptions=serverExtraRmicOptions, ejbTimerRuntimeDisabledTimerCount=ejbTimerRuntimeDisabledTimerCount, jtaRuntimeTransactionTotalCount=jtaRuntimeTransactionTotalCount, jmsDestinationObjectName=jmsDestinationObjectName, logFileCount=logFileCount, logFilterEntry=logFilterEntry, wtcRuntimeEntry=wtcRuntimeEntry, coherenceServerLifeCycleTaskRuntimeTable=coherenceServerLifeCycleTaskRuntimeTable, jdbcDataSourceRuntimeActiveConnectionsCurrentCount=jdbcDataSourceRuntimeActiveConnectionsCurrentCount, safRemoteEndpointRuntimeMessagesReceivedCount=safRemoteEndpointRuntimeMessagesReceivedCount, appDeploymentRuntimeObjectName=appDeploymentRuntimeObjectName, jdbcOracleDataSourceInstanceRuntimeState=jdbcOracleDataSourceInstanceRuntimeState, safAgentServiceType=safAgentServiceType, pageFlowRuntimeIndex=pageFlowRuntimeIndex, jtaMigratableTargetNumberOfRestartAttempts=jtaMigratableTargetNumberOfRestartAttempts, jdbcDriverRuntimeIndex=jdbcDriverRuntimeIndex, entityCacheCurrentStateRuntimeAvgPercentPersistent=entityCacheCurrentStateRuntimeAvgPercentPersistent, safConversationRuntimeConversationName=safConversationRuntimeConversationName, logFilterName=logFilterName, jmsConsumerRuntimeMessagesReceivedCount=jmsConsumerRuntimeMessagesReceivedCount, owsmSecurityPolicyRuntimeObjectName=owsmSecurityPolicyRuntimeObjectName, serverLifeCycleRuntimeIndex=serverLifeCycleRuntimeIndex, cacheStoreCustomStore=cacheStoreCustomStore, wseePortPolicyRuntimeAuthenticationViolations=wseePortPolicyRuntimeAuthenticationViolations, jmsSessionPoolParent=jmsSessionPoolParent, wseeOperationConfigurationRuntimeIndex=wseeOperationConfigurationRuntimeIndex, jmsProducerRuntimeMessagesPendingCount=jmsProducerRuntimeMessagesPendingCount, connectorComponentRuntimeLinkref=connectorComponentRuntimeLinkref, xmlEntitySpecRegistryPublicId=xmlEntitySpecRegistryPublicId, webServerLogLogFileFormat=webServerLogLogFileFormat, workManagerShutdownTriggerTable=workManagerShutdownTriggerTable, wseeOperationRuntimeLastResponseErrorTime=wseeOperationRuntimeLastResponseErrorTime, applicationRuntimeIndex=applicationRuntimeIndex, iiopEnableIORServlet=iiopEnableIORServlet, clusterMulticastAddress=clusterMulticastAddress, clusterRuntimeDetailedSecondariesDistribution=clusterRuntimeDetailedSecondariesDistribution, jdbcConnectionPoolRuntimeConnectionDelayTime=jdbcConnectionPoolRuntimeConnectionDelayTime, wlecConnectionRuntimeAddress=wlecConnectionRuntimeAddress, safRemoteEndpointRuntimePausedForIncoming=safRemoteEndpointRuntimePausedForIncoming, serverDebugDebugXMLRegistryDebugName=serverDebugDebugXMLRegistryDebugName, entityCacheCumulativeRuntimeAvgPercentTransient=entityCacheCumulativeRuntimeAvgPercentTransient, networkAccessPointChannelIdentityCustomized=networkAccessPointChannelIdentityCustomized, serverRuntimeOpenSocketsCurrentCount=serverRuntimeOpenSocketsCurrentCount, nodeManagerListenAddress=nodeManagerListenAddress, jmsProducerRuntimeBytesPendingCount=jmsProducerRuntimeBytesPendingCount, threadPoolRuntimeIndex=threadPoolRuntimeIndex, singleSignOnServicesSignAuthnRequests=singleSignOnServicesSignAuthnRequests, wldfWatchNotificationRuntimeTotalHarvesterWatchEvaluations=wldfWatchNotificationRuntimeTotalHarvesterWatchEvaluations, wlssnmpGaugeMonitorMonitoredMBeanName=wlssnmpGaugeMonitorMonitoredMBeanName, networkChannelTunnelingClientTimeoutSecs=networkChannelTunnelingClientTimeoutSecs, securityConfigurationConnectionFilterRules=securityConfigurationConnectionFilterRules, safConversationRuntimeObjectName=safConversationRuntimeObjectName, springTransactionManagerRuntimeEntry=springTransactionManagerRuntimeEntry, threadPoolRuntimeEntry=threadPoolRuntimeEntry, jrockitRuntimeConcurrent=jrockitRuntimeConcurrent, kodoDataCacheRuntimeCacheHitRatio=kodoDataCacheRuntimeCacheHitRatio, jmsRuntimeJMSServersCurrentCount=jmsRuntimeJMSServersCurrentCount, wldfImageCreationTaskRuntimeTable=wldfImageCreationTaskRuntimeTable, serverChannelRuntimeBytesSentCount=serverChannelRuntimeBytesSentCount, wtctBridgeRedirectTable=wtctBridgeRedirectTable, fileStoreXAResourceName=fileStoreXAResourceName, minThreadsConstraintDeploymentOrder=minThreadsConstraintDeploymentOrder, wseeOperationRuntimePolicySubjectResourcePattern=wseeOperationRuntimePolicySubjectResourcePattern, servletRuntimeObjectName=servletRuntimeObjectName, serverDebugDebugXMLEntityCacheIncludeClass=serverDebugDebugXMLEntityCacheIncludeClass, snmpAgentEnabled=snmpAgentEnabled, wseeClientOperationRuntimeDispatchTimeLow=wseeClientOperationRuntimeDispatchTimeLow, jdbcOracleDataSourceRuntimeNumUnavailable=jdbcOracleDataSourceRuntimeNumUnavailable, serverDebugDebugDiagnosticQuery=serverDebugDebugDiagnosticQuery, entityCacheCumulativeRuntimeMemoryPurgesPerHour=entityCacheCumulativeRuntimeMemoryPurgesPerHour, domainInternalAppsDeployOnDemandEnabled=domainInternalAppsDeployOnDemandEnabled, jmsServerRuntimeName=jmsServerRuntimeName, pageFlowActionRuntimeEntry=pageFlowActionRuntimeEntry, httpProxyServerList=httpProxyServerList, jmsInteropModuleSourcePath=jmsInteropModuleSourcePath, pathServiceRuntimeIndex=pathServiceRuntimeIndex, serverDebugDebugRAConnEvents=serverDebugDebugRAConnEvents, alsb=alsb, jmsDestinationRuntimeMessagesReceivedCount=jmsDestinationRuntimeMessagesReceivedCount, libraryRuntimeLibraryIdentifier=libraryRuntimeLibraryIdentifier, jMSDurableSubscriberRuntimeSubscribersTotalCount=jMSDurableSubscriberRuntimeSubscribersTotalCount, foreignJNDILinkRemoteJNDIName=foreignJNDILinkRemoteJNDIName, serverRuntimeEntry=serverRuntimeEntry, serverDebugEntry=serverDebugEntry, wseeOperationRuntimeResponseTimeAverage=wseeOperationRuntimeResponseTimeAverage, singletonServiceType=singletonServiceType, messagingBridgeRuntimeTable=messagingBridgeRuntimeTable, webAppContainerMaxPostTimeSecs=webAppContainerMaxPostTimeSecs, webServicePersistenceEntry=webServicePersistenceEntry, deploymentProgressObjectFailedTargets=deploymentProgressObjectFailedTargets, wlssnmpLogFilterObjectName=wlssnmpLogFilterObjectName, bridgeDestinationIndex=bridgeDestinationIndex, networkChannelObjectName=networkChannelObjectName, serverDebugDebugLoadBalancing=serverDebugDebugLoadBalancing, jmsSessionRuntimeConsumersHighCount=jmsSessionRuntimeConsumersHighCount, webServerLogObjectName=webServerLogObjectName, pageFlowActionRuntimeSuccessCount=pageFlowActionRuntimeSuccessCount, wldfWatchJMXNotificationRuntimeTable=wldfWatchJMXNotificationRuntimeTable, startupClassLoadAfterAppsRunning=startupClassLoadAfterAppsRunning, serverDebugClasspathServlet=serverDebugClasspathServlet, singleSignOnServicesLoginReturnQueryParameter=singleSignOnServicesLoginReturnQueryParameter, workManagerType=workManagerType, connectorConnectionPoolRuntimePoolSizeLowWaterMark=connectorConnectionPoolRuntimePoolSizeLowWaterMark, singleSignOnServicesAuthnRequestMaxCacheSize=singleSignOnServicesAuthnRequestMaxCacheSize, coherenceServerUnicastPortAutoAdjust=coherenceServerUnicastPortAutoAdjust, trapALSBAlertAlertTime=trapALSBAlertAlertTime, xmlEntityCacheCacheMemorySize=xmlEntityCacheCacheMemorySize, logDateFormatPattern=logDateFormatPattern, ejbComponentRuntimeParent=ejbComponentRuntimeParent, jmsSessionPoolTransacted=jmsSessionPoolTransacted, webAppComponentRuntimeLogFilename=webAppComponentRuntimeLogFilename, singleSignOnServicesArtifactTimeout=singleSignOnServicesArtifactTimeout, domainAdminServerName=domainAdminServerName, deploymentManagerEntry=deploymentManagerEntry, deploymentConfigurationEntry=deploymentConfigurationEntry, migrationDataRuntimeType=migrationDataRuntimeType, springTransactionTemplateRuntimeBeanId=springTransactionTemplateRuntimeBeanId, coherenceServerStartClassPath=coherenceServerStartClassPath, serverUseFusionForLLR=serverUseFusionForLLR, onsDaemonRuntimeObjectName=onsDaemonRuntimeObjectName, jmsServerRuntimeMessagesReceivedCount=jmsServerRuntimeMessagesReceivedCount, serverAutoMigrationEnabled=serverAutoMigrationEnabled, xmlEntityCacheCacheLocation=xmlEntityCacheCacheLocation, joltConnectionRuntimeEntry=joltConnectionRuntimeEntry, kernelSocketReaders=kernelSocketReaders, jrockitRuntimeTotalGarbageCollectionCount=jrockitRuntimeTotalGarbageCollectionCount, webAppComponentRuntimeModuleURI=webAppComponentRuntimeModuleURI, safAgentRuntimeRemoteEndpointsHighCount=safAgentRuntimeRemoteEndpointsHighCount, serviceMigrationDataRuntimeObjectName=serviceMigrationDataRuntimeObjectName, wldfDbstoreArchiveRuntimeLastDataRetirementTime=wldfDbstoreArchiveRuntimeLastDataRetirementTime, virtualHostKeepAliveSecs=virtualHostKeepAliveSecs, customResourceType=customResourceType, ejbComponentJavaCompilerPreClassPath=ejbComponentJavaCompilerPreClassPath, webServiceReliabilityRetransmissionExponentialBackoff=webServiceReliabilityRetransmissionExponentialBackoff, cacheExpirationEntry=cacheExpirationEntry, webAppContainerMimeMappingFile=webAppContainerMimeMappingFile)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", wseeClientOperationRuntimeLastError=wseeClientOperationRuntimeLastError, wseeClusterRoutingRuntimeRoutedResponseCount=wseeClusterRoutingRuntimeRoutedResponseCount, ejbCacheRuntimeCacheAccessCount=ejbCacheRuntimeCacheAccessCount, deploymentTaskRuntimeTable=deploymentTaskRuntimeTable, jmsComponentRuntimeTable=jmsComponentRuntimeTable, connectorInboundRuntimeActivationSpecClass=connectorInboundRuntimeActivationSpecClass, customResourceCompatibilityName=customResourceCompatibilityName, domainConsoleContextPath=domainConsoleContextPath, springBeanDefinitionRuntimeObjectName=springBeanDefinitionRuntimeObjectName, networkChannelChannelWeight=networkChannelChannelWeight, kernelGatheredWritesEnabled=kernelGatheredWritesEnabled, trapWatchSNMPNotificationName=trapWatchSNMPNotificationName, wlssnmpAttributeChangeIndex=wlssnmpAttributeChangeIndex, wldfHarvesterRuntimeEntry=wldfHarvesterRuntimeEntry, jtaRecoveryRuntimeIndex=jtaRecoveryRuntimeIndex, wldfWlstoreArchiveRuntimeRecordRetrievalTime=wldfWlstoreArchiveRuntimeRecordRetrievalTime, executeQueueThreadCount=executeQueueThreadCount, clusterRuntimeFragmentsSentCount=clusterRuntimeFragmentsSentCount, clusterObjectName=clusterObjectName, networkAccessPointTunnelingEnabled=networkAccessPointTunnelingEnabled, statelessEJBRuntimeType=statelessEJBRuntimeType, wsrmRemoteEndpointRuntimePausedForForwarding=wsrmRemoteEndpointRuntimePausedForForwarding, contextCaseTable=contextCaseTable, webAppComponentRuntimeOpenSessionsHighCount=webAppComponentRuntimeOpenSessionsHighCount, connectorConnectionPoolRuntimeInitialCapacity=connectorConnectionPoolRuntimeInitialCapacity, wseeRuntimeImplementationType=wseeRuntimeImplementationType, unicastMessagingRuntimeDiscoveredGroupLeaders=unicastMessagingRuntimeDiscoveredGroupLeaders, wldfServerDiagnosticImageTimeout=wldfServerDiagnosticImageTimeout, wlssnmpProxySecurityName=wlssnmpProxySecurityName, wldfInstrumentationRuntimeClassweaveAbortCount=wldfInstrumentationRuntimeClassweaveAbortCount, serverDebugDebugJMXEdit=serverDebugDebugJMXEdit, jrockitRuntimeTotalNurserySize=jrockitRuntimeTotalNurserySize, timerRuntimeEntry=timerRuntimeEntry, springTransactionTemplateRuntimeEntry=springTransactionTemplateRuntimeEntry, wldfDataAccessRuntimeTable=wldfDataAccessRuntimeTable, wseeWsrmRuntimeSequenceIds=wseeWsrmRuntimeSequenceIds, serverLifeCycleRuntimeNodeManagerRestartCount=serverLifeCycleRuntimeNodeManagerRestartCount, serverDebugDebugJDBCConn=serverDebugDebugJDBCConn, safAgentType=safAgentType, cacheDeploymentOrder=cacheDeploymentOrder, wseePolicyRuntimeAvailablePolicies=wseePolicyRuntimeAvailablePolicies, pageFlowsRuntimeType=pageFlowsRuntimeType, ejbLockingRuntimeWaiterCurrentCount=ejbLockingRuntimeWaiterCurrentCount, wtcResourcesParent=wtcResourcesParent, domainLibraryApplicationIdentifier=domainLibraryApplicationIdentifier, serverDebugDebugJMSDistTopic=serverDebugDebugJMSDistTopic, consoleRuntimeIndex=consoleRuntimeIndex, webAppComponentRuntimeTable=webAppComponentRuntimeTable, coherenceClusterRuntimeClusterSize=coherenceClusterRuntimeClusterSize, applicationRuntimeApplicationName=applicationRuntimeApplicationName, startupClassArguments=startupClassArguments, serverLifeCycleTaskRuntimeBeginTime=serverLifeCycleTaskRuntimeBeginTime, connectorConnectionPoolRuntimeActiveConnectionsHighCount=connectorConnectionPoolRuntimeActiveConnectionsHighCount, sslType=sslType, embeddedLDAPMasterFirst=embeddedLDAPMasterFirst, mibObjectName=mibObjectName, jdbcConnectionPoolRuntimeActiveConnectionsCurrentCount=jdbcConnectionPoolRuntimeActiveConnectionsCurrentCount, rmcFactoryType=rmcFactoryType, transactionNameRuntimeSecondsActiveTotalCount=transactionNameRuntimeSecondsActiveTotalCount, serverDebugDebugHttpSessions=serverDebugDebugHttpSessions, connectorComponentRuntimeTable=connectorComponentRuntimeTable, wtcRemoteTuxDomName=wtcRemoteTuxDomName, singletonServiceAppScopedTable=singletonServiceAppScopedTable, kodoDataCacheRuntimeCacheMissCount=kodoDataCacheRuntimeCacheMissCount, mailSessionRuntimeIndex=mailSessionRuntimeIndex, pageFlowActionRuntimeName=pageFlowActionRuntimeName, wseeClusterRoutingRuntimeIndex=wseeClusterRoutingRuntimeIndex, wldfHarvesterRuntimeCurrentDataSampleCount=wldfHarvesterRuntimeCurrentDataSampleCount, persistentStoreRuntimeUpdateCount=persistentStoreRuntimeUpdateCount, serverDebugDebugIIOPReplacer=serverDebugDebugIIOPReplacer, mibObjectOid=mibObjectOid, webAppComponentType=webAppComponentType, joltConnectionPoolRuntimeTable=joltConnectionPoolRuntimeTable, serverDebugDebugRAXAin=serverDebugDebugRAXAin, serverDebugDebugEjbMdbConnection=serverDebugDebugEjbMdbConnection, singleSignOnServicesServiceProviderPreferredBinding=singleSignOnServicesServiceProviderPreferredBinding, wseeWsrmRuntimeObjectName=wseeWsrmRuntimeObjectName, logBroadcasterRuntimeEntry=logBroadcasterRuntimeEntry, wseeOperationRuntimeLastResponseError=wseeOperationRuntimeLastResponseError, safRemoteEndpointRuntimeFailedMessagesTotal=safRemoteEndpointRuntimeFailedMessagesTotal, wldfImageCreationTaskRuntimeIndex=wldfImageCreationTaskRuntimeIndex, webServerParent=webServerParent, wldfDbstoreArchiveRuntimeName=wldfDbstoreArchiveRuntimeName, serverSecurityRuntimeJACCEnabled=serverSecurityRuntimeJACCEnabled, messageDrivenControlEJBRuntimeIndex=messageDrivenControlEJBRuntimeIndex, kernelType=kernelType, unixMachineType=unixMachineType, sslInboundCertificateValidation=sslInboundCertificateValidation, errorHandlingName=errorHandlingName, connectorConnectionPoolRuntimeConnectionLeakProfileCount=connectorConnectionPoolRuntimeConnectionLeakProfileCount, jdbcSystemResourceIndex=jdbcSystemResourceIndex, pathServiceObjectName=pathServiceObjectName, wseePortPolicyRuntimePolicyFaults=wseePortPolicyRuntimePolicyFaults, wtcResourcesAppPassword=wtcResourcesAppPassword, webServerLogFileMinSize=webServerLogFileMinSize, messagingBridgeRuntimeState=messagingBridgeRuntimeState, ejbContainerExtraRmicOptions=ejbContainerExtraRmicOptions, jmsServerRuntimeIndex=jmsServerRuntimeIndex, remoteSAFContextIndex=remoteSAFContextIndex, appRuntimeStateRuntimeApplicationIds=appRuntimeStateRuntimeApplicationIds, xmlEntitySpecRegistryHandleEntityInvalidation=xmlEntitySpecRegistryHandleEntityInvalidation, interceptionComponentRuntimeType=interceptionComponentRuntimeType, wseePortRuntimeStartTime=wseePortRuntimeStartTime, webAppContainerServletAuthenticationFormURL=webAppContainerServletAuthenticationFormURL, jdbcOracleDataSourceRuntimeNumAvailable=jdbcOracleDataSourceRuntimeNumAvailable, messageDrivenEJBRuntimeProcessedMessageCount=messageDrivenEJBRuntimeProcessedMessageCount, serverReverseDNSAllowed=serverReverseDNSAllowed, shutdownClassType=shutdownClassType, embeddedLDAPTable=embeddedLDAPTable, safAgentBytesMaximum=safAgentBytesMaximum, appClientComponentRuntimeObjectName=appClientComponentRuntimeObjectName, webserviceTimestampClockSkew=webserviceTimestampClockSkew, connectorConnectionPoolRuntimeTransactionSupport=connectorConnectionPoolRuntimeTransactionSupport, jmsSessionPoolRuntimeTable=jmsSessionPoolRuntimeTable, serverDebugDefaultStore=serverDebugDefaultStore, pageFlowRuntimeObjectName=pageFlowRuntimeObjectName, ejbComponentRuntimeTable=ejbComponentRuntimeTable, jrockitRuntimeVersion=jrockitRuntimeVersion, jmsDestinationRuntimeBytesReceivedCount=jmsDestinationRuntimeBytesReceivedCount, jmsSAFMessageLogFileObjectName=jmsSAFMessageLogFileObjectName, transactionNameRuntimeTransactionRolledBackResourceTotalCount=transactionNameRuntimeTransactionRolledBackResourceTotalCount, embeddedLDAPBackupHour=embeddedLDAPBackupHour, wlssnmpAgentDeploymentSNMPTrapVersion=wlssnmpAgentDeploymentSNMPTrapVersion, webserviceSecurityName=webserviceSecurityName, webserviceTimestampName=webserviceTimestampName, securityConfigurationPrincipalEqualsCaseInsensitive=securityConfigurationPrincipalEqualsCaseInsensitive, servletRuntimeURLPatterns=servletRuntimeURLPatterns, jtaUnregisterResourceGracePeriod=jtaUnregisterResourceGracePeriod, jdbcDataSourceRuntimeState=jdbcDataSourceRuntimeState, manReplicationRuntimeActiveServersInRemoteCluster=manReplicationRuntimeActiveServersInRemoteCluster, wlecConnectionPoolRuntimeWLEDomainName=wlecConnectionPoolRuntimeWLEDomainName, coherenceClusterSystemResourceDeploymentOrder=coherenceClusterSystemResourceDeploymentOrder, jPAIndex=jPAIndex, wseeClientPortRuntimeTable=wseeClientPortRuntimeTable, libraryRuntimeParent=libraryRuntimeParent, jvmRuntimeJavaVersion=jvmRuntimeJavaVersion, serverTunnelingClientTimeoutSecs=serverTunnelingClientTimeoutSecs, serverDefaultIIOPUser=serverDefaultIIOPUser, jmsInteropModuleModuleType=jmsInteropModuleModuleType, wtcServerType=wtcServerType, serverDebugDebugDiagnosticsHarvesterData=serverDebugDebugDiagnosticsHarvesterData, wseeClientOperationRuntimeResponseErrorCount=wseeClientOperationRuntimeResponseErrorCount, webServerFrontendHost=webServerFrontendHost, wldfDataRetirementByAgeArchiveName=wldfDataRetirementByAgeArchiveName, consoleRuntimeEnabled=consoleRuntimeEnabled, serverDebugDebugJMXDomain=serverDebugDebugJMXDomain, springBeanDefinitionRuntimeDependencies=springBeanDefinitionRuntimeDependencies, serverDebugDebugJTATLOG=serverDebugDebugJTATLOG, responseTimeRequestClassType=responseTimeRequestClassType, wtcRemoteTuxDomMaxEncryptBits=wtcRemoteTuxDomMaxEncryptBits, wlssnmpAgentRuntimeSNMPAgentName=wlssnmpAgentRuntimeSNMPAgentName, xmlParserSelectRegistryName=xmlParserSelectRegistryName, serverDebugDebugSecurityEncryptionService=serverDebugDebugSecurityEncryptionService, wseeOperationRuntimeOperationName=wseeOperationRuntimeOperationName, serverDebugDebugEjbLocking=serverDebugDebugEjbLocking, springTransactionTemplateRuntimeType=springTransactionTemplateRuntimeType, serverDebugDebugSecurityKeyStore=serverDebugDebugSecurityKeyStore, wldfServerDiagnosticIndex=wldfServerDiagnosticIndex, jdbcDataSourceFactoryParent=jdbcDataSourceFactoryParent, wldfDbstoreArchiveRuntimeObjectName=wldfDbstoreArchiveRuntimeObjectName, safAgentRuntimePausedForIncoming=safAgentRuntimePausedForIncoming, workManagerShutdownTriggerName=workManagerShutdownTriggerName, jmsSessionRuntimeAcknowledgeMode=jmsSessionRuntimeAcknowledgeMode, wldfAccessRuntimeTable=wldfAccessRuntimeTable, jdbcDataSourceTaskRuntimeRunning=jdbcDataSourceTaskRuntimeRunning, wseeHandlerRuntimeIndex=wseeHandlerRuntimeIndex, networkChannelAcceptBacklog=networkChannelAcceptBacklog, xmlParserSelectRegistryEntry=xmlParserSelectRegistryEntry, logStdoutSeverity=logStdoutSeverity, serverDebugDebugSNMPAgent=serverDebugDebugSNMPAgent, jdbcSystemResourceObjectName=jdbcSystemResourceObjectName, deploymentTaskRuntimeSource=deploymentTaskRuntimeSource, federationServicesACSRequiresSSL=federationServicesACSRequiresSSL, wldfWatchNotificationRuntimeTotalDIMGNotificationsPerformed=wldfWatchNotificationRuntimeTotalDIMGNotificationsPerformed, minThreadsConstraintRuntimeCurrentWaitTime=minThreadsConstraintRuntimeCurrentWaitTime, databaseLessLeasingBasisMemberDiscoveryTimeout=databaseLessLeasingBasisMemberDiscoveryTimeout, serverDebugClassLoaderVerbose=serverDebugClassLoaderVerbose, webAppComponentRuntimeDeploymentState=webAppComponentRuntimeDeploymentState, singleSignOnServicesWantAssertionsSigned=singleSignOnServicesWantAssertionsSigned, clusterRuntimeForeignFragmentsDroppedCount=clusterRuntimeForeignFragmentsDroppedCount, workManagerIndex=workManagerIndex, onsDaemonRuntimeEntry=onsDaemonRuntimeEntry, joltConnectionPoolIndex=joltConnectionPoolIndex, jmsConsumerRuntimeTable=jmsConsumerRuntimeTable, springViewResolverRuntimeObjectName=springViewResolverRuntimeObjectName, servletRuntimeInvocationTotalCount=servletRuntimeInvocationTotalCount, pageFlowsRuntimeObjectName=pageFlowsRuntimeObjectName, kernelParent=kernelParent, serverStartJavaHome=serverStartJavaHome, jmsSessionRuntimeProducersCurrentCount=jmsSessionRuntimeProducersCurrentCount, jmsServerRuntimeTransactions=jmsServerRuntimeTransactions, wldfWatchNotificationRuntimeAverageHarvesterWatchEvaluationTime=wldfWatchNotificationRuntimeAverageHarvesterWatchEvaluationTime, safConversationRuntimeDestinationURL=safConversationRuntimeDestinationURL, wtcImportRemoteAccessPointList=wtcImportRemoteAccessPointList, ejbRuntimeIndex=ejbRuntimeIndex, appRuntimeStateRuntimeObjectName=appRuntimeStateRuntimeObjectName, wseeClientPortRuntimePoolTotalSimpleClientCreateCount=wseeClientPortRuntimePoolTotalSimpleClientCreateCount, jdbcOracleDataSourceInstanceRuntimeNumAvailable=jdbcOracleDataSourceInstanceRuntimeNumAvailable, wseeClientOperationRuntimeResponseTimeLow=wseeClientOperationRuntimeResponseTimeLow, virtualHostClientIpHeader=virtualHostClientIpHeader, logNumberOfFilesLimited=logNumberOfFilesLimited, wldfFileArchiveRuntimeTable=wldfFileArchiveRuntimeTable, wldfHarvesterRuntimeParent=wldfHarvesterRuntimeParent, wlssnmpStringMonitorStringToCompare=wlssnmpStringMonitorStringToCompare, clusterParent=clusterParent, wtcPasswordParent=wtcPasswordParent, deploymentManagerIndex=deploymentManagerIndex, wseeOperationRuntimeExecutionTimeTotal=wseeOperationRuntimeExecutionTimeTotal, wldfDataRetirementByAgeRetirementAge=wldfDataRetirementByAgeRetirementAge, manReplicationRuntimeType=manReplicationRuntimeType, unicastMessagingRuntimeTable=unicastMessagingRuntimeTable, serverDebugIndex=serverDebugIndex, serverThreadPoolPercentSocketReaders=serverThreadPoolPercentSocketReaders, jrockitRuntimeObjectName=jrockitRuntimeObjectName, cacheTransactionTable=cacheTransactionTable, logLoggerSeverity=logLoggerSeverity, wseeClientPortRuntimeIndex=wseeClientPortRuntimeIndex, queryCacheRuntimeCacheAccessCount=queryCacheRuntimeCacheAccessCount, wtcLocalTuxDomIdentityKeyStoreFileName=wtcLocalTuxDomIdentityKeyStoreFileName, ejbTimerRuntimeIndex=ejbTimerRuntimeIndex, jtaTimeoutSeconds=jtaTimeoutSeconds, jmsServerRuntimeDestinationsHighCount=jmsServerRuntimeDestinationsHighCount, serverDebugDebugClusterAnnouncements=serverDebugDebugClusterAnnouncements, defaultFileStoreIndex=defaultFileStoreIndex, connectorConnectionPoolRuntimeState=connectorConnectionPoolRuntimeState, singleSignOnServicesEntry=singleSignOnServicesEntry, wlecConnectionRuntimeRequestCount=wlecConnectionRuntimeRequestCount, executeQueueRuntimeExecuteThreadTotalCount=executeQueueRuntimeExecuteThreadTotalCount, wldfHarvesterRuntimeOutlierDetectionFactor=wldfHarvesterRuntimeOutlierDetectionFactor, joltConnectionPoolObjectName=joltConnectionPoolObjectName, wlssnmpStringMonitorMonitoredMBeanName=wlssnmpStringMonitorMonitoredMBeanName, wldfDataAccessRuntimeLatestRecordId=wldfDataAccessRuntimeLatestRecordId, trapALSBAlertRuleCondition=trapALSBAlertRuleCondition, entityCacheRuntimeAvgTimeout=entityCacheRuntimeAvgTimeout, psAssemblyRuntimeMapEntries=psAssemblyRuntimeMapEntries, connectorConnectionPoolRuntimeResourceAdapterLinkRefName=connectorConnectionPoolRuntimeResourceAdapterLinkRefName, wldfImageCreationTaskRuntimeStatus=wldfImageCreationTaskRuntimeStatus, comMemoryLoggingEnabled=comMemoryLoggingEnabled, persistentStoreConnectionRuntimeCreateCount=persistentStoreConnectionRuntimeCreateCount, serverChannelRuntimeObjectName=serverChannelRuntimeObjectName, wseePolicyRuntimeName=wseePolicyRuntimeName, threadPoolRuntimeTable=threadPoolRuntimeTable, channelRuntimeIndex=channelRuntimeIndex, serverDebugDebugDeploymentServiceStatusUpdates=serverDebugDebugDeploymentServiceStatusUpdates, contextRequestClassTable=contextRequestClassTable, networkChannelMaxT3MessageSize=networkChannelMaxT3MessageSize, wldfImageCreationTaskRuntimeSystemTask=wldfImageCreationTaskRuntimeSystemTask, jmsDestinationEntry=jmsDestinationEntry, kodoDataCacheRuntimeObjectName=kodoDataCacheRuntimeObjectName, networkChannelBoundOutgoingEnabled=networkChannelBoundOutgoingEnabled, xmlRegistryObjectName=xmlRegistryObjectName, jdbcOracleDataSourceRuntimeDriverVersion=jdbcOracleDataSourceRuntimeDriverVersion, serverStartParent=serverStartParent, wseeHandlerRuntimeEntry=wseeHandlerRuntimeEntry)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", jmsConsumerRuntimeIndex=jmsConsumerRuntimeIndex, httpProxyObjectName=httpProxyObjectName, jtaMaxResourceRequestsOnServer=jtaMaxResourceRequestsOnServer, ejbPoolRuntimeType=ejbPoolRuntimeType, wtcLocalTuxDomKeyStoresLocation=wtcLocalTuxDomKeyStoresLocation, serverDebugDebugRAWorkEvents=serverDebugDebugRAWorkEvents, wseeWsrmRuntimeType=wseeWsrmRuntimeType, coherenceServerLifeCycleRuntimeEntry=coherenceServerLifeCycleRuntimeEntry, coherenceServerName=coherenceServerName, defaultFileStoreIoBufferSize=defaultFileStoreIoBufferSize, serverDebugDebugJMSLocking=serverDebugDebugJMSLocking, webAppComponentRuntimeSourceInfo=webAppComponentRuntimeSourceInfo, wldfServerDiagnosticDiagnosticStoreFileLockingEnabled=wldfServerDiagnosticDiagnosticStoreFileLockingEnabled, safAgentRuntimeConversationsTotalCount=safAgentRuntimeConversationsTotalCount, networkAccessPointIdleConnectionTimeout=networkAccessPointIdleConnectionTimeout, joltConnectionRuntimeType=joltConnectionRuntimeType, connectorServiceRuntimeActiveRACount=connectorServiceRuntimeActiveRACount, httpProxyName=httpProxyName, serverDebugDebugSecuritySAML2Atn=serverDebugDebugSecuritySAML2Atn, jmsDestinationJNDIName=jmsDestinationJNDIName, fileStoreDirectory=fileStoreDirectory, cacheExpirationIndex=cacheExpirationIndex, wseeOperationRuntimeLastErrorTime=wseeOperationRuntimeLastErrorTime, wldfInstrumentationRuntimeMaxWeavingTime=wldfInstrumentationRuntimeMaxWeavingTime, connectorComponentRuntimeInboundConnectionsCount=connectorComponentRuntimeInboundConnectionsCount, transactionResourceRuntimeTransactionTotalCount=transactionResourceRuntimeTransactionTotalCount, virtualDestinationJNDIName=virtualDestinationJNDIName, serverVirtualMachineName=serverVirtualMachineName, logObjectName=logObjectName, xmlRegistryTable=xmlRegistryTable, persistentStoreConnectionRuntimeReadCount=persistentStoreConnectionRuntimeReadCount, serverDebugDebugWTCUData=serverDebugDebugWTCUData, wlssnmpAgentRuntimeCounterMonitorTrapCount=wlssnmpAgentRuntimeCounterMonitorTrapCount, pathServiceIndex=pathServiceIndex, entityCacheRuntimeTotalCurrentEntries=entityCacheRuntimeTotalCurrentEntries, ejbTimerRuntimeActiveTimerCount=ejbTimerRuntimeActiveTimerCount, serverMaxIIOPMessageSize=serverMaxIIOPMessageSize, wseeClusterRoutingRuntimeTable=wseeClusterRoutingRuntimeTable, federationServicesSSLClientIdentityAlias=federationServicesSSLClientIdentityAlias, unicastMessagingRuntimeIndex=unicastMessagingRuntimeIndex, clusterFencingGracePeriodMillis=clusterFencingGracePeriodMillis, serverRuntimeRestartRequired=serverRuntimeRestartRequired, serverDebugDebugDiagnosticInstrumentationEvents=serverDebugDebugDiagnosticInstrumentationEvents, wseeV2RuntimeURI=wseeV2RuntimeURI, contextCaseDeploymentOrder=contextCaseDeploymentOrder, jtaMigratableTargetPostScript=jtaMigratableTargetPostScript, wldfFileArchiveRuntimeRecordRetrievalTime=wldfFileArchiveRuntimeRecordRetrievalTime, networkAccessPointPrivateKeyAlias=networkAccessPointPrivateKeyAlias, wseeOperationConfigurationRuntimeObjectName=wseeOperationConfigurationRuntimeObjectName, wlssnmpAttributeChangeType=wlssnmpAttributeChangeType, wldfServerDiagnosticSynchronousEventPersistenceEnabled=wldfServerDiagnosticSynchronousEventPersistenceEnabled, jdbcDataSourceRuntimeConnectionsTotalCount=jdbcDataSourceRuntimeConnectionsTotalCount, wldfServerDiagnosticDiagnosticStoreMaxWindowBufferSize=wldfServerDiagnosticDiagnosticStoreMaxWindowBufferSize, workManagerRuntimeType=workManagerRuntimeType, wldfWatchNotificationRuntimeTotalFailedJMSNotifications=wldfWatchNotificationRuntimeTotalFailedJMSNotifications, jdbcConnectionPoolRuntimeFailuresToReconnectCount=jdbcConnectionPoolRuntimeFailuresToReconnectCount, jtaParent=jtaParent, cacheAsyncListenersType=cacheAsyncListenersType, networkAccessPointPrivateKeyPassPhrase=networkAccessPointPrivateKeyPassPhrase, shutdownClassIndex=shutdownClassIndex, jdbcDataSourceFactoryName=jdbcDataSourceFactoryName, kodoQueryCacheRuntimeCacheHitCount=kodoQueryCacheRuntimeCacheHitCount, serverDebugDebugDiagnosticDataGathering=serverDebugDebugDiagnosticDataGathering, jMSDurableSubscriberRuntimeParent=jMSDurableSubscriberRuntimeParent, serverDebugDebugJTANonXA=serverDebugDebugJTANonXA, clusterRuntimeAliveServerCount=clusterRuntimeAliveServerCount, serverRuntimeAdminServerListenPort=serverRuntimeAdminServerListenPort, wlecConnectionPoolRuntimeName=wlecConnectionPoolRuntimeName, serverMessageIdPrefixEnabled=serverMessageIdPrefixEnabled, serverDebugDebugJTANaming=serverDebugDebugJTANaming, wldfDataRetirementTaskRuntimeName=wldfDataRetirementTaskRuntimeName, wldfRuntimeTable=wldfRuntimeTable, joltConnectionPoolKeyStoreName=joltConnectionPoolKeyStoreName, messageDrivenEJBRuntimeEntry=messageDrivenEJBRuntimeEntry, networkAccessPointOutboundEnabled=networkAccessPointOutboundEnabled, serverDebugDebugJNDIResolution=serverDebugDebugJNDIResolution, coherenceServerLifeCycleTaskRuntimeSystemTask=coherenceServerLifeCycleTaskRuntimeSystemTask, serverDebugDebugRAXAout=serverDebugDebugRAXAout, queryCacheRuntimeTotalCacheMissCount=queryCacheRuntimeTotalCacheMissCount, jdbcDataSourceRuntimeLeakedConnectionCount=jdbcDataSourceRuntimeLeakedConnectionCount, messageDrivenEJBRuntimeType=messageDrivenEJBRuntimeType, servletRuntimeType=servletRuntimeType, serverListenDelaySecs=serverListenDelaySecs, customResourceIndex=customResourceIndex, federationServicesSourceSiteEnabled=federationServicesSourceSiteEnabled, jmsConnectionRuntimeParent=jmsConnectionRuntimeParent, sslHostnameVerifier=sslHostnameVerifier, wseeClusterRoutingRuntimeLastRoutingFailureTime=wseeClusterRoutingRuntimeLastRoutingFailureTime, appClientComponentRuntimeName=appClientComponentRuntimeName, wseeV2RuntimeType=wseeV2RuntimeType, wldfDataAccessRuntimeName=wldfDataAccessRuntimeName, kernelInstrumentStackTraceEnabled=kernelInstrumentStackTraceEnabled, webServiceLogicalStoreType=webServiceLogicalStoreType, consoleRuntimeName=consoleRuntimeName, mailSessionRuntimeName=mailSessionRuntimeName, wseeClientOperationRuntimeExecutionTimeTotal=wseeClientOperationRuntimeExecutionTimeTotal, taskRuntimeStatus=taskRuntimeStatus, executeQueueRuntimeServicedRequestTotalCount=executeQueueRuntimeServicedRequestTotalCount, joltConnectionPoolMinimumPoolSize=joltConnectionPoolMinimumPoolSize, errorHandlingPolicy=errorHandlingPolicy, ejbRuntimeParent=ejbRuntimeParent, serviceMigrationDataRuntimeCoordinatorName=serviceMigrationDataRuntimeCoordinatorName, wtcResourcesName=wtcResourcesName, jtaWSATIssuedTokenEnabled=jtaWSATIssuedTokenEnabled, virtualHostSingleSignonDisabled=virtualHostSingleSignonDisabled, jmxIndex=jmxIndex, serverDebugDebugWebAppIdentityAssertion=serverDebugDebugWebAppIdentityAssertion, ejbComponentVerboseEJBDeploymentEnabled=ejbComponentVerboseEJBDeploymentEnabled, virtualDestinationIndex=virtualDestinationIndex, webAppContainerClientCertProxyEnabled=webAppContainerClientCertProxyEnabled, maxThreadsConstraintDeploymentOrder=maxThreadsConstraintDeploymentOrder, jmsRemoteEndpointRuntimeEndpointType=jmsRemoteEndpointRuntimeEndpointType, coherenceServerEntry=coherenceServerEntry, coherenceServerLifeCycleRuntimeIndex=coherenceServerLifeCycleRuntimeIndex, ejbPoolRuntimeTimeoutTotalCount=ejbPoolRuntimeTimeoutTotalCount, jdbcDataSourceFactoryURL=jdbcDataSourceFactoryURL, wseePortRuntimeTable=wseePortRuntimeTable, springViewRuntimeAverageRenderTime=springViewRuntimeAverageRenderTime, wlssnmpProxyOidRoot=wlssnmpProxyOidRoot, pathServiceRuntimeEntry=pathServiceRuntimeEntry, jmsDestinationRuntimeType=jmsDestinationRuntimeType, jdbcDataSourceFactoryObjectName=jdbcDataSourceFactoryObjectName, migrationDataRuntimeMachineMigratedTo=migrationDataRuntimeMachineMigratedTo, nonXAResourceRuntimeIndex=nonXAResourceRuntimeIndex, wseeV2RuntimeContextPath=wseeV2RuntimeContextPath, jdbcConnectionPoolRuntimeCurrCapacity=jdbcConnectionPoolRuntimeCurrCapacity, wseeV2RuntimeIndex=wseeV2RuntimeIndex, jobSchedulerRuntimeTable=jobSchedulerRuntimeTable, trapWatchData=trapWatchData, webServerKeepAliveSecs=webServerKeepAliveSecs, wlssnmpTrapDestinationCommunity=wlssnmpTrapDestinationCommunity, threadPoolRuntimeQueueLength=threadPoolRuntimeQueueLength, rmcFactoryName=rmcFactoryName, safAgentMessagesMaximum=safAgentMessagesMaximum, webserviceCredentialProviderObjectName=webserviceCredentialProviderObjectName, webServiceResponseBufferingQueueType=webServiceResponseBufferingQueueType, coherenceClusterRuntimeEntry=coherenceClusterRuntimeEntry, wldfFileArchiveRuntimeIndexCycleCount=wldfFileArchiveRuntimeIndexCycleCount, domainConfigBackupEnabled=domainConfigBackupEnabled, webAppComponentRuntimeParent=webAppComponentRuntimeParent, springTransactionTemplateRuntimeApplicationContextDisplayName=springTransactionTemplateRuntimeApplicationContextDisplayName, networkAccessPointCustomPrivateKeyAlias=networkAccessPointCustomPrivateKeyAlias, jmsProducerRuntimeEntry=jmsProducerRuntimeEntry, wlssnmpTrapDestinationEntry=wlssnmpTrapDestinationEntry, cacheTransactionType=cacheTransactionType, wsrmRemoteEndpointRuntimeType=wsrmRemoteEndpointRuntimeType, coherenceServerIndex=coherenceServerIndex, safAgentAcknowledgeInterval=safAgentAcknowledgeInterval, jmsDestinationRuntimeBytesPendingCount=jmsDestinationRuntimeBytesPendingCount, snmpAgentType=snmpAgentType, serverDebugDebugJAXPIncludeLocation=serverDebugDebugJAXPIncludeLocation, statelessEJBRuntimeName=statelessEJBRuntimeName, iiopTxMechanism=iiopTxMechanism, networkAccessPointProtocol=networkAccessPointProtocol, serverCompleteMessageTimeout=serverCompleteMessageTimeout, xmlParserSelectRegistryObjectName=xmlParserSelectRegistryObjectName, wldfDataAccessRuntimeIndex=wldfDataAccessRuntimeIndex, jdbcOracleDataSourceRuntimeReserveRequestCount=jdbcOracleDataSourceRuntimeReserveRequestCount, serverDebugDebugJTAXAStackTrace=serverDebugDebugJTAXAStackTrace, serverCompleteHTTPMessageTimeout=serverCompleteHTTPMessageTimeout, joltConnectionServiceRuntimeEntry=joltConnectionServiceRuntimeEntry, serverLowMemorySampleSize=serverLowMemorySampleSize, foreignJNDILinkTable=foreignJNDILinkTable, jmsDestinationRuntimeIndex=jmsDestinationRuntimeIndex, domainLibraryStagingMode=domainLibraryStagingMode, domainLibrarySourcePath=domainLibrarySourcePath, wlssnmpTrapDestinationObjectName=wlssnmpTrapDestinationObjectName, clusterMulticastPort=clusterMulticastPort, entityCacheCumulativeRuntimeMinEntryTimeout=entityCacheCumulativeRuntimeMinEntryTimeout, transactionResourceRuntimeEntry=transactionResourceRuntimeEntry, ejbPoolRuntimeWaiterTotalCount=ejbPoolRuntimeWaiterTotalCount, wanreplicationRuntimeType=wanreplicationRuntimeType, sslServerCertificateChainFileName=sslServerCertificateChainFileName, connectorConnectionRuntimeLastUsage=connectorConnectionRuntimeLastUsage, xmlParserSelectRegistrySAXParserFactory=xmlParserSelectRegistrySAXParserFactory, deploymentConfigurationObjectName=deploymentConfigurationObjectName, jmsMessageLogFileRotateLogOnStartup=jmsMessageLogFileRotateLogOnStartup, customResourceEntry=customResourceEntry, wldfServerDiagnosticDiagnosticContextEnabled=wldfServerDiagnosticDiagnosticContextEnabled, jtaRuntimeSecondsActiveTotalCount=jtaRuntimeSecondsActiveTotalCount, jmxName=jmxName, coherenceServerLifeCycleTaskRuntimeType=coherenceServerLifeCycleTaskRuntimeType, networkAccessPointPublicAddress=networkAccessPointPublicAddress, wtctBridgeGlobalIndex=wtctBridgeGlobalIndex, jobRuntimePeriod=jobRuntimePeriod, jtaMigratableTargetRestartOnFailure=jtaMigratableTargetRestartOnFailure, coherenceClusterSystemResourceTable=coherenceClusterSystemResourceTable, singletonServiceAppScopedAdditionalMigrationAttempts=singletonServiceAppScopedAdditionalMigrationAttempts, kernelOutboundPrivateKeyEnabled=kernelOutboundPrivateKeyEnabled, wtctBridgeRedirectTargetName=wtctBridgeRedirectTargetName, domainDomainVersion=domainDomainVersion, serverDebugDebugJDBCONS=serverDebugDebugJDBCONS, webServiceReliabilityInactivityTimeout=webServiceReliabilityInactivityTimeout, jtaRuntimeTransactionNoResourcesCommittedTotalCount=jtaRuntimeTransactionNoResourcesCommittedTotalCount, xmlEntitySpecRegistryTable=xmlEntitySpecRegistryTable, jmsServerRuntimeDestinationsTotalCount=jmsServerRuntimeDestinationsTotalCount, wldfServerDiagnosticPreferredStoreSizeLimit=wldfServerDiagnosticPreferredStoreSizeLimit, jmsSessionRuntimeIndex=jmsSessionRuntimeIndex, entityCacheCumulativeRuntimeAvgTimeout=entityCacheCumulativeRuntimeAvgTimeout, appClientComponentRuntimeIndex=appClientComponentRuntimeIndex, virtualHostFrontendHTTPPort=virtualHostFrontendHTTPPort, wlssnmpAgentRuntimeAttributeChangeTrapCount=wlssnmpAgentRuntimeAttributeChangeTrapCount, jtaRecoveryRuntimeActive=jtaRecoveryRuntimeActive, jmsComponentRuntimeType=jmsComponentRuntimeType, serverDebugDebugIIOPConnection=serverDebugDebugIIOPConnection, executeQueueObjectName=executeQueueObjectName, contextCaseUserName=contextCaseUserName, wldfAccessRuntimeIndex=wldfAccessRuntimeIndex, wlecConnectionPoolRuntimeEntry=wlecConnectionPoolRuntimeEntry, wseeOperationConfigurationRuntimeTable=wseeOperationConfigurationRuntimeTable, networkAccessPointHttpEnabledForThisProtocol=networkAccessPointHttpEnabledForThisProtocol, owsmSecurityPolicyRuntimeType=owsmSecurityPolicyRuntimeType, kernelEntry=kernelEntry, wseePortRuntimePolicySubjectName=wseePortRuntimePolicySubjectName, serverDebugDebugJpaMetaData=serverDebugDebugJpaMetaData, kodoPersistenceUnitRuntimeEntry=kodoPersistenceUnitRuntimeEntry, networkAccessPointType=networkAccessPointType, connectorComponentRuntimeVersion=connectorComponentRuntimeVersion, wtcPasswordRemoteAccessPoint=wtcPasswordRemoteAccessPoint, iiopIndex=iiopIndex, errorHandlingEntry=errorHandlingEntry, jdbcDataSourceRuntimeNumAvailable=jdbcDataSourceRuntimeNumAvailable, serverRuntimeAdministrationPortEnabled=serverRuntimeAdministrationPortEnabled, serverDebugDebugStoreXA=serverDebugDebugStoreXA, connectorConnectionPoolRuntimeFreePoolSizeLowWaterMark=connectorConnectionPoolRuntimeFreePoolSizeLowWaterMark, transactionResourceRuntimeResourceName=transactionResourceRuntimeResourceName, persistentStoreConnectionRuntimeName=persistentStoreConnectionRuntimeName, singleSignOnServicesContactPersonGivenName=singleSignOnServicesContactPersonGivenName, wtcPasswordTable=wtcPasswordTable, serverLifeCycleTaskRuntimeRunning=serverLifeCycleTaskRuntimeRunning, webAppContainerReloginEnabled=webAppContainerReloginEnabled, servletSessionRuntimeEntry=servletSessionRuntimeEntry, networkAccessPointTunnelingClientPingSecs=networkAccessPointTunnelingClientPingSecs, wtcLocalTuxDomTrustKeyStoreFileName=wtcLocalTuxDomTrustKeyStoreFileName, jmsBridgeDestinationObjectName=jmsBridgeDestinationObjectName, wsReliableDeliveryPolicyParent=wsReliableDeliveryPolicyParent, deploymentProgressObjectState=deploymentProgressObjectState, channelRuntimeName=channelRuntimeName, networkAccessPointTunnelingClientTimeoutSecs=networkAccessPointTunnelingClientTimeoutSecs, jmsMessageLogFileEntry=jmsMessageLogFileEntry, serverDebugDebugXMLRegistryDebugLevel=serverDebugDebugXMLRegistryDebugLevel, realmRuntimeName=realmRuntimeName, webserviceTimestampClockSynchronized=webserviceTimestampClockSynchronized, jdbcOracleDataSourceRuntimeFailuresToReconnectCount=jdbcOracleDataSourceRuntimeFailuresToReconnectCount, webServerRuntimeEntry=webServerRuntimeEntry, webServiceReliabilityTable=webServiceReliabilityTable, jmsBridgeDestinationEntry=jmsBridgeDestinationEntry, minThreadsConstraintType=minThreadsConstraintType, jmsSessionPoolSessionsMaximum=jmsSessionPoolSessionsMaximum, jMSDurableSubscriberRuntimeMessagesDeletedCurrentCount=jMSDurableSubscriberRuntimeMessagesDeletedCurrentCount, jmsSAFMessageLogFileBufferSizeKB=jmsSAFMessageLogFileBufferSizeKB, jdbcOracleDataSourceRuntimeEnabled=jdbcOracleDataSourceRuntimeEnabled, singletonServiceIndex=singletonServiceIndex, persistentStoreRuntimeEntry=persistentStoreRuntimeEntry)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", webAppComponentRuntimeSessionsOpenedTotalCount=webAppComponentRuntimeSessionsOpenedTotalCount, webServiceMessagingQueueMDBRunAsPrincipalName=webServiceMessagingQueueMDBRunAsPrincipalName, configurationPropertyEncryptValueRequired=configurationPropertyEncryptValueRequired, serverDebugDebugEjbDeployment=serverDebugDebugEjbDeployment, wseeClientOperationRuntimeDispatchTimeHigh=wseeClientOperationRuntimeDispatchTimeHigh, serverDebugDebugSAFStore=serverDebugDebugSAFStore, jdbcConnectionPoolRuntimeTable=jdbcConnectionPoolRuntimeTable, connectorConnectionRuntimeActiveHandlesHighCount=connectorConnectionRuntimeActiveHandlesHighCount, nonXAResourceRuntimeObjectName=nonXAResourceRuntimeObjectName, jobRuntimeEntry=jobRuntimeEntry, wseePortRuntimeIndex=wseePortRuntimeIndex, wldfServerDiagnosticEntry=wldfServerDiagnosticEntry, serverDebugDebugDeployment=serverDebugDebugDeployment, messagingBridgeTransactionTimeout=messagingBridgeTransactionTimeout, wsReliableDeliveryPolicyIndex=wsReliableDeliveryPolicyIndex, clusterRemoteClusterAddress=clusterRemoteClusterAddress, serverSocketBufferSizeAsChunkSize=serverSocketBufferSizeAsChunkSize, pathServiceType=pathServiceType, executeQueueThreadsMinimum=executeQueueThreadsMinimum, jdbcOracleDataSourceRuntimeDatabaseProductVersion=jdbcOracleDataSourceRuntimeDatabaseProductVersion, kernelDefaultSecureProtocol=kernelDefaultSecureProtocol, connectorServiceRuntimeType=connectorServiceRuntimeType, wldfWatchNotificationRuntimeMaximumEventDataWatchEvaluationTime=wldfWatchNotificationRuntimeMaximumEventDataWatchEvaluationTime, iiopType=iiopType, trapDomainName=trapDomainName, unixMachinePostBindUID=unixMachinePostBindUID, jmsPooledConnectionRuntimeNumReserved=jmsPooledConnectionRuntimeNumReserved, bridgeDestinationName=bridgeDestinationName, jmsServerPagingFileLockingEnabled=jmsServerPagingFileLockingEnabled, minThreadsConstraintRuntimeObjectName=minThreadsConstraintRuntimeObjectName, securityConfigurationPrincipalEqualsCompareDnAndGuid=securityConfigurationPrincipalEqualsCompareDnAndGuid, jdbcOracleDataSourceRuntimeWaitingForConnectionTotal=jdbcOracleDataSourceRuntimeWaitingForConnectionTotal, jdbcConnectionPoolRuntimeDeploymentState=jdbcConnectionPoolRuntimeDeploymentState, wseePolicySubjectManagerRuntimeObjectName=wseePolicySubjectManagerRuntimeObjectName, jdbcOracleDataSourceRuntimeName=jdbcOracleDataSourceRuntimeName, serverDebugDebugDiagnosticContext=serverDebugDebugDiagnosticContext, safAgentIndex=safAgentIndex, wtcServerTable=wtcServerTable, clusterAdditionalAutoMigrationAttempts=clusterAdditionalAutoMigrationAttempts, networkChannelDescription=networkChannelDescription, wseeHandlerRuntimeName=wseeHandlerRuntimeName, messagingBridgeTable=messagingBridgeTable, manAsyncReplicationRuntimeLastSessionsFlushTime=manAsyncReplicationRuntimeLastSessionsFlushTime, jmsRuntimeEntry=jmsRuntimeEntry, manAsyncReplicationRuntimePrimaryCount=manAsyncReplicationRuntimePrimaryCount, wlssnmpStringMonitorMonitoredAttributeName=wlssnmpStringMonitorMonitoredAttributeName, securityConfigurationName=securityConfigurationName, serverMaxMessageSize=serverMaxMessageSize, pageFlowsRuntimeServerName=pageFlowsRuntimeServerName, jdbcOracleDataSourceRuntimeWaitingForConnectionHighCount=jdbcOracleDataSourceRuntimeWaitingForConnectionHighCount, safAgentObjectName=safAgentObjectName, serverDebugDebugMuxerTimeout=serverDebugDebugMuxerTimeout, safRemoteEndpointRuntimeURL=safRemoteEndpointRuntimeURL, ejbTransactionRuntimeTransactionsCommittedTotalCount=ejbTransactionRuntimeTransactionsCommittedTotalCount, onsClientRuntimeType=onsClientRuntimeType, customResourceDescriptorFileName=customResourceDescriptorFileName, unixMachineName=unixMachineName, webServiceBufferingRetryDelay=webServiceBufferingRetryDelay, serverHttpTraceSupportEnabled=serverHttpTraceSupportEnabled, selfTuningObjectName=selfTuningObjectName, webServerLogNumberOfFilesLimited=webServerLogNumberOfFilesLimited, jdbcDriverRuntimeName=jdbcDriverRuntimeName, serviceMigrationDataRuntimeName=serviceMigrationDataRuntimeName, pageFlowRuntimeTable=pageFlowRuntimeTable, wseeOperationRuntimeLastInvocationTime=wseeOperationRuntimeLastInvocationTime, jmsConnectionConsumerTable=jmsConnectionConsumerTable, ejbComponentRuntimeModuleId=ejbComponentRuntimeModuleId, jmsServerIndex=jmsServerIndex, webServerChunkedTransferDisabled=webServerChunkedTransferDisabled, serverDebugDebugJMSStore=serverDebugDebugJMSStore, webServicePersistenceDefaultLogicalStoreName=webServicePersistenceDefaultLogicalStoreName, jmsDestCommonMessagesThresholdHigh=jmsDestCommonMessagesThresholdHigh, bridgeDestinationCommonIndex=bridgeDestinationCommonIndex, securityConfigurationNodeManagerUsername=securityConfigurationNodeManagerUsername, jmsSAFMessageLogFileIndex=jmsSAFMessageLogFileIndex, webAppComponentRuntimeServletSessionsMonitoringIds=webAppComponentRuntimeServletSessionsMonitoringIds, wldfWatchNotificationRuntimeTotalLogWatchesTriggered=wldfWatchNotificationRuntimeTotalLogWatchesTriggered, kernelSocketBufferSizeAsChunkSize=kernelSocketBufferSizeAsChunkSize, entityCacheRuntimeAvgPerEntryDiskSize=entityCacheRuntimeAvgPerEntryDiskSize, wldfSystemResourceName=wldfSystemResourceName, wtcRuntimeName=wtcRuntimeName, webAppComponentRuntimeSessionInvalidationIntervalSecs=webAppComponentRuntimeSessionInvalidationIntervalSecs, wseeClientPortRuntimePoolTotalConversationalClientTakeCount=wseeClientPortRuntimePoolTotalConversationalClientTakeCount, webServerMaxPostTimeSecs=webServerMaxPostTimeSecs, wtcRemoteTuxDomKeepAlive=wtcRemoteTuxDomKeepAlive, defaultFileStoreTable=defaultFileStoreTable, jrockitRuntimeNumberOfDaemonThreads=jrockitRuntimeNumberOfDaemonThreads, wldfHarvesterRuntimeIndex=wldfHarvesterRuntimeIndex, safAgentDefaultRetryDelayBase=safAgentDefaultRetryDelayBase, serverDebugSlaveDeployer=serverDebugSlaveDeployer, wlsLogNotification=wlsLogNotification, trapTime=trapTime, wsrmRemoteEndpointRuntimeMessagesHighCount=wsrmRemoteEndpointRuntimeMessagesHighCount, springApplicationContextRuntimeStartupDate=springApplicationContextRuntimeStartupDate, coherenceServerRestartMax=coherenceServerRestartMax, jmsBridgeDestinationAdapterJNDIName=jmsBridgeDestinationAdapterJNDIName, shutdownClassClassName=shutdownClassClassName, jvmRuntimeHeapFreePercent=jvmRuntimeHeapFreePercent, safRemoteEndpointRuntimeDowntimeTotal=safRemoteEndpointRuntimeDowntimeTotal, wseeClientRuntimeTable=wseeClientRuntimeTable, wseeClientPortRuntimeStartTime=wseeClientPortRuntimeStartTime, webAppContainerObjectName=webAppContainerObjectName, kodoDataCacheRuntimeTable=kodoDataCacheRuntimeTable, wldfDbstoreArchiveRuntimeDataRetirementTotalTime=wldfDbstoreArchiveRuntimeDataRetirementTotalTime, cacheWorkManager=cacheWorkManager, jdbcDataSourceRuntimeWaitingForConnectionCurrentCount=jdbcDataSourceRuntimeWaitingForConnectionCurrentCount, channelRuntimeSubscriberCount=channelRuntimeSubscriberCount, executeQueueThreadsIncrease=executeQueueThreadsIncrease, ejbPoolRuntimeMissTotalCount=ejbPoolRuntimeMissTotalCount, serverDebugDebugJpaJdbcJdbc=serverDebugDebugJpaJdbcJdbc, webServiceBufferingName=webServiceBufferingName, trapMBeanType=trapMBeanType, logDomainLogBroadcasterBufferSize=logDomainLogBroadcasterBufferSize, jdbcOracleDataSourceRuntimePrepStmtCacheCurrentSize=jdbcOracleDataSourceRuntimePrepStmtCacheCurrentSize, serverDebugDebugJDBCSQL=serverDebugDebugJDBCSQL, jdbcServiceRuntimeType=jdbcServiceRuntimeType, wsReliableDeliveryPolicyType=wsReliableDeliveryPolicyType, wlsALSBAlert=wlsALSBAlert, messagingBridgeReconnectDelayMaximum=messagingBridgeReconnectDelayMaximum, serviceMigrationRuntimeIndex=serviceMigrationRuntimeIndex, wseeClusterRoutingRuntimeResponseCount=wseeClusterRoutingRuntimeResponseCount, coherenceServerLifeCycleRuntimeState=coherenceServerLifeCycleRuntimeState, springTransactionManagerRuntimeSuspendCount=springTransactionManagerRuntimeSuspendCount, wtctBridgeRedirectName=wtctBridgeRedirectName, serverDebugDebugJTAHealth=serverDebugDebugJTAHealth, jmsPooledConnectionRuntimeNumWaiters=jmsPooledConnectionRuntimeNumWaiters, singleSignOnServicesRuntimeObjectName=singleSignOnServicesRuntimeObjectName, wseeOperationConfigurationRuntimePolicySubjectName=wseeOperationConfigurationRuntimePolicySubjectName, wseePortPolicyRuntimeAuthorizationViolations=wseePortPolicyRuntimeAuthorizationViolations, serverDebugDebugSecuritySAMLAtn=serverDebugDebugSecuritySAMLAtn, securityEntry=securityEntry, joltConnectionPoolUserRole=joltConnectionPoolUserRole, messageDrivenControlEJBRuntimeName=messageDrivenControlEJBRuntimeName, jtaMigratableTargetPreScript=jtaMigratableTargetPreScript, webServiceEntry=webServiceEntry, coherenceClusterSystemResourceSourcePath=coherenceClusterSystemResourceSourcePath, mailSessionName=mailSessionName, jdbcOracleDataSourceInstanceRuntimeTable=jdbcOracleDataSourceInstanceRuntimeTable, jmsRuntimeParent=jmsRuntimeParent, wlssnmpAgentRuntimeFailedEncryptionCount=wlssnmpAgentRuntimeFailedEncryptionCount, serverDebugDebugXMLRegistryIncludeClass=serverDebugDebugXMLRegistryIncludeClass, wldfDbstoreArchiveRuntimeRecordRetrievalTime=wldfDbstoreArchiveRuntimeRecordRetrievalTime, wtcExportType=wtcExportType, jmsMessageLogFileType=jmsMessageLogFileType, configurationPropertyName=configurationPropertyName, federationServicesITSRequiresSSL=federationServicesITSRequiresSSL, serverDebugDebugMessagingKernel=serverDebugDebugMessagingKernel, connectorComponentRuntimeConnectionPoolCount=connectorComponentRuntimeConnectionPoolCount, jtaMigratableTargetAdditionalMigrationAttempts=jtaMigratableTargetAdditionalMigrationAttempts, networkAccessPointLoginTimeoutMillis=networkAccessPointLoginTimeoutMillis, serverLowMemoryGranularityLevel=serverLowMemoryGranularityLevel, serverDebugDebugJTA2PC=serverDebugDebugJTA2PC, singleSignOnServicesContactPersonTelephoneNumber=singleSignOnServicesContactPersonTelephoneNumber, jtaForgetHeuristics=jtaForgetHeuristics, fileStoreDeploymentOrder=fileStoreDeploymentOrder, serverDebugDebugDiagnosticArchive=serverDebugDebugDiagnosticArchive, nonXAResourceRuntimeEntry=nonXAResourceRuntimeEntry, serviceMigrationDataRuntimeMigrationEndTime=serviceMigrationDataRuntimeMigrationEndTime, jmsDestinationRuntimeBytesCurrentCount=jmsDestinationRuntimeBytesCurrentCount, migratableServiceCoordinatorRuntimeEntry=migratableServiceCoordinatorRuntimeEntry, jvmRuntimeOSName=jvmRuntimeOSName, transactionNameRuntimeParent=transactionNameRuntimeParent, webServiceBufferingTable=webServiceBufferingTable, serverIdleConnectionTimeout=serverIdleConnectionTimeout, kernelMuxerClass=kernelMuxerClass, serverStuckThreadMaxTime=serverStuckThreadMaxTime, defaultFileStoreName=defaultFileStoreName, wlecConnectionServiceRuntimeTable=wlecConnectionServiceRuntimeTable, kernelOutboundEnabled=kernelOutboundEnabled, wsrmRemoteEndpointRuntimeObjectName=wsrmRemoteEndpointRuntimeObjectName, wseePortPolicyRuntimeTotalViolations=wseePortPolicyRuntimeTotalViolations, connectorComponentRuntimeConfigurationVersion=connectorComponentRuntimeConfigurationVersion, networkChannelClusterAddress=networkChannelClusterAddress, wlssnmpCounterMonitorOffset=wlssnmpCounterMonitorOffset, webAppComponentServletReloadCheckSecs=webAppComponentServletReloadCheckSecs, nonXAResourceRuntimeTransactionHeuristicsTotalCount=nonXAResourceRuntimeTransactionHeuristicsTotalCount, webAppComponentRuntimeComponentName=webAppComponentRuntimeComponentName, wldfWatchNotificationRuntimeMaximumActiveAlarmsCount=wldfWatchNotificationRuntimeMaximumActiveAlarmsCount, jmsServerRuntimeTable=jmsServerRuntimeTable, wlssnmpCounterMonitorObjectName=wlssnmpCounterMonitorObjectName, entityCacheCumulativeRuntimeTotalNumberDiskPurges=entityCacheCumulativeRuntimeTotalNumberDiskPurges, jtaType=jtaType, federationServicesEntry=federationServicesEntry, capacityName=capacityName, serverDebugDebugLeaderElection=serverDebugDebugLeaderElection, messagingBridgeRuntimeIndex=messagingBridgeRuntimeIndex, fairShareRequestClassEntry=fairShareRequestClassEntry, pageFlowActionRuntimeActionName=pageFlowActionRuntimeActionName, serverDebugDebugJMSDispatcher=serverDebugDebugJMSDispatcher, wseeClientOperationRuntimeErrorCount=wseeClientOperationRuntimeErrorCount, jdbcOracleDataSourceInstanceRuntimeActiveConnectionsCurrentCount=jdbcOracleDataSourceInstanceRuntimeActiveConnectionsCurrentCount, wldfWlstoreArchiveRuntimeIndexPageCount=wldfWlstoreArchiveRuntimeIndexPageCount, nonXAResourceRuntimeParent=nonXAResourceRuntimeParent, ejbTransactionRuntimeTable=ejbTransactionRuntimeTable, serverTunnelingClientPingSecs=serverTunnelingClientPingSecs, wseeV2RuntimeStartTime=wseeV2RuntimeStartTime, executeQueueTable=executeQueueTable, jdbcConnectionPoolRuntimeParent=jdbcConnectionPoolRuntimeParent, singleSignOnServicesWantBasicAuthClientAuthentication=singleSignOnServicesWantBasicAuthClientAuthentication, ejbTimerRuntimeName=ejbTimerRuntimeName, wlssnmpCounterMonitorMonitoredAttributeName=wlssnmpCounterMonitorMonitoredAttributeName, serverDebugDebugHttpLogging=serverDebugDebugHttpLogging, wseeClusterFrontEndRuntimeObjectName=wseeClusterFrontEndRuntimeObjectName, jtaRuntimeTransactionRolledBackSystemTotalCount=jtaRuntimeTransactionRolledBackSystemTotalCount, bridgeDestinationCommonName=bridgeDestinationCommonName, manReplicationRuntimeRemoteClusterReachable=manReplicationRuntimeRemoteClusterReachable, ejbTimerRuntimeCancelledTimerCount=ejbTimerRuntimeCancelledTimerCount, wseeRuntimeIndex=wseeRuntimeIndex, manAsyncReplicationRuntimeType=manAsyncReplicationRuntimeType, serverDebugDebugStoreAdmin=serverDebugDebugStoreAdmin, serverDebugDebugSecurityPasswordPolicy=serverDebugDebugSecurityPasswordPolicy, migratableServiceCoordinatorRuntimeObjectName=migratableServiceCoordinatorRuntimeObjectName, ejbCacheRuntimeTable=ejbCacheRuntimeTable, clusterClusterBroadcastChannel=clusterClusterBroadcastChannel, wanreplicationRuntimeRemoteClusterReachable=wanreplicationRuntimeRemoteClusterReachable, transactionResourceRuntimeTransactionHeuristicRollbackTotalCount=transactionResourceRuntimeTransactionHeuristicRollbackTotalCount, networkAccessPointConnectTimeout=networkAccessPointConnectTimeout, wldfWatchNotificationRuntimeTotalActiveManualResetAlarms=wldfWatchNotificationRuntimeTotalActiveManualResetAlarms, wtcResourcesObjectName=wtcResourcesObjectName, comType=comType, serverLifeCycleTaskRuntimeEntry=serverLifeCycleTaskRuntimeEntry, userLockoutManagerRuntimeTable=userLockoutManagerRuntimeTable, wseeClientOperationRuntimeResponseTimeAverage=wseeClientOperationRuntimeResponseTimeAverage, workManagerEntry=workManagerEntry, coherenceClusterSystemResourceDeploymentPrincipalName=coherenceClusterSystemResourceDeploymentPrincipalName, capacityIndex=capacityIndex, shutdownClassArguments=shutdownClassArguments, serverManagedServerIndependenceEnabled=serverManagedServerIndependenceEnabled, wldfRuntimeIndex=wldfRuntimeIndex, jmsRuntimeName=jmsRuntimeName, singleSignOnServicesIdentityProviderEnabled=singleSignOnServicesIdentityProviderEnabled, webserviceTokenHandlerType=webserviceTokenHandlerType, connectorConnectionRuntimeManagedConnectionFactoryClassName=connectorConnectionRuntimeManagedConnectionFactoryClassName, jmsComponentRuntimeParent=jmsComponentRuntimeParent, webAppComponentEntry=webAppComponentEntry, jmsConnectionConsumerMessagesMaximum=jmsConnectionConsumerMessagesMaximum, webAppComponentRuntimeSessionIDLength=webAppComponentRuntimeSessionIDLength, jmsServerConsumptionPausedAtStartup=jmsServerConsumptionPausedAtStartup, serverStartEntry=serverStartEntry, jmsRemoteEndpointRuntimePausedForForwarding=jmsRemoteEndpointRuntimePausedForForwarding, deploymentManagerType=deploymentManagerType, clusterRuntimeServerNames=clusterRuntimeServerNames, taskRuntimeType=taskRuntimeType, wldfInstrumentationRuntimeParent=wldfInstrumentationRuntimeParent, webServiceLogicalStorePhysicalStoreName=webServiceLogicalStorePhysicalStoreName, wseeClientPortRuntimeTotalFaults=wseeClientPortRuntimeTotalFaults, jtaRuntimeIndex=jtaRuntimeIndex, queryCacheRuntimeCacheMissByRelatedQueryMissCount=queryCacheRuntimeCacheMissByRelatedQueryMissCount, kernelDGCIdlePeriodsUntilTimeout=kernelDGCIdlePeriodsUntilTimeout, wsrmRemoteEndpointRuntimeConversationsTotalCount=wsrmRemoteEndpointRuntimeConversationsTotalCount, wldfWatchNotificationRuntimeTotalHarvesterWatchesTriggered=wldfWatchNotificationRuntimeTotalHarvesterWatchesTriggered, networkChannelListenPortEnabled=networkChannelListenPortEnabled, contextCaseName=contextCaseName, jmsServerRuntimeType=jmsServerRuntimeType)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", wldfWlstoreArchiveRuntimeInsertionTime=wldfWlstoreArchiveRuntimeInsertionTime, servletRuntimeContextPath=servletRuntimeContextPath, kodoQueryCompilationCacheRuntimeIndex=kodoQueryCompilationCacheRuntimeIndex, wsrmRemoteEndpointRuntimeMessagesCurrentCount=wsrmRemoteEndpointRuntimeMessagesCurrentCount, wldfWatchNotificationRuntimeParent=wldfWatchNotificationRuntimeParent, securityParent=securityParent, jmsSAFMessageLogFileFileMinSize=jmsSAFMessageLogFileFileMinSize, jmsDistributedDestinationMemberTable=jmsDistributedDestinationMemberTable, webServiceBufferingIndex=webServiceBufferingIndex, logFileName=logFileName, entityCacheCumulativeRuntimeMaxEntryTimeout=entityCacheCumulativeRuntimeMaxEntryTimeout, contextRequestClassDeploymentOrder=contextRequestClassDeploymentOrder, singleSignOnServicesRuntimeEntry=singleSignOnServicesRuntimeEntry, serverDebugDebugDiagnosticLifecycleHandlers=serverDebugDebugDiagnosticLifecycleHandlers, safRuntimeTable=safRuntimeTable, kodoPersistenceUnitRuntimeObjectName=kodoPersistenceUnitRuntimeObjectName, jdbcOracleDataSourceRuntimeEntry=jdbcOracleDataSourceRuntimeEntry, wldfDbstoreArchiveRuntimeRecordSeekCount=wldfDbstoreArchiveRuntimeRecordSeekCount, ejbPoolRuntimeWaiterCurrentCount=ejbPoolRuntimeWaiterCurrentCount, webServerLogTable=webServerLogTable, serverDefaultInternalServletsDisabled=serverDefaultInternalServletsDisabled, executeQueueRuntimeTable=executeQueueRuntimeTable, jdbcDataSourceRuntimeParent=jdbcDataSourceRuntimeParent, wtcRemoteTuxDomDefaultAppKey=wtcRemoteTuxDomDefaultAppKey, nonXAResourceRuntimeNonXAResourceName=nonXAResourceRuntimeNonXAResourceName, jtaRecoveryRuntimeParent=jtaRecoveryRuntimeParent, serverDebugDebugMessagingBridgeRuntimeVerbose=serverDebugDebugMessagingBridgeRuntimeVerbose, jmsServerBytesPagingEnabled=jmsServerBytesPagingEnabled, wtcExportTable=wtcExportTable, wsrmRemoteEndpointRuntimeUptimeTotal=wsrmRemoteEndpointRuntimeUptimeTotal, securityTable=securityTable, serverFailureTriggerObjectName=serverFailureTriggerObjectName, serviceMigrationDataRuntimeDestinationsAttempted=serviceMigrationDataRuntimeDestinationsAttempted, bridgeDestinationCommonType=bridgeDestinationCommonType, jmsDestinationType=jmsDestinationType, serverJavaCompilerPreClassPath=serverJavaCompilerPreClassPath, wlssnmpGaugeMonitorEntry=wlssnmpGaugeMonitorEntry, serverDebugDebugXMLEntityCacheIncludeTime=serverDebugDebugXMLEntityCacheIncludeTime, domainType=domainType, wlssnmpCounterMonitorModulus=wlssnmpCounterMonitorModulus, webServiceBufferingRetryCount=webServiceBufferingRetryCount, deploymentTaskRuntimeName=deploymentTaskRuntimeName, serverRuntimeIndex=serverRuntimeIndex, jmsProducerRuntimeParent=jmsProducerRuntimeParent, serverDebugDebugClassSize=serverDebugDebugClassSize, wanreplicationRuntimeName=wanreplicationRuntimeName, wldfSystemResourceType=wldfSystemResourceType, singletonServiceAppScopedModuleType=singletonServiceAppScopedModuleType, jdbcDataSourceTaskRuntimeIndex=jdbcDataSourceTaskRuntimeIndex, kodoQueryCompilationCacheRuntimeObjectName=kodoQueryCompilationCacheRuntimeObjectName, coherenceClusterSystemResourceModuleType=coherenceClusterSystemResourceModuleType, wlssnmpStringMonitorNotifyMatch=wlssnmpStringMonitorNotifyMatch, wseePortPolicyRuntimeEntry=wseePortPolicyRuntimeEntry, ejbRuntimeTable=ejbRuntimeTable, ejbContainerName=ejbContainerName, virtualHostIndex=virtualHostIndex, serverDebugDebugDiagnosticArchiveRetirement=serverDebugDebugDiagnosticArchiveRetirement, jmsMessageLogFileTable=jmsMessageLogFileTable, jdbcOracleDataSourceRuntimeFailedReserveRequestCount=jdbcOracleDataSourceRuntimeFailedReserveRequestCount, springViewResolverRuntimeType=springViewResolverRuntimeType, jdbcOracleDataSourceRuntimeCurrCapacity=jdbcOracleDataSourceRuntimeCurrCapacity, serverDebugDebugDeploymentServiceInternal=serverDebugDebugDeploymentServiceInternal, coherenceServerLifeCycleTaskRuntimeIndex=coherenceServerLifeCycleTaskRuntimeIndex, entityCacheRuntimeName=entityCacheRuntimeName, servletRuntimeExecutionTimeTotal=servletRuntimeExecutionTimeTotal, wldfInstrumentationRuntimeMinWeavingTime=wldfInstrumentationRuntimeMinWeavingTime, serverCompleteIIOPMessageTimeout=serverCompleteIIOPMessageTimeout, webserviceTimestampValidityPeriod=webserviceTimestampValidityPeriod, safRemoteEndpointRuntimeEntry=safRemoteEndpointRuntimeEntry, webServiceRuntimeHomePageURL=webServiceRuntimeHomePageURL, persistentStoreRuntimeCreateCount=persistentStoreRuntimeCreateCount, workManagerRuntimeCompletedRequests=workManagerRuntimeCompletedRequests, jdbcOracleDataSourceInstanceRuntimeEnabled=jdbcOracleDataSourceInstanceRuntimeEnabled, transactionNameRuntimeIndex=transactionNameRuntimeIndex, transactionResourceRuntimeTransactionHeuristicMixedTotalCount=transactionResourceRuntimeTransactionHeuristicMixedTotalCount, serverDebugListenThreadDebug=serverDebugListenThreadDebug, wldfRuntimeObjectName=wldfRuntimeObjectName, ejbTimerRuntimeParent=ejbTimerRuntimeParent, jtaSerializeEnlistmentsGCIntervalMillis=jtaSerializeEnlistmentsGCIntervalMillis, serverUploadDirectoryName=serverUploadDirectoryName, deploymentTaskRuntimeParent=deploymentTaskRuntimeParent, jdbcOracleDataSourceRuntimeHighestNumAvailable=jdbcOracleDataSourceRuntimeHighestNumAvailable, jmsServerRuntimeMessagesHighCount=jmsServerRuntimeMessagesHighCount, serviceMigrationRuntimeClusterMaster=serviceMigrationRuntimeClusterMaster, springTransactionManagerRuntimeBeanId=springTransactionManagerRuntimeBeanId, serverRuntimeRestartsTotalCount=serverRuntimeRestartsTotalCount, snmpAgentAuthenticationProtocol=snmpAgentAuthenticationProtocol, maxThreadsConstraintRuntimeParent=maxThreadsConstraintRuntimeParent, safAgentRuntimeFailedMessagesTotal=safAgentRuntimeFailedMessagesTotal, rmcFactoryEntry=rmcFactoryEntry, wldfAccessRuntimeObjectName=wldfAccessRuntimeObjectName, foreignJNDIProviderTable=foreignJNDIProviderTable, webServiceResponseBufferingQueueEntry=webServiceResponseBufferingQueueEntry, wseeV2RuntimePolicyFaults=wseeV2RuntimePolicyFaults, workManagerShutdownTriggerIndex=workManagerShutdownTriggerIndex, wseeClientPortRuntimeTransportProtocolType=wseeClientPortRuntimeTransportProtocolType, wtcResourcesAppPasswordIV=wtcResourcesAppPasswordIV, serverHealthCheckIntervalSeconds=serverHealthCheckIntervalSeconds, jmsComponentRuntimeObjectName=jmsComponentRuntimeObjectName, jmsSessionPoolRuntimeConnectionConsumersTotalCount=jmsSessionPoolRuntimeConnectionConsumersTotalCount, capacityTable=capacityTable, webServiceLogicalStorePersistenceStrategy=webServiceLogicalStorePersistenceStrategy, jmsSessionPoolRuntimeIndex=jmsSessionPoolRuntimeIndex, wlssnmpAttributeChangeAttributeMBeanName=wlssnmpAttributeChangeAttributeMBeanName, jmsDestinationRuntimeBytesHighCount=jmsDestinationRuntimeBytesHighCount, jmsInteropModuleEntry=jmsInteropModuleEntry, wlssnmpCounterMonitorType=wlssnmpCounterMonitorType, wlecConnectionServiceRuntimeConnectionPoolCount=wlecConnectionServiceRuntimeConnectionPoolCount, jdbcOracleDataSourceRuntimeServiceName=jdbcOracleDataSourceRuntimeServiceName, serverIdlePeriodsUntilTimeout=serverIdlePeriodsUntilTimeout, wtcServerObjectName=wtcServerObjectName, singletonServiceAdditionalMigrationAttempts=singletonServiceAdditionalMigrationAttempts, serverDebugDebugSecuritySAML2Service=serverDebugDebugSecuritySAML2Service, servletRuntimeIndex=servletRuntimeIndex, wldfWatchNotificationRuntimeActiveAlarmWatches=wldfWatchNotificationRuntimeActiveAlarmWatches, cacheAsyncListenersObjectName=cacheAsyncListenersObjectName, joltConnectionPoolRuntimeEntry=joltConnectionPoolRuntimeEntry, threadPoolRuntimeObjectName=threadPoolRuntimeObjectName, requestClassRuntimeTotalThreadUse=requestClassRuntimeTotalThreadUse, clusterMigrationBasis=clusterMigrationBasis, jmsDestCommonBytesThresholdHigh=jmsDestCommonBytesThresholdHigh, snmpAgentServerStatusCheckIntervalFactor=snmpAgentServerStatusCheckIntervalFactor, serverDebugDebugWorkContext=serverDebugDebugWorkContext, wseeClientPortRuntimePoolTakenCount=wseeClientPortRuntimePoolTakenCount, wlssnmpAttributeChangeAttributeMBeanType=wlssnmpAttributeChangeAttributeMBeanType, serverDebugDebugEjbInvoke=serverDebugDebugEjbInvoke, ejbCacheRuntimeType=ejbCacheRuntimeType, singleSignOnServicesRuntimeTable=singleSignOnServicesRuntimeTable, serverLoginTimeoutMillis=serverLoginTimeoutMillis, singleSignOnServicesRuntimeName=singleSignOnServicesRuntimeName, entityCacheCurrentStateRuntimeAvgPercentTransient=entityCacheCurrentStateRuntimeAvgPercentTransient, wldfSystemResourceModuleType=wldfSystemResourceModuleType, jdbcServiceRuntimeIndex=jdbcServiceRuntimeIndex, serverDebugDebugDomainLogHandler=serverDebugDebugDomainLogHandler, persistentStoreRuntimeIndex=persistentStoreRuntimeIndex, serverDebugDebugStoreIOPhysicalVerbose=serverDebugDebugStoreIOPhysicalVerbose, singleSignOnServicesOrganizationURL=singleSignOnServicesOrganizationURL, serverIdleIIOPConnectionTimeout=serverIdleIIOPConnectionTimeout, wls=wls, domainRootDirectory=domainRootDirectory, serverDebugDebugURLResolution=serverDebugDebugURLResolution, wldfDbstoreArchiveRuntimeEntry=wldfDbstoreArchiveRuntimeEntry, jmsInteropModuleTable=jmsInteropModuleTable, jmsRemoteEndpointRuntimeLastTimeConnected=jmsRemoteEndpointRuntimeLastTimeConnected, pathServiceRuntimeName=pathServiceRuntimeName, wseeClientOperationRuntimeOperationName=wseeClientOperationRuntimeOperationName, wldfWlstoreArchiveRuntimeIndex=wldfWlstoreArchiveRuntimeIndex, wldfSystemResourceDeploymentOrder=wldfSystemResourceDeploymentOrder, pageFlowsRuntimeTable=pageFlowsRuntimeTable, wlssnmpProxyType=wlssnmpProxyType, serverObjectName=serverObjectName, jobSchedulerRuntimeName=jobSchedulerRuntimeName, wldfHarvesterRuntimeTotalSamplingTime=wldfHarvesterRuntimeTotalSamplingTime, wseeOperationRuntimePolicyAttachmentSupport=wseeOperationRuntimePolicyAttachmentSupport, wlecConnectionRuntimeLastAccessTime=wlecConnectionRuntimeLastAccessTime, jmsConsumerRuntimeObjectName=jmsConsumerRuntimeObjectName, wseeOperationRuntimeIndex=wseeOperationRuntimeIndex, connectorComponentRuntimeObjectName=connectorComponentRuntimeObjectName, jdbcConnectionPoolRuntimePoolState=jdbcConnectionPoolRuntimePoolState, safRemoteEndpointRuntimeIndex=safRemoteEndpointRuntimeIndex, startupClassObjectName=startupClassObjectName, remoteSAFContextName=remoteSAFContextName, wlssnmpStringMonitorName=wlssnmpStringMonitorName, webserviceSecurityTokenTokenType=webserviceSecurityTokenTokenType, serverDebugDebugMessagingBridgeStartup=serverDebugDebugMessagingBridgeStartup, jrockitRuntimeJvmProcessorLoad=jrockitRuntimeJvmProcessorLoad, clusterSessionFlushInterval=clusterSessionFlushInterval, jmsConnectionConsumerType=jmsConnectionConsumerType, clusterMulticastSendDelay=clusterMulticastSendDelay, jdbcDataSourceRuntimeType=jdbcDataSourceRuntimeType, webAppComponentParent=webAppComponentParent, webServerDeploymentOrder=webServerDeploymentOrder, jdbcDataSourceRuntimeDeploymentState=jdbcDataSourceRuntimeDeploymentState, wldfWlstoreArchiveRuntimeLastDataRetirementStartTime=wldfWlstoreArchiveRuntimeLastDataRetirementStartTime, singleSignOnServicesForceAuthn=singleSignOnServicesForceAuthn, jmsRemoteEndpointRuntimeBytesCurrentCount=jmsRemoteEndpointRuntimeBytesCurrentCount, wseeOperationRuntimeExecutionTimeHigh=wseeOperationRuntimeExecutionTimeHigh, springApplicationContextRuntimeTable=springApplicationContextRuntimeTable, clusterTable=clusterTable, overloadProtectionTable=overloadProtectionTable, ejbCacheRuntimeActivationCount=ejbCacheRuntimeActivationCount, jmsPooledConnectionRuntimeHighestNumUnavailable=jmsPooledConnectionRuntimeHighestNumUnavailable, jtaRuntimeTransactionRolledBackAppTotalCount=jtaRuntimeTransactionRolledBackAppTotalCount, wtcPasswordIndex=wtcPasswordIndex, httpProxyInitialConnections=httpProxyInitialConnections, serverLifeCycleRuntimeWeblogicHome=serverLifeCycleRuntimeWeblogicHome, coherenceServerType=coherenceServerType, clusterRuntimeCurrentSecondaryServer=clusterRuntimeCurrentSecondaryServer, serverStartupMode=serverStartupMode, serverDebugDebugRAPooling=serverDebugDebugRAPooling, jmsRemoteEndpointRuntimeMessagesPendingCount=jmsRemoteEndpointRuntimeMessagesPendingCount, serverDebugDebugJDBCRAC=serverDebugDebugJDBCRAC, entityCacheCurrentStateRuntimeAvgPerEntryDiskSize=entityCacheCurrentStateRuntimeAvgPerEntryDiskSize, owsmSecurityPolicyRuntimeName=owsmSecurityPolicyRuntimeName, wlssnmpStringMonitorNotifyDiffer=wlssnmpStringMonitorNotifyDiffer, foreignJNDILinkIndex=foreignJNDILinkIndex, serverDebugRedefiningClassLoader=serverDebugRedefiningClassLoader, pageFlowsRuntimeEntry=pageFlowsRuntimeEntry, joltConnectionRuntimeParent=joltConnectionRuntimeParent, messageDrivenEJBRuntimeIndex=messageDrivenEJBRuntimeIndex, jMSDurableSubscriberRuntimeName=jMSDurableSubscriberRuntimeName, wldfDbstoreArchiveRuntimeInsertionTime=wldfDbstoreArchiveRuntimeInsertionTime, domainLibraryApplicationName=domainLibraryApplicationName, webserviceTimestampClockPrecision=webserviceTimestampClockPrecision, jdbcOracleDataSourceInstanceRuntimeIndex=jdbcOracleDataSourceInstanceRuntimeIndex, jmsSessionPoolObjectName=jmsSessionPoolObjectName, sslExportKeyLifespan=sslExportKeyLifespan, channelRuntimeEntry=channelRuntimeEntry, entityCacheRuntimeMinEntryTimeout=entityCacheRuntimeMinEntryTimeout, queryCacheRuntimeTable=queryCacheRuntimeTable, logFilterTable=logFilterTable, wldfWatchJMXNotificationRuntimeEntry=wldfWatchJMXNotificationRuntimeEntry, wseeMcRuntimeType=wseeMcRuntimeType, jmsSAFMessageLogFileLogFileRotationDir=jmsSAFMessageLogFileLogFileRotationDir, cacheAsyncListenersEnabled=cacheAsyncListenersEnabled, webServiceRuntimeEntry=webServiceRuntimeEntry, jmsRuntimeConnectionsHighCount=jmsRuntimeConnectionsHighCount, virtualHostNetworkAccessPoint=virtualHostNetworkAccessPoint, springTransactionTemplateRuntimeIndex=springTransactionTemplateRuntimeIndex, foreignJNDIProviderEntry=foreignJNDIProviderEntry, jmsMessageLogFileRotationTime=jmsMessageLogFileRotationTime, singleSignOnServicesPOSTOneUseCheckEnabled=singleSignOnServicesPOSTOneUseCheckEnabled, maxThreadsConstraintRuntimeEntry=maxThreadsConstraintRuntimeEntry, jmsConsumerRuntimeEntry=jmsConsumerRuntimeEntry, xmlParserSelectRegistryIndex=xmlParserSelectRegistryIndex, wldfInstrumentationRuntimeTotalWeavingTime=wldfInstrumentationRuntimeTotalWeavingTime, ejbContainerJavaCompiler=ejbContainerJavaCompiler, serverDebugDebugSecurityJACC=serverDebugDebugSecurityJACC, wtcResourcesRemoteMBEncoding=wtcResourcesRemoteMBEncoding, joltConnectionPoolRuntimeSecurityContextPropagation=joltConnectionPoolRuntimeSecurityContextPropagation, singleSignOnServicesSSOSigningKeyAlias=singleSignOnServicesSSOSigningKeyAlias, serverDefaultProtocol=serverDefaultProtocol, serverDebugDebugEmbeddedLDAP=serverDebugDebugEmbeddedLDAP, securityConfigurationConnectionFilter=securityConfigurationConnectionFilter, wldfWatchNotificationRuntimeTotalFailedSMTPNotifications=wldfWatchNotificationRuntimeTotalFailedSMTPNotifications, transactionNameRuntimeTable=transactionNameRuntimeTable, wseeOperationRuntimeType=wseeOperationRuntimeType, serverDebugDebugJAXPDebugName=serverDebugDebugJAXPDebugName, wseeMcRuntimeEntry=wseeMcRuntimeEntry, springViewRuntimeBeanId=springViewRuntimeBeanId, ejbCacheRuntimePassivationCount=ejbCacheRuntimePassivationCount, wlssnmpAgentDeploymentName=wlssnmpAgentDeploymentName, webAppContainerOptimisticSerialization=webAppContainerOptimisticSerialization, snmpAgentLocalizedKeyCacheInvalidationInterval=snmpAgentLocalizedKeyCacheInvalidationInterval, wlssnmpCounterMonitorThreshold=wlssnmpCounterMonitorThreshold, serverLifeCycleTaskRuntimeName=serverLifeCycleTaskRuntimeName, onsDaemonRuntimeName=onsDaemonRuntimeName, springBeanDefinitionRuntimeIndex=springBeanDefinitionRuntimeIndex, webAppContainerWeblogicPluginEnabled=webAppContainerWeblogicPluginEnabled, springApplicationContextRuntimeParentContext=springApplicationContextRuntimeParentContext, wtcServerName=wtcServerName, entityCacheRuntimeTable=entityCacheRuntimeTable, securityConfigurationClearTextCredentialAccessEnabled=securityConfigurationClearTextCredentialAccessEnabled, jdbcSystemResourceType=jdbcSystemResourceType)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", serviceMigrationDataRuntimeServerName=serviceMigrationDataRuntimeServerName, wsrmRemoteEndpointRuntimeBytesThresholdTime=wsrmRemoteEndpointRuntimeBytesThresholdTime, sslOutboundCertificateValidation=sslOutboundCertificateValidation, mailSessionDeploymentOrder=mailSessionDeploymentOrder, wlssnmpAgentDeploymentTable=wlssnmpAgentDeploymentTable, wsrmRemoteEndpointRuntimeMessagesPendingCount=wsrmRemoteEndpointRuntimeMessagesPendingCount, wldfWlstoreArchiveRuntimeEntry=wldfWlstoreArchiveRuntimeEntry, wldfHarvesterRuntimeTotalSamplingCycles=wldfHarvesterRuntimeTotalSamplingCycles, wseeRuntimeType=wseeRuntimeType, kernelMaxMessageSize=kernelMaxMessageSize, jmsInteropModuleObjectName=jmsInteropModuleObjectName, serverDebugDebugJMSPauseResume=serverDebugDebugJMSPauseResume, jmsDestCommonName=jmsDestCommonName, jmsConnectionConsumerSelector=jmsConnectionConsumerSelector, jdbcOracleDataSourceRuntimeTable=jdbcOracleDataSourceRuntimeTable, connectorConnectionPoolRuntimeNumWaitersCurrentCount=connectorConnectionPoolRuntimeNumWaitersCurrentCount, owsmSecurityPolicyRuntimeIndex=owsmSecurityPolicyRuntimeIndex, wseePortPolicyRuntimeType=wseePortPolicyRuntimeType, jmsSessionPoolRuntimeName=jmsSessionPoolRuntimeName, jPAType=jPAType, wldfWlstoreArchiveRuntimeRetrievedRecordCount=wldfWlstoreArchiveRuntimeRetrievedRecordCount, safRemoteEndpointRuntimeParent=safRemoteEndpointRuntimeParent, wseeClientRuntimeName=wseeClientRuntimeName, bridgeDestinationParent=bridgeDestinationParent, connectorComponentRuntimeVersionId=connectorComponentRuntimeVersionId, wseeClientRuntimeClientID=wseeClientRuntimeClientID, logBufferSizeKB=logBufferSizeKB, wanreplicationRuntimePrimaryCount=wanreplicationRuntimePrimaryCount, jrockitRuntimeUptime=jrockitRuntimeUptime, wlecConnectionServiceRuntimeParent=wlecConnectionServiceRuntimeParent, jdbcStoreName=jdbcStoreName, jmsMessageLogFileFileCount=jmsMessageLogFileFileCount, unicastMessagingRuntimeType=unicastMessagingRuntimeType, overloadProtectionPanicAction=overloadProtectionPanicAction, coherenceServerObjectName=coherenceServerObjectName, transactionNameRuntimeName=transactionNameRuntimeName, jmxManagementEJBEnabled=jmxManagementEJBEnabled, databaseLessLeasingBasisEntry=databaseLessLeasingBasisEntry, wtcResourcesType=wtcResourcesType, wldfDataAccessRuntimeEarliestAvailableTimestamp=wldfDataAccessRuntimeEarliestAvailableTimestamp, jdbcDataSourceRuntimeIndex=jdbcDataSourceRuntimeIndex, jmsConnectionRuntimeType=jmsConnectionRuntimeType, databaseLessLeasingBasisName=databaseLessLeasingBasisName, singleSignOnServicesWantAuthnRequestsSigned=singleSignOnServicesWantAuthnRequestsSigned, serverType=serverType, serverDebugDebugSNMPProtocolTCP=serverDebugDebugSNMPProtocolTCP, entityCacheCumulativeRuntimeParent=entityCacheCumulativeRuntimeParent, connectorComponentRuntimeVersioned=connectorComponentRuntimeVersioned, serverDebugDebugMessaging=serverDebugDebugMessaging, wldfDataRetirementByAgeEnabled=wldfDataRetirementByAgeEnabled, wseePolicySubjectManagerRuntimeEntry=wseePolicySubjectManagerRuntimeEntry, wldfWatchNotificationRuntimeTotalActiveAutomaticResetAlarms=wldfWatchNotificationRuntimeTotalActiveAutomaticResetAlarms, serverCustomIdentityKeyStoreFileName=serverCustomIdentityKeyStoreFileName, wtctBridgeGlobalJmsFactory=wtctBridgeGlobalJmsFactory, trapALSBAlertDomainName=trapALSBAlertDomainName, sslListenPort=sslListenPort, wldfSystemResourceTable=wldfSystemResourceTable, wlecConnectionPoolObjectName=wlecConnectionPoolObjectName, iiopDefaultWideCharCodeset=iiopDefaultWideCharCodeset, jobSchedulerRuntimeObjectName=jobSchedulerRuntimeObjectName, wseeClientPortRuntimeName=wseeClientPortRuntimeName, startupClassType=startupClassType, ejbRuntimeEJBName=ejbRuntimeEJBName, webAppComponentRuntimeFilterDispatchedRequestsEnabled=webAppComponentRuntimeFilterDispatchedRequestsEnabled, wtcPasswordRemotePasswordIV=wtcPasswordRemotePasswordIV, wlssnmpTrapDestinationIndex=wlssnmpTrapDestinationIndex, serverLogRemoteExceptionsEnabled=serverLogRemoteExceptionsEnabled, migrationDataRuntimeClusterName=migrationDataRuntimeClusterName, connectorConnectionPoolRuntimeNumberDetectedIdle=connectorConnectionPoolRuntimeNumberDetectedIdle, coherenceServerLifeCycleRuntimeObjectName=coherenceServerLifeCycleRuntimeObjectName, psAssemblyRuntimeName=psAssemblyRuntimeName, jmsServerRuntimeInsertionPausedState=jmsServerRuntimeInsertionPausedState, requestClassRuntimeIndex=requestClassRuntimeIndex, networkChannelIndex=networkChannelIndex, applicationRuntimeType=applicationRuntimeType, transactionResourceRuntimeTable=transactionResourceRuntimeTable, connectorConnectionRuntimeParent=connectorConnectionRuntimeParent, springTransactionManagerRuntimeName=springTransactionManagerRuntimeName, jtaMigratableTargetName=jtaMigratableTargetName, serverDebugDebugSecurityAtn=serverDebugDebugSecurityAtn, singleSignOnServicesBasicAuthUsername=singleSignOnServicesBasicAuthUsername, springViewRuntimeType=springViewRuntimeType, wlssnmpAgentDeploymentSendAutomaticTrapsEnabled=wlssnmpAgentDeploymentSendAutomaticTrapsEnabled, migrationDataRuntimeMachineMigratedFrom=migrationDataRuntimeMachineMigratedFrom, jrockitRuntimeFreePhysicalMemory=jrockitRuntimeFreePhysicalMemory, jtaIndex=jtaIndex, entityEJBRuntimeIndex=entityEJBRuntimeIndex, fileStoreMaxFileSize=fileStoreMaxFileSize, federationServicesObjectName=federationServicesObjectName, pageFlowActionRuntimeSuccessDispatchTimeAverage=pageFlowActionRuntimeSuccessDispatchTimeAverage, wlssnmpAgentRuntimeMonitorTrapCount=wlssnmpAgentRuntimeMonitorTrapCount, jdbcConnectionPoolRuntimeLeakedConnectionCount=jdbcConnectionPoolRuntimeLeakedConnectionCount, shutdownClassTable=shutdownClassTable, wlssnmpAgentRuntimeUDPListenPort=wlssnmpAgentRuntimeUDPListenPort, sslJSSEEnabled=sslJSSEEnabled, singleSignOnServicesContactPersonSurName=singleSignOnServicesContactPersonSurName, workManagerShutdownTriggerEntry=workManagerShutdownTriggerEntry, owsmSecurityPolicyRuntimeAvailablePolicies=owsmSecurityPolicyRuntimeAvailablePolicies, singletonServiceEntry=singletonServiceEntry, wseeOperationRuntimeResponseTimeTotal=wseeOperationRuntimeResponseTimeTotal, joltConnectionRuntimeTable=joltConnectionRuntimeTable, cacheStoreWritePolicy=cacheStoreWritePolicy, trapMonitorThreshold=trapMonitorThreshold, transactionNameRuntimeTransactionHeuristicsTotalCount=transactionNameRuntimeTransactionHeuristicsTotalCount, kodoDataCacheRuntimeIndex=kodoDataCacheRuntimeIndex, networkAccessPointTimeoutConnectionWithPendingResponses=networkAccessPointTimeoutConnectionWithPendingResponses, defaultFileStoreMinWindowBufferSize=defaultFileStoreMinWindowBufferSize, jobRuntimeLocalExecutionCount=jobRuntimeLocalExecutionCount, joltConnectionPoolRuntimeParent=joltConnectionPoolRuntimeParent, serverSecurityRuntimeName=serverSecurityRuntimeName, appClientComponentRuntimeType=appClientComponentRuntimeType, customResourceModuleType=customResourceModuleType, jMSDurableSubscriberRuntimeMessagesHighCount=jMSDurableSubscriberRuntimeMessagesHighCount, jvmRuntimeJavaVMVendor=jvmRuntimeJavaVMVendor, wldfImageRuntimeIndex=wldfImageRuntimeIndex, adminConsoleSessionTimeout=adminConsoleSessionTimeout, xmlParserSelectRegistryRootElementTag=xmlParserSelectRegistryRootElementTag, wldfInstrumentationRuntimeExecutionJoinpointCount=wldfInstrumentationRuntimeExecutionJoinpointCount, webAppComponentRuntimeSessionCookiePath=webAppComponentRuntimeSessionCookiePath, safRemoteEndpointRuntimeUptimeHigh=safRemoteEndpointRuntimeUptimeHigh, serverTable=serverTable, webServerLogFileName=webServerLogFileName, serverMigrationRuntimeName=serverMigrationRuntimeName, serviceMigrationRuntimeTable=serviceMigrationRuntimeTable, comIndex=comIndex, webServicePersistenceType=webServicePersistenceType, fairShareRequestClassIndex=fairShareRequestClassIndex, pageFlowActionRuntimeType=pageFlowActionRuntimeType, wseeOperationRuntimeTable=wseeOperationRuntimeTable, jrockitRuntimeLastGCStart=jrockitRuntimeLastGCStart, joltConnectionPoolRuntimeIndex=joltConnectionPoolRuntimeIndex, serverLifeCycleTaskRuntimeServerName=serverLifeCycleTaskRuntimeServerName, jmsDistributedDestinationMemberParent=jmsDistributedDestinationMemberParent, ejbTransactionRuntimeTransactionsTimedOutTotalCount=ejbTransactionRuntimeTransactionsTimedOutTotalCount, ejbPoolRuntimeIndex=ejbPoolRuntimeIndex, unicastMessagingRuntimeEntry=unicastMessagingRuntimeEntry, wseeOperationRuntimeDispatchTimeTotal=wseeOperationRuntimeDispatchTimeTotal, wseeOperationRuntimeObjectName=wseeOperationRuntimeObjectName, clusterFrontendHTTPPort=clusterFrontendHTTPPort, owsmSecurityPolicyRuntimeTable=owsmSecurityPolicyRuntimeTable, cacheAsyncListenersTable=cacheAsyncListenersTable, jtaMaxResourceUnavailableMillis=jtaMaxResourceUnavailableMillis, capacityCount=capacityCount, coherenceClusterSystemResourceDescriptorFileName=coherenceClusterSystemResourceDescriptorFileName, statefulEJBRuntimeObjectName=statefulEJBRuntimeObjectName, wtctBridgeGlobalRetryDelay=wtctBridgeGlobalRetryDelay, wlssnmpTrapDestinationType=wlssnmpTrapDestinationType, transactionResourceRuntimeObjectName=transactionResourceRuntimeObjectName, joltConnectionPoolRuntimePoolName=joltConnectionPoolRuntimePoolName, xmlEntityCacheIndex=xmlEntityCacheIndex, serverDebugDebugEventManager=serverDebugDebugEventManager, deploymentProgressObjectIndex=deploymentProgressObjectIndex, serverGatheredWritesEnabled=serverGatheredWritesEnabled, webserviceSecurityTokenTable=webserviceSecurityTokenTable, wlssnmpAgentRuntimeName=wlssnmpAgentRuntimeName, webServerRuntimeDefaultWebServer=webServerRuntimeDefaultWebServer, wseeOperationRuntimeLastError=wseeOperationRuntimeLastError, wseeV2RuntimeTotalFaults=wseeV2RuntimeTotalFaults, wtcResourcesEntry=wtcResourcesEntry, serverDGCIdlePeriodsUntilTimeout=serverDGCIdlePeriodsUntilTimeout, contextCaseIndex=contextCaseIndex, serverDebugDebugXMLEntityCacheDebugLevel=serverDebugDebugXMLEntityCacheDebugLevel, webAppComponentTable=webAppComponentTable, wldfWatchJMXNotificationRuntimeName=wldfWatchJMXNotificationRuntimeName, iiopDefaultMinorVersion=iiopDefaultMinorVersion, wldfDbstoreArchiveRuntimeInsertionCount=wldfDbstoreArchiveRuntimeInsertionCount, networkChannelMaxCOMMessageSize=networkChannelMaxCOMMessageSize, snmpAgentEntry=snmpAgentEntry, serverTransactionLogFilePrefix=serverTransactionLogFilePrefix, messagingBridgeIndex=messagingBridgeIndex, jmsSessionRuntimeEntry=jmsSessionRuntimeEntry, persistentStoreConnectionRuntimeTable=persistentStoreConnectionRuntimeTable, wlssnmpAgentDeploymentCommunityPrefix=wlssnmpAgentDeploymentCommunityPrefix, serverSecurityRuntimeIndex=serverSecurityRuntimeIndex, singletonServiceObjectName=singletonServiceObjectName, executeQueueRuntimeType=executeQueueRuntimeType, webAppComponentRuntimeJSPKeepGenerated=webAppComponentRuntimeJSPKeepGenerated, connectorConnectionRuntimeIndex=connectorConnectionRuntimeIndex, jmsServerName=jmsServerName, entityCacheCumulativeRuntimeTotalNumberOfRejections=entityCacheCumulativeRuntimeTotalNumberOfRejections, jmsServerMessagesPagingEnabled=jmsServerMessagesPagingEnabled, pathServiceRuntimeTable=pathServiceRuntimeTable, jMSDurableSubscriberRuntimeClientIDPolicy=jMSDurableSubscriberRuntimeClientIDPolicy, serverSecurityRuntimeEntry=serverSecurityRuntimeEntry, sslAllowUnencryptedNullCipher=sslAllowUnencryptedNullCipher, connectorServiceRuntimeTable=connectorServiceRuntimeTable, startupClassLoadBeforeAppDeployments=startupClassLoadBeforeAppDeployments, connectorConnectionPoolRuntimeLastShrinkTime=connectorConnectionPoolRuntimeLastShrinkTime, federationServicesDestinationSiteEnabled=federationServicesDestinationSiteEnabled, wlecConnectionRuntimeErrorCount=wlecConnectionRuntimeErrorCount, pathServiceTable=pathServiceTable, wlssnmpLogFilterIndex=wlssnmpLogFilterIndex, ejbComponentRuntimeObjectName=ejbComponentRuntimeObjectName, jmsServerPagingDirectory=jmsServerPagingDirectory, clusterRuntimeParent=clusterRuntimeParent, snmpAgentMasterAgentXPort=snmpAgentMasterAgentXPort, wlssnmpStringMonitorPollingInterval=wlssnmpStringMonitorPollingInterval, wlecConnectionPoolRuntimeMaxCapacity=wlecConnectionPoolRuntimeMaxCapacity, jmsRemoteEndpointRuntimeBytesPendingCount=jmsRemoteEndpointRuntimeBytesPendingCount, serviceMigrationDataRuntimeIndex=serviceMigrationDataRuntimeIndex, webServiceResponseBufferingQueueTransactionEnabled=webServiceResponseBufferingQueueTransactionEnabled, webserviceTimestampEntry=webserviceTimestampEntry, kernelMessagingBridgeThreadPoolSize=kernelMessagingBridgeThreadPoolSize, singleSignOnServicesWantArtifactRequestsSigned=singleSignOnServicesWantArtifactRequestsSigned, cacheExpirationObjectName=cacheExpirationObjectName, connectorConnectionRuntimeEISProductVersion=connectorConnectionRuntimeEISProductVersion, webServicePhysicalStoreStoreType=webServicePhysicalStoreStoreType, embeddedLDAPTimeout=embeddedLDAPTimeout, wseeClientOperationRuntimeLastInvocationTime=wseeClientOperationRuntimeLastInvocationTime, clusterRuntimeSecondaryCount=clusterRuntimeSecondaryCount, servletRuntimeExecutionTimeLow=servletRuntimeExecutionTimeLow, serviceMigrationRuntimeName=serviceMigrationRuntimeName, webServerRuntimeWebServerName=webServerRuntimeWebServerName, webServiceLogicalStoreObjectName=webServiceLogicalStoreObjectName, jtaRuntimeTransactionRolledBackTotalCount=jtaRuntimeTransactionRolledBackTotalCount, deploymentProgressObjectOperationType=deploymentProgressObjectOperationType, ejbLockingRuntimeName=ejbLockingRuntimeName, webAppComponentRuntimeJSPCompileCommand=webAppComponentRuntimeJSPCompileCommand, jmsRemoteEndpointRuntimeMessagesThresholdTime=jmsRemoteEndpointRuntimeMessagesThresholdTime, safAgentRuntimeObjectName=safAgentRuntimeObjectName, safAgentRuntimeRemoteEndpointsTotalCount=safAgentRuntimeRemoteEndpointsTotalCount, workManagerRuntimeTable=workManagerRuntimeTable, serverRuntimeSSLListenPort=serverRuntimeSSLListenPort, jtaSecurityInteropMode=jtaSecurityInteropMode, overloadProtectionSharedCapacityForWorkManagers=overloadProtectionSharedCapacityForWorkManagers, configurationPropertyIndex=configurationPropertyIndex, messagingBridgeRuntimeEntry=messagingBridgeRuntimeEntry, safAgentRuntimeConversationsHighCount=safAgentRuntimeConversationsHighCount, jdbcSystemResourceDeploymentOrder=jdbcSystemResourceDeploymentOrder, webAppContainerHttpTraceSupportEnabled=webAppContainerHttpTraceSupportEnabled, webServerClientIpHeader=webServerClientIpHeader, clusterReplicationTimeoutEnabled=clusterReplicationTimeoutEnabled, serverRestartIntervalSeconds=serverRestartIntervalSeconds, kodoQueryCompilationCacheRuntimeEntry=kodoQueryCompilationCacheRuntimeEntry, wtcRemoteTuxDomIndex=wtcRemoteTuxDomIndex, entityCacheCumulativeRuntimeName=entityCacheCumulativeRuntimeName, safAgentRuntimeMessagesThresholdTime=safAgentRuntimeMessagesThresholdTime, coherenceServerNMSocketCreateTimeoutInMillis=coherenceServerNMSocketCreateTimeoutInMillis, ejbContainerJavaCompilerPostClassPath=ejbContainerJavaCompilerPostClassPath, mailSessionObjectName=mailSessionObjectName, entityCacheCurrentStateRuntimeMinEntryMemorySize=entityCacheCurrentStateRuntimeMinEntryMemorySize, jmsDestinationRuntimeInsertionPaused=jmsDestinationRuntimeInsertionPaused, jrockitRuntimeHeapSizeCurrent=jrockitRuntimeHeapSizeCurrent, libraryRuntimeObjectName=libraryRuntimeObjectName, serverStartSecurityPolicyFile=serverStartSecurityPolicyFile, safAgentWindowSize=safAgentWindowSize, jdbcDataSourceRuntimeActiveConnectionsHighCount=jdbcDataSourceRuntimeActiveConnectionsHighCount, serverDebugDebugSelfTuning=serverDebugDebugSelfTuning, wtcResourcesViewTbl16Classes=wtcResourcesViewTbl16Classes, xmlParserSelectRegistryParent=xmlParserSelectRegistryParent, webserviceSecurityCompatibilityOrderingPreference=webserviceSecurityCompatibilityOrderingPreference, webAppComponentRuntimeModuleId=webAppComponentRuntimeModuleId, wldfWlstoreArchiveRuntimeInsertionCount=wldfWlstoreArchiveRuntimeInsertionCount, serverDebugDebugSecurityCertPath=serverDebugDebugSecurityCertPath)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", wldfSystemResourceIndex=wldfSystemResourceIndex, safAgentRuntimeIndex=safAgentRuntimeIndex, webServiceMessagingQueue=webServiceMessagingQueue, transactionNameRuntimeTransactionLLRCommittedTotalCount=transactionNameRuntimeTransactionLLRCommittedTotalCount, transactionNameRuntimeTransactionTotalCount=transactionNameRuntimeTransactionTotalCount, webServerRuntimeTable=webServerRuntimeTable, jtaParallelXAEnabled=jtaParallelXAEnabled, wseeOperationRuntimePolicySubjectType=wseeOperationRuntimePolicySubjectType, ejbContainerParent=ejbContainerParent, wlssnmpAgentDeploymentEnabled=wlssnmpAgentDeploymentEnabled, webAppContainerShowArchivedRealPathEnabled=webAppContainerShowArchivedRealPathEnabled, singleSignOnServicesIdentityProviderPreferredBinding=singleSignOnServicesIdentityProviderPreferredBinding, jmsRemoteEndpointRuntimeMessagesReceivedCount=jmsRemoteEndpointRuntimeMessagesReceivedCount, cacheStoreType=cacheStoreType, serverDebugDebugJMSDurableSubscribers=serverDebugDebugJMSDurableSubscribers, jmsDestCommonParent=jmsDestCommonParent, ejbTransactionRuntimeType=ejbTransactionRuntimeType, serverDebugDebugJTALifecycle=serverDebugDebugJTALifecycle, safAgentRuntimeBytesThresholdTime=safAgentRuntimeBytesThresholdTime, serverDebugDebugSecuritySAMLLib=serverDebugDebugSecuritySAMLLib, webserviceCredentialProviderClassName=webserviceCredentialProviderClassName, jmxEditMBeanServerEnabled=jmxEditMBeanServerEnabled, PYSNMP_MODULE_ID=wls, serverMigrationRuntimeEntry=serverMigrationRuntimeEntry, wldfWlstoreArchiveRuntimeRecordSeekCount=wldfWlstoreArchiveRuntimeRecordSeekCount, ejbComponentRuntimeName=ejbComponentRuntimeName, serverDebugDebugAsyncQueue=serverDebugDebugAsyncQueue, webServerLogName=webServerLogName, webServiceBufferingEntry=webServiceBufferingEntry, webAppComponentRuntimeJSPPageCheckSecs=webAppComponentRuntimeJSPPageCheckSecs, joltConnectionRuntimeAddress=joltConnectionRuntimeAddress, wtcLocalTuxDomNWAddr=wtcLocalTuxDomNWAddr, wseeRuntimeName=wseeRuntimeName, serverDebugDebugRAWork=serverDebugDebugRAWork, wldfHarvesterRuntimeMinimumSamplingTime=wldfHarvesterRuntimeMinimumSamplingTime, messageDrivenEJBRuntimeJmsClientID=messageDrivenEJBRuntimeJmsClientID, statelessEJBRuntimeEJBName=statelessEJBRuntimeEJBName, kodoDataCacheRuntimeCacheHitCount=kodoDataCacheRuntimeCacheHitCount, messagingBridgeQOSDegradationAllowed=messagingBridgeQOSDegradationAllowed, jdbcConnectionPoolRuntimeWaitingForConnectionHighCount=jdbcConnectionPoolRuntimeWaitingForConnectionHighCount, entityCacheCumulativeRuntimeTotalPersistentCurrentEntries=entityCacheCumulativeRuntimeTotalPersistentCurrentEntries, safAgentRuntimePausedForReceiving=safAgentRuntimePausedForReceiving, serverNMSocketCreateTimeoutInMillis=serverNMSocketCreateTimeoutInMillis, minThreadsConstraintCount=minThreadsConstraintCount, wldfDataRetirementTaskRuntimeRetiredRecordsCount=wldfDataRetirementTaskRuntimeRetiredRecordsCount, connectorComponentRuntimeEISType=connectorComponentRuntimeEISType, jdbcSystemResourceCompatibilityName=jdbcSystemResourceCompatibilityName, webServiceRequestBufferingQueueEntry=webServiceRequestBufferingQueueEntry, wlssnmpAgentRuntimeObjectName=wlssnmpAgentRuntimeObjectName, fileStoreName=fileStoreName, appClientComponentRuntimeDeploymentState=appClientComponentRuntimeDeploymentState, startupClassLoadBeforeAppActivation=startupClassLoadBeforeAppActivation, webAppContainerAuthCookieEnabled=webAppContainerAuthCookieEnabled, serverJDBCLoggingEnabled=serverJDBCLoggingEnabled, sslObjectName=sslObjectName, serverDebugDebugFailOver=serverDebugDebugFailOver, jmsServerRuntimeDestinationsCurrentCount=jmsServerRuntimeDestinationsCurrentCount, wseeOperationRuntimeLastResponseTime=wseeOperationRuntimeLastResponseTime, remoteSAFContextProtocol=remoteSAFContextProtocol, persistentStoreRuntimeObjectCount=persistentStoreRuntimeObjectCount, webServerDefaultWebAppContextRoot=webServerDefaultWebAppContextRoot, xmlEntityCacheCacheDiskSize=xmlEntityCacheCacheDiskSize, wlssnmpLogFilterSeverityLevel=wlssnmpLogFilterSeverityLevel, webAppContainerName=webAppContainerName, jdbcDriverRuntimeType=jdbcDriverRuntimeType, serverRuntimeAdminServer=serverRuntimeAdminServer, nodeManagerShellCommand=nodeManagerShellCommand, consoleRuntimeType=consoleRuntimeType, coherenceServerUnicastListenAddress=coherenceServerUnicastListenAddress, kodoQueryCompilationCacheRuntimeTable=kodoQueryCompilationCacheRuntimeTable, wseePortRuntimeObjectName=wseePortRuntimeObjectName, servletRuntimeURL=servletRuntimeURL, connectorConnectionRuntimeIdle=connectorConnectionRuntimeIdle, safAgentRuntimeMessagesHighCount=safAgentRuntimeMessagesHighCount, jmsDestCommonEntry=jmsDestCommonEntry, entityCacheCumulativeRuntimeMostRecentMemoryPurge=entityCacheCumulativeRuntimeMostRecentMemoryPurge, wldfServerDiagnosticObjectName=wldfServerDiagnosticObjectName, manReplicationRuntimeSecondaryServerName=manReplicationRuntimeSecondaryServerName, serverDebugDebugJDBCInternal=serverDebugDebugJDBCInternal, jMSDurableSubscriberRuntimeLastMessagesReceivedTime=jMSDurableSubscriberRuntimeLastMessagesReceivedTime, springTransactionTemplateRuntimeExecuteFailedCount=springTransactionTemplateRuntimeExecuteFailedCount, webServiceLogicalStoreTable=webServiceLogicalStoreTable, nodeManagerUserName=nodeManagerUserName, wlssnmpAgentRuntimeFailedAuthorizationCount=wlssnmpAgentRuntimeFailedAuthorizationCount, timerRuntimeIndex=timerRuntimeIndex, sslLoginTimeoutMillis=sslLoginTimeoutMillis, wtctBridgeRedirectObjectName=wtctBridgeRedirectObjectName, customResourceTable=customResourceTable, wseeRuntimeServiceName=wseeRuntimeServiceName, wlssnmpCounterMonitorPollingInterval=wlssnmpCounterMonitorPollingInterval, wtcLocalTuxDomConnPrincipalName=wtcLocalTuxDomConnPrincipalName, webserviceSecurityTokenIndex=webserviceSecurityTokenIndex, jmsPooledConnectionRuntimeNumLeaked=jmsPooledConnectionRuntimeNumLeaked, sslTwoWaySSLEnabled=sslTwoWaySSLEnabled, jmsInteropModuleIndex=jmsInteropModuleIndex, appRuntimeStateRuntimeName=appRuntimeStateRuntimeName, messageDrivenControlEJBRuntimeType=messageDrivenControlEJBRuntimeType, coherenceClusterRuntimeObjectName=coherenceClusterRuntimeObjectName, jmsServerRuntimePagingAllocatedIoBufferBytes=jmsServerRuntimePagingAllocatedIoBufferBytes, wlssnmpAgentDeploymentMasterAgentXPort=wlssnmpAgentDeploymentMasterAgentXPort, serverDebugDebugSecuritySSLEaten=serverDebugDebugSecuritySSLEaten, serverDebugDebugSAFReceivingAgent=serverDebugDebugSAFReceivingAgent, jdbcOracleDataSourceRuntimePrepStmtCacheAccessCount=jdbcOracleDataSourceRuntimePrepStmtCacheAccessCount, iiopUseSerialFormatVersion2=iiopUseSerialFormatVersion2, wtctBridgeGlobalTransactional=wtctBridgeGlobalTransactional, serviceMigrationRuntimeType=serviceMigrationRuntimeType, springViewRuntimeEntry=springViewRuntimeEntry, jvmRuntimeUptime=jvmRuntimeUptime, singletonServiceAppScopedMillisToSleepBetweenAttempts=singletonServiceAppScopedMillisToSleepBetweenAttempts, serverChannelRuntimeMessagesSentCount=serverChannelRuntimeMessagesSentCount, securityType=securityType, wseeClientOperationRuntimeObjectName=wseeClientOperationRuntimeObjectName, jmsSessionPoolRuntimeConnectionConsumersHighCount=jmsSessionPoolRuntimeConnectionConsumersHighCount, wseeClientRuntimeObjectName=wseeClientRuntimeObjectName, jmsServerObjectName=jmsServerObjectName, logFilterFilterExpression=logFilterFilterExpression, kodoQueryCacheRuntimeType=kodoQueryCacheRuntimeType, cacheLoaderIndex=cacheLoaderIndex, wseePolicyRuntimeTable=wseePolicyRuntimeTable, serverListenThreadStartDelaySecs=serverListenThreadStartDelaySecs, serverDebugDebugMessagingBridgeRuntime=serverDebugDebugMessagingBridgeRuntime, serverDebugDebugRADeployment=serverDebugDebugRADeployment, connectorConnectionPoolRuntimeNumUnavailableCurrentCount=connectorConnectionPoolRuntimeNumUnavailableCurrentCount, wldfWatchNotificationRuntimeCurrentActiveAlarmsCount=wldfWatchNotificationRuntimeCurrentActiveAlarmsCount, serverDebugApplicationContainer=serverDebugApplicationContainer, wtcLocalTuxDomParent=wtcLocalTuxDomParent, entityCacheCurrentStateRuntimeDiskUsage=entityCacheCurrentStateRuntimeDiskUsage, connectorComponentRuntimeJndiName=connectorComponentRuntimeJndiName, serverDebugDebugWTCTDomPdu=serverDebugDebugWTCTDomPdu, deploymentConfigurationRestageOnlyOnRedeploy=deploymentConfigurationRestageOnlyOnRedeploy, wldfServerDiagnosticDataRetirementEnabled=wldfServerDiagnosticDataRetirementEnabled, serverRuntimeDefaultURL=serverRuntimeDefaultURL, wlssnmpGaugeMonitorName=wlssnmpGaugeMonitorName, serverDebugClassLoader=serverDebugClassLoader, jdbcOracleDataSourceInstanceRuntimeName=jdbcOracleDataSourceInstanceRuntimeName, webServiceReliabilityNonBufferedSource=webServiceReliabilityNonBufferedSource, clusterWANSessionPersistenceTableName=clusterWANSessionPersistenceTableName, wldfServerDiagnosticEventPersistenceInterval=wldfServerDiagnosticEventPersistenceInterval, threadPoolRuntimeSuspended=threadPoolRuntimeSuspended, connectorConnectionRuntimeLastUsageString=connectorConnectionRuntimeLastUsageString, logRotationType=logRotationType, jdbcOracleDataSourceRuntimePrepStmtCacheDeleteCount=jdbcOracleDataSourceRuntimePrepStmtCacheDeleteCount, wlssnmpAgentRuntimeStringMonitorTrapCount=wlssnmpAgentRuntimeStringMonitorTrapCount, webServerUseHighestCompatibleHTTPVersion=webServerUseHighestCompatibleHTTPVersion, coherenceClusterSystemResourceIndex=coherenceClusterSystemResourceIndex, jrockitRuntimeHeapFreePercent=jrockitRuntimeHeapFreePercent, networkAccessPointProxyPort=networkAccessPointProxyPort, coherenceClusterRuntimeLicenseMode=coherenceClusterRuntimeLicenseMode, serverDebugDebugJTAGateway=serverDebugDebugJTAGateway, jdbcOracleDataSourceRuntimeFailedRCLBBasedBorrowCount=jdbcOracleDataSourceRuntimeFailedRCLBBasedBorrowCount, jPATable=jPATable, jdbcStoreDeploymentOrder=jdbcStoreDeploymentOrder, webPubSubRuntimeType=webPubSubRuntimeType, jdbcConnectionPoolRuntimeName=jdbcConnectionPoolRuntimeName, serverDebugDebugEjbPooling=serverDebugDebugEjbPooling, wldfServerDiagnosticDiagnosticStoreDir=wldfServerDiagnosticDiagnosticStoreDir, trapALSBAlertTrapType=trapALSBAlertTrapType, webServiceResponseBufferingQueueEnabled=webServiceResponseBufferingQueueEnabled, ejbPoolRuntimePooledBeansCurrentCount=ejbPoolRuntimePooledBeansCurrentCount, webAppComponentRuntimeSessionCookieDomain=webAppComponentRuntimeSessionCookieDomain, virtualHostVirtualHostNames=virtualHostVirtualHostNames, trapWatchRule=trapWatchRule, ejbContainerForceGeneration=ejbContainerForceGeneration, webAppComponentSingleThreadedServletPoolSize=webAppComponentSingleThreadedServletPoolSize, executeQueueQueueLengthThresholdPercent=executeQueueQueueLengthThresholdPercent, xmlParserSelectRegistrySystemId=xmlParserSelectRegistrySystemId, pathServiceRuntimeObjectName=pathServiceRuntimeObjectName, deploymentProgressObjectApplicationName=deploymentProgressObjectApplicationName, singleSignOnServicesServiceProviderArtifactBindingEnabled=singleSignOnServicesServiceProviderArtifactBindingEnabled, wtcRuntimeObjectName=wtcRuntimeObjectName, serverCustomIdentityKeyStoreType=serverCustomIdentityKeyStoreType, serverMigrationRuntimeClusterMasterName=serverMigrationRuntimeClusterMasterName, jmsDestCommonBytesThresholdLow=jmsDestCommonBytesThresholdLow, requestClassRuntimeName=requestClassRuntimeName, webServerLogEntry=webServerLogEntry, springViewRuntimeObjectName=springViewRuntimeObjectName, wanreplicationRuntimeNumberOfSessionsRetrievedFromTheDatabase=wanreplicationRuntimeNumberOfSessionsRetrievedFromTheDatabase, executeQueueRuntimeIndex=executeQueueRuntimeIndex, wtcRemoteTuxDomObjectName=wtcRemoteTuxDomObjectName, webAppContainerP3PHeaderValue=webAppContainerP3PHeaderValue, wseePolicySubjectManagerRuntimeName=wseePolicySubjectManagerRuntimeName, serverDebugObjectName=serverDebugObjectName, wtctBridgeGlobalTable=wtctBridgeGlobalTable, xmlParserSelectRegistryParserClassName=xmlParserSelectRegistryParserClassName, domainLibraryInstallDir=domainLibraryInstallDir, wseePortRuntimePortName=wseePortRuntimePortName, serverDebugDebugJMSConfig=serverDebugDebugJMSConfig, servletRuntimeName=servletRuntimeName, serverRestartMax=serverRestartMax, serverDebugDebugXMLRegistryIncludeName=serverDebugDebugXMLRegistryIncludeName, jdbcDriverRuntimeEntry=jdbcDriverRuntimeEntry, configurationPropertyValue=configurationPropertyValue, serverDebugDebugDiagnosticInstrumentationWeaving=serverDebugDebugDiagnosticInstrumentationWeaving, wtcLocalTuxDomObjectName=wtcLocalTuxDomObjectName, jdbcConnectionPoolRuntimeMaxCapacity=jdbcConnectionPoolRuntimeMaxCapacity, wsrmRemoteEndpointRuntimeBytesReceivedCount=wsrmRemoteEndpointRuntimeBytesReceivedCount, cacheTransactionIsolationLevel=cacheTransactionIsolationLevel, wldfDataRetirementTaskRuntimeObjectName=wldfDataRetirementTaskRuntimeObjectName, foreignJNDIProviderInitialContextFactory=foreignJNDIProviderInitialContextFactory, persistentStoreConnectionRuntimeIndex=persistentStoreConnectionRuntimeIndex, serverDebugDebugMaskCriterias=serverDebugDebugMaskCriterias, wtcLocalTuxDomKeepAlive=wtcLocalTuxDomKeepAlive, sslCiphersuites=sslCiphersuites, jmsServerRuntimeMessagesThresholdTime=jmsServerRuntimeMessagesThresholdTime, serverRuntimeListenPort=serverRuntimeListenPort, consoleRuntimeHomePageURL=consoleRuntimeHomePageURL, springBeanDefinitionRuntimeAutowireCandidate=springBeanDefinitionRuntimeAutowireCandidate, contextRequestClassObjectName=contextRequestClassObjectName, kernelIndex=kernelIndex, entityCacheCumulativeRuntimeAvgEntrySizeMemoryPurged=entityCacheCumulativeRuntimeAvgEntrySizeMemoryPurged, jmsSAFMessageLogFileRotationTime=jmsSAFMessageLogFileRotationTime, serverSocketReaders=serverSocketReaders, taskRuntimeIndex=taskRuntimeIndex, cacheLoaderTable=cacheLoaderTable, safRemoteEndpointRuntimeDowntimeHigh=safRemoteEndpointRuntimeDowntimeHigh, deploymentConfigurationIndex=deploymentConfigurationIndex, serverDebugDebugHttp=serverDebugDebugHttp, jobRuntimeObjectName=jobRuntimeObjectName, connectorConnectionPoolRuntimeAverageActiveUsage=connectorConnectionPoolRuntimeAverageActiveUsage, wtcExportEJBName=wtcExportEJBName, wtcPasswordEntry=wtcPasswordEntry, safAgentRuntimeParent=safAgentRuntimeParent, realmRuntimeIndex=realmRuntimeIndex, queryCacheRuntimeCacheMissByDependentQueryMissCount=queryCacheRuntimeCacheMissByDependentQueryMissCount, overloadProtectionIndex=overloadProtectionIndex, webServiceReliabilityNonBufferedDestination=webServiceReliabilityNonBufferedDestination, startupClassFailureIsFatal=startupClassFailureIsFatal, wseeWsrmRuntimeTable=wseeWsrmRuntimeTable, wsrmRemoteEndpointRuntimeIndex=wsrmRemoteEndpointRuntimeIndex, webServerKeepAliveEnabled=webServerKeepAliveEnabled, wlssnmpAgentDeploymentEntry=wlssnmpAgentDeploymentEntry, customResourceDeploymentPrincipalName=customResourceDeploymentPrincipalName, pageFlowActionRuntimeHandledExceptionCount=pageFlowActionRuntimeHandledExceptionCount, pathServiceRuntimeType=pathServiceRuntimeType, coherenceServerLifeCycleTaskRuntimeDescription=coherenceServerLifeCycleTaskRuntimeDescription, embeddedLDAPCacheTTL=embeddedLDAPCacheTTL, threadPoolRuntimeType=threadPoolRuntimeType, connectorConnectionPoolRuntimeConnectionsMatchedTotalCount=connectorConnectionPoolRuntimeConnectionsMatchedTotalCount, ejbTimerRuntimeType=ejbTimerRuntimeType, jmsServerType=jmsServerType, kernelMaxOpenSockCount=kernelMaxOpenSockCount, safAgentPagingDirectory=safAgentPagingDirectory, kernelTable=kernelTable, wlssnmpTrapDestinationPort=wlssnmpTrapDestinationPort, deploymentProgressObjectObjectName=deploymentProgressObjectObjectName, deploymentProgressObjectType=deploymentProgressObjectType, ejbPoolRuntimeBeansInUseCurrentCount=ejbPoolRuntimeBeansInUseCurrentCount, kernelConnectTimeout=kernelConnectTimeout, messagingBridgeBatchSize=messagingBridgeBatchSize, entityEJBRuntimeObjectName=entityEJBRuntimeObjectName, coherenceServerLifeCycleRuntimeName=coherenceServerLifeCycleRuntimeName, jdbcDataSourceRuntimeVersionJDBCDriver=jdbcDataSourceRuntimeVersionJDBCDriver, webAppComponentRuntimeSessionCookieComment=webAppComponentRuntimeSessionCookieComment, jmsServerHostingTemporaryDestinations=jmsServerHostingTemporaryDestinations)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", wlssnmpAgentDeploymentAuthenticationProtocol=wlssnmpAgentDeploymentAuthenticationProtocol, webServiceTable=webServiceTable, wlssnmpProxyEntry=wlssnmpProxyEntry, appRuntimeStateRuntimeIndex=appRuntimeStateRuntimeIndex, serverDebugDebugServerStartStatistics=serverDebugDebugServerStartStatistics, safRemoteEndpointRuntimeLastTimeConnected=safRemoteEndpointRuntimeLastTimeConnected, wtcRemoteTuxDomTpUsrFile=wtcRemoteTuxDomTpUsrFile, jtaRuntimeName=jtaRuntimeName, jmsInteropModuleName=jmsInteropModuleName, wlssnmpStringMonitorEntry=wlssnmpStringMonitorEntry, iiopEntry=iiopEntry, serverOutboundPrivateKeyEnabled=serverOutboundPrivateKeyEnabled, jdbcOracleDataSourceRuntimePrepStmtCacheHitCount=jdbcOracleDataSourceRuntimePrepStmtCacheHitCount, webAppComponentRuntimeApplicationIdentifier=webAppComponentRuntimeApplicationIdentifier, wlssnmpTrapDestinationSecurityLevel=wlssnmpTrapDestinationSecurityLevel, appDeploymentRuntimeModules=appDeploymentRuntimeModules, nodeManagerNodeManagerHome=nodeManagerNodeManagerHome, webServerWAPEnabled=webServerWAPEnabled, connectorComponentRuntimeDescriptions=connectorComponentRuntimeDescriptions, safAgentRuntimeName=safAgentRuntimeName, serverChannelRuntimeIndex=serverChannelRuntimeIndex, domainIndex=domainIndex, jmsDestinationRuntimeConsumptionPausedState=jmsDestinationRuntimeConsumptionPausedState, defaultFileStoreMaxWindowBufferSize=defaultFileStoreMaxWindowBufferSize, wldfRuntimeEntry=wldfRuntimeEntry, queryCacheRuntimeName=queryCacheRuntimeName, wtctBridgeRedirectIndex=wtctBridgeRedirectIndex, wldfSystemResourceCompatibilityName=wldfSystemResourceCompatibilityName, entityCacheCurrentStateRuntimeMaxEntryTimeout=entityCacheCurrentStateRuntimeMaxEntryTimeout, serverDebugDebugSecurityJACCNonPolicy=serverDebugDebugSecurityJACCNonPolicy, jtaCheckpointIntervalSeconds=jtaCheckpointIntervalSeconds, safConversationRuntimeName=safConversationRuntimeName, cacheObjectName=cacheObjectName, serverDebugTable=serverDebugTable, jmsConnectionConsumerParent=jmsConnectionConsumerParent, coherenceServerLifeCycleTaskRuntimeName=coherenceServerLifeCycleTaskRuntimeName, wldfWatchJMXNotificationRuntimeIndex=wldfWatchJMXNotificationRuntimeIndex, persistentStoreRuntimeTable=persistentStoreRuntimeTable, springViewRuntimeIndex=springViewRuntimeIndex, jdbcDataSourceFactoryEntry=jdbcDataSourceFactoryEntry, jmsDestinationRuntimeInsertionPausedState=jmsDestinationRuntimeInsertionPausedState, serverChannelRuntimeTable=serverChannelRuntimeTable, jmsServerRuntimeMessagesPageableCurrentCount=jmsServerRuntimeMessagesPageableCurrentCount, serverName=serverName, connectorConnectionPoolRuntimeConnectionsCreatedTotalCount=connectorConnectionPoolRuntimeConnectionsCreatedTotalCount, connectorConnectionPoolRuntimeMaxCapacity=connectorConnectionPoolRuntimeMaxCapacity, wtctBridgeRedirectTargetQspace=wtctBridgeRedirectTargetQspace, jmsPooledConnectionRuntimeParent=jmsPooledConnectionRuntimeParent, wlecConnectionPoolRuntimeObjectName=wlecConnectionPoolRuntimeObjectName, xmlEntityCacheParent=xmlEntityCacheParent, foreignJNDILinkType=foreignJNDILinkType, singleSignOnServicesDefaultURL=singleSignOnServicesDefaultURL, unixMachineTable=unixMachineTable, springApplicationContextRuntimeAverageGetBeansOfTypeTime=springApplicationContextRuntimeAverageGetBeansOfTypeTime, clusterIdlePeriodsUntilTimeout=clusterIdlePeriodsUntilTimeout, wseeV2RuntimeServiceName=wseeV2RuntimeServiceName, onsDaemonRuntimeStatus=onsDaemonRuntimeStatus, safRemoteEndpointRuntimeType=safRemoteEndpointRuntimeType, overloadProtectionName=overloadProtectionName, kernelName=kernelName, webServerSingleSignonDisabled=webServerSingleSignonDisabled, jmsMessageLogFileIndex=jmsMessageLogFileIndex, xmlRegistrySAXParserFactory=xmlRegistrySAXParserFactory, springApplicationContextRuntimeAveragePrototypeBeanCreationTime=springApplicationContextRuntimeAveragePrototypeBeanCreationTime, serverDebugDebugDiagnosticAccessor=serverDebugDebugDiagnosticAccessor, springApplicationContextRuntimeDisplayName=springApplicationContextRuntimeDisplayName, singleSignOnServicesPublishedSiteURL=singleSignOnServicesPublishedSiteURL, wtcImportType=wtcImportType, wldfDataRetirementByAgeObjectName=wldfDataRetirementByAgeObjectName, kernelAdministrationProtocol=kernelAdministrationProtocol, wseeOperationRuntimeDispatchTimeAverage=wseeOperationRuntimeDispatchTimeAverage, webServicePersistenceIndex=webServicePersistenceIndex, jmsRuntimeJMSServersTotalCount=jmsRuntimeJMSServersTotalCount, wtcLocalTuxDomIndex=wtcLocalTuxDomIndex, jdbcOracleDataSourceInstanceRuntimeType=jdbcOracleDataSourceInstanceRuntimeType, federationServicesType=federationServicesType, jmsRemoteEndpointRuntimeBytesHighCount=jmsRemoteEndpointRuntimeBytesHighCount, webAppContainerServletReloadCheckSecs=webAppContainerServletReloadCheckSecs, jmsServerRuntimeConsumptionPausedState=jmsServerRuntimeConsumptionPausedState, serverDebugDebugSAFSendingAgent=serverDebugDebugSAFSendingAgent, contextCaseEntry=contextCaseEntry, serverDebugDebugRASecurityCtx=serverDebugDebugRASecurityCtx, channelRuntimeTable=channelRuntimeTable, connectorConnectionPoolRuntimeConnectionsDestroyedByErrorTotalCt=connectorConnectionPoolRuntimeConnectionsDestroyedByErrorTotalCt, domainRuntimeEntry=domainRuntimeEntry, snmpAgentInformRetryInterval=snmpAgentInformRetryInterval, webAppComponentRuntimeSessionMonitoringEnabled=webAppComponentRuntimeSessionMonitoringEnabled, wsrmRemoteEndpointRuntimeURL=wsrmRemoteEndpointRuntimeURL, jmsRuntimeConnectionsCurrentCount=jmsRuntimeConnectionsCurrentCount, fileStoreMinWindowBufferSize=fileStoreMinWindowBufferSize, serverDebugDebugJTAResourceHealth=serverDebugDebugJTAResourceHealth, jdbcDataSourceRuntimeHighestNumUnavailable=jdbcDataSourceRuntimeHighestNumUnavailable, jdbcDataSourceRuntimeDriverName=jdbcDataSourceRuntimeDriverName, jvmRuntimeThreadStackDump=jvmRuntimeThreadStackDump, domainAdministrationPort=domainAdministrationPort, transactionNameRuntimeObjectName=transactionNameRuntimeObjectName, cacheLoaderType=cacheLoaderType, jdbcOracleDataSourceInstanceRuntimeCurrentWeight=jdbcOracleDataSourceInstanceRuntimeCurrentWeight, jdbcOracleDataSourceInstanceRuntimeNumUnavailable=jdbcOracleDataSourceInstanceRuntimeNumUnavailable, xmlEntityCacheTable=xmlEntityCacheTable, jrockitRuntimeTotalPhysicalMemory=jrockitRuntimeTotalPhysicalMemory, connectorConnectionPoolRuntimeType=connectorConnectionPoolRuntimeType, jrockitRuntimeOSName=jrockitRuntimeOSName, springRuntimeIndex=springRuntimeIndex, jmsServerRuntimePagingPhysicalWriteCount=jmsServerRuntimePagingPhysicalWriteCount, jmsInteropModuleDeploymentOrder=jmsInteropModuleDeploymentOrder, jdbcDataSourceTaskRuntimeType=jdbcDataSourceTaskRuntimeType, jdbcDataSourceFactoryTable=jdbcDataSourceFactoryTable, jmsRemoteEndpointRuntimeBytesThresholdTime=jmsRemoteEndpointRuntimeBytesThresholdTime, wseeClientPortRuntimePoolFreeCount=wseeClientPortRuntimePoolFreeCount, jrockitRuntimeHeapSizeMax=jrockitRuntimeHeapSizeMax, appDeploymentRuntimeIndex=appDeploymentRuntimeIndex, logRedirectStderrToServerLogEnabled=logRedirectStderrToServerLogEnabled, jmsDestinationStoreEnabled=jmsDestinationStoreEnabled, safRemoteEndpointRuntimeBytesReceivedCount=safRemoteEndpointRuntimeBytesReceivedCount, persistentStoreConnectionRuntimeEntry=persistentStoreConnectionRuntimeEntry, transactionResourceRuntimeTransactionHeuristicCommitTotalCount=transactionResourceRuntimeTransactionHeuristicCommitTotalCount, nodeManagerObjectName=nodeManagerObjectName, webServerName=webServerName, serverDebugDebugJTAAPI=serverDebugDebugJTAAPI, wldfInstrumentationRuntimeType=wldfInstrumentationRuntimeType, bridgeDestinationUserName=bridgeDestinationUserName, serverDebugDebugStoreXAVerbose=serverDebugDebugStoreXAVerbose, deploymentTaskRuntimeObjectName=deploymentTaskRuntimeObjectName, migrationDataRuntimeIndex=migrationDataRuntimeIndex, wldfImageCreationTaskRuntimeDescription=wldfImageCreationTaskRuntimeDescription, wsrmRemoteEndpointRuntimeOperationState=wsrmRemoteEndpointRuntimeOperationState, serverDebugDebugRALocalOut=serverDebugDebugRALocalOut, statelessEJBRuntimeObjectName=statelessEJBRuntimeObjectName, threadPoolRuntimeName=threadPoolRuntimeName, serverRuntimeCurrentMachine=serverRuntimeCurrentMachine, entityCacheCurrentStateRuntimeTotalPersistentCurrentEntries=entityCacheCurrentStateRuntimeTotalPersistentCurrentEntries, joltConnectionPoolRuntimeName=joltConnectionPoolRuntimeName, ejbLockingRuntimeType=ejbLockingRuntimeType, serverMuxerClass=serverMuxerClass, xmlEntitySpecRegistryEntry=xmlEntitySpecRegistryEntry, customResourceDescriptorBeanClass=customResourceDescriptorBeanClass, cacheStoreObjectName=cacheStoreObjectName, jmsProducerRuntimeBytesSentCount=jmsProducerRuntimeBytesSentCount, servletSessionRuntimeObjectName=servletSessionRuntimeObjectName, clusterRuntimeName=clusterRuntimeName, jMSDurableSubscriberRuntimeSubscribersHighCount=jMSDurableSubscriberRuntimeSubscribersHighCount, libraryRuntimeReferenced=libraryRuntimeReferenced, wldfWlstoreArchiveRuntimeTable=wldfWlstoreArchiveRuntimeTable, executeQueueParent=executeQueueParent, wtcRemoteTuxDomCustomAppKeyClassParam=wtcRemoteTuxDomCustomAppKeyClassParam, serverDebugDebugSecurityAdjudicator=serverDebugDebugSecurityAdjudicator, serverDebugDebugDeploy=serverDebugDebugDeploy, jdbcOracleDataSourceRuntimeConnectionDelayTime=jdbcOracleDataSourceRuntimeConnectionDelayTime, webServerLogType=webServerLogType, wldfDbstoreArchiveRuntimeRetiredRecordCount=wldfDbstoreArchiveRuntimeRetiredRecordCount, jrockitRuntimeHeapFreeCurrent=jrockitRuntimeHeapFreeCurrent, entityCacheCumulativeRuntimeDiskPurgesPerHour=entityCacheCumulativeRuntimeDiskPurgesPerHour, networkChannelT3Enabled=networkChannelT3Enabled, manReplicationRuntimePrimaryCount=manReplicationRuntimePrimaryCount, serverStuckThreadTimerInterval=serverStuckThreadTimerInterval, jdbcDataSourceRuntimePrepStmtCacheDeleteCount=jdbcDataSourceRuntimePrepStmtCacheDeleteCount, requestClassRuntimeCompletedCount=requestClassRuntimeCompletedCount, jmsConnectionRuntimeIndex=jmsConnectionRuntimeIndex, virtualHostChunkedTransferDisabled=virtualHostChunkedTransferDisabled, networkAccessPointListenAddress=networkAccessPointListenAddress, wlssnmpAgentDeploymentObjectName=wlssnmpAgentDeploymentObjectName, serverDebugDebugJMSWrappers=serverDebugDebugJMSWrappers, pageFlowActionRuntimeExceptionCount=pageFlowActionRuntimeExceptionCount, cacheEntry=cacheEntry, coherenceClusterSystemResourceCustomClusterConfigurationFileName=coherenceClusterSystemResourceCustomClusterConfigurationFileName, httpProxyIndex=httpProxyIndex, serverDebugDebugEjbSwapping=serverDebugDebugEjbSwapping, wldfHarvesterRuntimeType=wldfHarvesterRuntimeType, connectorConnectionPoolRuntimeCloseCount=connectorConnectionPoolRuntimeCloseCount, clusterFrontendHost=clusterFrontendHost, trapVars=trapVars, rmcFactoryObjectName=rmcFactoryObjectName, pageFlowsRuntimeContextPath=pageFlowsRuntimeContextPath, springTransactionManagerRuntimeIndex=springTransactionManagerRuntimeIndex, jdbcStoreType=jdbcStoreType, wanreplicationRuntimeTable=wanreplicationRuntimeTable, persistentStoreConnectionRuntimeUpdateCount=persistentStoreConnectionRuntimeUpdateCount, jmsMessageLogFileDateFormatPattern=jmsMessageLogFileDateFormatPattern, wseeMcRuntimeIndex=wseeMcRuntimeIndex, jmsDistributedDestinationLoadBalancingPolicy=jmsDistributedDestinationLoadBalancingPolicy, ejbComponentRuntimeType=ejbComponentRuntimeType, deploymentTaskRuntimeId=deploymentTaskRuntimeId, workManagerRuntimePendingRequests=workManagerRuntimePendingRequests, jdbcSystemResourceName=jdbcSystemResourceName, serverDebugDebugEmbeddedLDAPWriteOverrideProps=serverDebugDebugEmbeddedLDAPWriteOverrideProps, clusterRuntimeMulticastMessagesLostCount=clusterRuntimeMulticastMessagesLostCount, serverDebugDebugJpaRuntime=serverDebugDebugJpaRuntime, serverDebugDebugEjbCompilation=serverDebugDebugEjbCompilation, wseeClusterRoutingRuntimeType=wseeClusterRoutingRuntimeType, jmsDestinationRuntimeConsumersHighCount=jmsDestinationRuntimeConsumersHighCount, domainRuntimeIndex=domainRuntimeIndex, statelessEJBRuntimeTable=statelessEJBRuntimeTable, networkAccessPointSDPEnabled=networkAccessPointSDPEnabled, webServiceBufferingType=webServiceBufferingType, serverRuntimeActivationTime=serverRuntimeActivationTime, requestClassRuntimeTable=requestClassRuntimeTable, jdbcStoreLogicalName=jdbcStoreLogicalName, jmsSessionRuntimeTransacted=jmsSessionRuntimeTransacted, springBeanDefinitionRuntimeApplicationContextDisplayName=springBeanDefinitionRuntimeApplicationContextDisplayName, requestClassRuntimeType=requestClassRuntimeType, serverDebugDebugSNMPToolkit=serverDebugDebugSNMPToolkit, jdbcDataSourceRuntimeName=jdbcDataSourceRuntimeName, wldfDataRetirementTaskRuntimeBeginTime=wldfDataRetirementTaskRuntimeBeginTime, wtcExportLocalAccessPoint=wtcExportLocalAccessPoint, wtcRemoteTuxDomAppKey=wtcRemoteTuxDomAppKey, ejbLockingRuntimeObjectName=ejbLockingRuntimeObjectName, persistentStoreRuntimeParent=persistentStoreRuntimeParent, webAppComponentIndexDirectoryEnabled=webAppComponentIndexDirectoryEnabled, onsDaemonRuntimeTable=onsDaemonRuntimeTable, virtualHostEntry=virtualHostEntry, singleSignOnServicesContactPersonCompany=singleSignOnServicesContactPersonCompany, webServiceRequestBufferingQueueEnabled=webServiceRequestBufferingQueueEnabled, singletonServiceAppScopedName=singletonServiceAppScopedName, serverStartBeaHome=serverStartBeaHome, serverStartUsername=serverStartUsername, safRuntimeType=safRuntimeType, jmsConnectionRuntimeClientIDPolicy=jmsConnectionRuntimeClientIDPolicy, jtaAbandonTimeoutSeconds=jtaAbandonTimeoutSeconds, serverRuntimeParent=serverRuntimeParent, bridgeDestinationCommonEntry=bridgeDestinationCommonEntry, maxThreadsConstraintConnectionPoolName=maxThreadsConstraintConnectionPoolName, transactionResourceRuntimeType=transactionResourceRuntimeType, wldfWatchNotificationRuntimeMinimumEventDataWatchEvaluationTime=wldfWatchNotificationRuntimeMinimumEventDataWatchEvaluationTime, clusterMessageOrderingEnabled=clusterMessageOrderingEnabled, connectorConnectionPoolRuntimeManagedConnectionFactoryClassName=connectorConnectionPoolRuntimeManagedConnectionFactoryClassName, springBeanDefinitionRuntimeTable=springBeanDefinitionRuntimeTable, userLockoutManagerRuntimeIndex=userLockoutManagerRuntimeIndex, jdbcOracleDataSourceRuntimeDriverName=jdbcOracleDataSourceRuntimeDriverName, jmsInteropModuleCompatibilityName=jmsInteropModuleCompatibilityName, serverRuntimeAdministrationPort=serverRuntimeAdministrationPort, jdbcConnectionPoolRuntimeWaitSecondsHighCount=jdbcConnectionPoolRuntimeWaitSecondsHighCount, wseePortRuntimeTotalSecurityFaults=wseePortRuntimeTotalSecurityFaults, serverDebugClassloaderWebApp=serverDebugClassloaderWebApp, entityCacheRuntimeAvgPercentPersistent=entityCacheRuntimeAvgPercentPersistent, transactionNameRuntimeType=transactionNameRuntimeType, jmsDestinationMessagesPagingEnabled=jmsDestinationMessagesPagingEnabled, servletSessionRuntimeTimeLastAccessed=servletSessionRuntimeTimeLastAccessed, snmpAgentObjectName=snmpAgentObjectName, joltConnectionServiceRuntimeParent=joltConnectionServiceRuntimeParent, singletonServiceMillisToSleepBetweenAttempts=singletonServiceMillisToSleepBetweenAttempts, jmsRemoteEndpointRuntimeIndex=jmsRemoteEndpointRuntimeIndex, webAppComponentRuntimeJSPVerbose=webAppComponentRuntimeJSPVerbose, cacheExpirationType=cacheExpirationType, webAppContainerPostTimeoutSecs=webAppContainerPostTimeoutSecs, safAgentLoggingEnabled=safAgentLoggingEnabled, xmlEntityCacheName=xmlEntityCacheName, minThreadsConstraintRuntimeEntry=minThreadsConstraintRuntimeEntry, minThreadsConstraintRuntimeType=minThreadsConstraintRuntimeType, contextCaseRequestClassName=contextCaseRequestClassName, networkAccessPointTable=networkAccessPointTable, jmsServerPagingMaxWindowBufferSize=jmsServerPagingMaxWindowBufferSize, jrockitRuntimeVendor=jrockitRuntimeVendor, snmpAgentName=snmpAgentName)
mibBuilder.exportSymbols("BEA-WEBLOGIC-MIB", wtcRemoteTuxDomCustomAppKeyClass=wtcRemoteTuxDomCustomAppKeyClass, interceptionComponentRuntimeEntry=interceptionComponentRuntimeEntry, wlssnmpCounterMonitorIndex=wlssnmpCounterMonitorIndex, iiopTable=iiopTable, serverDebugDebugJpaQuery=serverDebugDebugJpaQuery, serverRuntimeType=serverRuntimeType, serverDebugDebugJTAResourceName=serverDebugDebugJTAResourceName, deploymentProgressObjectEndTime=deploymentProgressObjectEndTime, singletonServiceAppScopedClassName=singletonServiceAppScopedClassName, kodoQueryCacheRuntimeEntry=kodoQueryCacheRuntimeEntry, jmsRuntimeConnectionsTotalCount=jmsRuntimeConnectionsTotalCount, networkChannelT3SEnabled=networkChannelT3SEnabled, comNTAuthHost=comNTAuthHost, jmsDestinationRuntimeState=jmsDestinationRuntimeState, serverDebugDebugMuxerDetail=serverDebugDebugMuxerDetail, pageFlowRuntimeLastResetTime=pageFlowRuntimeLastResetTime, jmsServerPagingIoBufferSize=jmsServerPagingIoBufferSize, jdbcSystemResourceSourcePath=jdbcSystemResourceSourcePath, coherenceServerStartIndex=coherenceServerStartIndex, mailSessionRuntimeObjectName=mailSessionRuntimeObjectName, wldfWlstoreArchiveRuntimeDeletionTime=wldfWlstoreArchiveRuntimeDeletionTime, wtcRemoteTuxDomCredentialPolicy=wtcRemoteTuxDomCredentialPolicy, logLog4jLoggingEnabled=logLog4jLoggingEnabled, unixMachineEntry=unixMachineEntry, webAppContainerType=webAppContainerType, kernelStuckThreadTimerInterval=kernelStuckThreadTimerInterval, kernelCompleteMessageTimeout=kernelCompleteMessageTimeout, wldfHarvesterRuntimeAverageSamplingTime=wldfHarvesterRuntimeAverageSamplingTime, domainLibrarySecurityDDModel=domainLibrarySecurityDDModel, serverDebugDebugJMST3Server=serverDebugDebugJMST3Server, snmpAgentDebugLevel=snmpAgentDebugLevel, connectorComponentRuntimeConfiguration=connectorComponentRuntimeConfiguration, xmlEntitySpecRegistryWhenToCache=xmlEntitySpecRegistryWhenToCache, sslServerCertificateFileName=sslServerCertificateFileName, serverDebugDebugAbbreviation=serverDebugDebugAbbreviation, kodoQueryCacheRuntimeObjectName=kodoQueryCacheRuntimeObjectName, connectorConnectionPoolRuntimeConnectionFactoryClassName=connectorConnectionPoolRuntimeConnectionFactoryClassName, springApplicationContextRuntimeRefreshCount=springApplicationContextRuntimeRefreshCount, virtualHostFrontendHost=virtualHostFrontendHost, clusterMulticastBufferSize=clusterMulticastBufferSize, serverClusterWeight=serverClusterWeight, webServerOverloadResponseCode=webServerOverloadResponseCode, jdbcDataSourceRuntimeWaitingForConnectionTotal=jdbcDataSourceRuntimeWaitingForConnectionTotal, jobRuntimeLastLocalExecutionTime=jobRuntimeLastLocalExecutionTime, deploymentTaskRuntimeNewSource=deploymentTaskRuntimeNewSource, serverListenPort=serverListenPort, serverDebugDebugWebAppModule=serverDebugDebugWebAppModule, safRuntimeEntry=safRuntimeEntry, wseeOperationRuntimeResponseCount=wseeOperationRuntimeResponseCount, jdbcDriverRuntimeObjectName=jdbcDriverRuntimeObjectName, jmsPooledConnectionRuntimeEntry=jmsPooledConnectionRuntimeEntry, wlecConnectionPoolRuntimeTable=wlecConnectionPoolRuntimeTable, wtcResourcesIndex=wtcResourcesIndex, jtaRuntimeTransactionRolledBackTimeoutTotalCount=jtaRuntimeTransactionRolledBackTimeoutTotalCount, serverLifeCycleTaskRuntimeIndex=serverLifeCycleTaskRuntimeIndex, domainLibraryPlanDir=domainLibraryPlanDir, coherenceServerStartName=coherenceServerStartName, onsDaemonRuntimePort=onsDaemonRuntimePort, singleSignOnServicesContactPersonType=singleSignOnServicesContactPersonType, domainLibraryAbsolutePlanPath=domainLibraryAbsolutePlanPath, wsrmRemoteEndpointRuntimeName=wsrmRemoteEndpointRuntimeName, trapALSBAlertServicePath=trapALSBAlertServicePath, wsrmRemoteEndpointRuntimeTable=wsrmRemoteEndpointRuntimeTable, foreignJNDIProviderObjectName=foreignJNDIProviderObjectName, realmRuntimeTable=realmRuntimeTable, springRuntimeTable=springRuntimeTable, wldfSystemResourceDescription=wldfSystemResourceDescription, jdbcOracleDataSourceRuntimePrepStmtCacheAddCount=jdbcOracleDataSourceRuntimePrepStmtCacheAddCount, logLogFileSeverity=logLogFileSeverity, bea=bea, onsDaemonRuntimeIndex=onsDaemonRuntimeIndex, serverServerLifeCycleTimeoutVal=serverServerLifeCycleTimeoutVal, wldfWatchNotificationRuntimeTotalLogEvaluationCycles=wldfWatchNotificationRuntimeTotalLogEvaluationCycles, wseeMcRuntimeName=wseeMcRuntimeName, iiopUseStatefulAuthentication=iiopUseStatefulAuthentication, webPubSubRuntimeObjectName=webPubSubRuntimeObjectName, coherenceServerUnicastListenPort=coherenceServerUnicastListenPort, wldfDbstoreArchiveRuntimeParent=wldfDbstoreArchiveRuntimeParent, jmsRuntimeType=jmsRuntimeType, serverLifeCycleRuntimeTable=serverLifeCycleRuntimeTable, jmsDestinationBytesPagingEnabled=jmsDestinationBytesPagingEnabled, jdbcDataSourceTaskRuntimeObjectName=jdbcDataSourceTaskRuntimeObjectName, joltConnectionPoolDeploymentOrder=joltConnectionPoolDeploymentOrder, wseeHandlerRuntimeObjectName=wseeHandlerRuntimeObjectName, safAgentDefaultTimeToLive=safAgentDefaultTimeToLive, jrockitRuntimeEntry=jrockitRuntimeEntry, wlsWatchNotification=wlsWatchNotification, joltConnectionServiceRuntimeTable=joltConnectionServiceRuntimeTable, serverFailureTriggerEntry=serverFailureTriggerEntry, snmpAgentTable=snmpAgentTable, messagingBridgeRuntimeName=messagingBridgeRuntimeName, domainRuntimeObjectName=domainRuntimeObjectName, snmpAgentMaxInformRetryCount=snmpAgentMaxInformRetryCount, wtcImportResourceName=wtcImportResourceName, fileStoreFileLockingEnabled=fileStoreFileLockingEnabled, serverAutoRestart=serverAutoRestart, serverDebugDebugSecurityCredMap=serverDebugDebugSecurityCredMap, jtaRuntimeTransactionOneResourceOnePhaseCommittedTotalCount=jtaRuntimeTransactionOneResourceOnePhaseCommittedTotalCount, serverDebugName=serverDebugName, cacheAsyncListenersEntry=cacheAsyncListenersEntry, jdbcDataSourceRuntimeObjectName=jdbcDataSourceRuntimeObjectName, jmsVirtualDestinationParent=jmsVirtualDestinationParent, wtcLocalTuxDomMaxEncryptBits=wtcLocalTuxDomMaxEncryptBits, serverDebugDebugTunnelingConnectionTimeout=serverDebugDebugTunnelingConnectionTimeout, connectorConnectionPoolRuntimeLoggingEnabled=connectorConnectionPoolRuntimeLoggingEnabled, kernelIdleIIOPConnectionTimeout=kernelIdleIIOPConnectionTimeout, wtctBridgeGlobalJndiFactory=wtctBridgeGlobalJndiFactory, jmsRemoteEndpointRuntimeBytesReceivedCount=jmsRemoteEndpointRuntimeBytesReceivedCount, jmsBridgeDestinationType=jmsBridgeDestinationType, jmsDestinationRuntimeProductionPaused=jmsDestinationRuntimeProductionPaused, pageFlowRuntimeDestroyCount=pageFlowRuntimeDestroyCount, jdbcDataSourceTaskRuntimeSystemTask=jdbcDataSourceTaskRuntimeSystemTask, kernelDefaultProtocol=kernelDefaultProtocol, jdbcOracleDataSourceRuntimeActiveConnectionsAverageCount=jdbcOracleDataSourceRuntimeActiveConnectionsAverageCount, jdbcOracleDataSourceRuntimeModuleId=jdbcOracleDataSourceRuntimeModuleId, virtualDestinationObjectName=virtualDestinationObjectName, jdbcConnectionPoolRuntimeHighestNumUnavailable=jdbcConnectionPoolRuntimeHighestNumUnavailable, serverDebugDebugFileDistributionServlet=serverDebugDebugFileDistributionServlet, securityConfigurationAnonymousAdminLookupEnabled=securityConfigurationAnonymousAdminLookupEnabled, workManagerObjectName=workManagerObjectName, foreignJNDIProviderUser=foreignJNDIProviderUser, serverCustomTrustKeyStoreFileName=serverCustomTrustKeyStoreFileName, wldfAccessRuntimeAvailableDiagnosticDataAccessorNames=wldfAccessRuntimeAvailableDiagnosticDataAccessorNames, webAppComponentRuntimeJSPDebug=webAppComponentRuntimeJSPDebug, logServerLoggingBridgeUseParentLoggersEnabled=logServerLoggingBridgeUseParentLoggersEnabled, wlssnmpAgentDeploymentIndex=wlssnmpAgentDeploymentIndex, securityConfigurationIndex=securityConfigurationIndex, wtcResourcesTpUsrFile=wtcResourcesTpUsrFile, virtualHostHttpsKeepAliveSecs=virtualHostHttpsKeepAliveSecs, wlssnmpAgentDeploymentPrivacyProtocol=wlssnmpAgentDeploymentPrivacyProtocol, wseeClientOperationRuntimeResponseTimeTotal=wseeClientOperationRuntimeResponseTimeTotal, wlssnmpAgentDeploymentDeploymentOrder=wlssnmpAgentDeploymentDeploymentOrder, serverConnectTimeout=serverConnectTimeout, serverDebugDebugPathSvcVerbose=serverDebugDebugPathSvcVerbose, networkAccessPointMaxMessageSize=networkAccessPointMaxMessageSize, coherenceServerTable=coherenceServerTable, jmsConsumerRuntimeName=jmsConsumerRuntimeName, springBeanDefinitionRuntimeBeanClassname=springBeanDefinitionRuntimeBeanClassname, serverTunnelingEnabled=serverTunnelingEnabled, safRuntimeIndex=safRuntimeIndex, serverDebugDebugWTCtBridgeEx=serverDebugDebugWTCtBridgeEx, serverDebugDebugJpaJdbcSql=serverDebugDebugJpaJdbcSql, serverDebugDebugClusterFragments=serverDebugDebugClusterFragments, webAppComponentRuntimeOpenSessionsCurrentCount=webAppComponentRuntimeOpenSessionsCurrentCount, jvmRuntimeType=jvmRuntimeType, jmsProducerRuntimeObjectName=jmsProducerRuntimeObjectName, serverDebugDebugRC4=serverDebugDebugRC4, coherenceServerLifeCycleTaskRuntimeOperation=coherenceServerLifeCycleTaskRuntimeOperation, wldfDataRetirementByAgeTable=wldfDataRetirementByAgeTable, serverSecurityRuntimeObjectName=serverSecurityRuntimeObjectName, unixMachineObjectName=unixMachineObjectName, kodoQueryCacheRuntimeTable=kodoQueryCacheRuntimeTable, ejbPoolRuntimeBeansInUseCount=ejbPoolRuntimeBeansInUseCount, appClientComponentRuntimeEntry=appClientComponentRuntimeEntry, jmsBridgeDestinationIndex=jmsBridgeDestinationIndex, deploymentConfigurationTable=deploymentConfigurationTable, serverRuntimeServerClasspath=serverRuntimeServerClasspath, wtcRuntimeIndex=wtcRuntimeIndex, wseePortRuntimeTotalFaults=wseePortRuntimeTotalFaults, entityCacheCumulativeRuntimePercentRejected=entityCacheCumulativeRuntimePercentRejected, jdbcOracleDataSourceInstanceRuntimeInstanceName=jdbcOracleDataSourceInstanceRuntimeInstanceName, executeQueueType=executeQueueType, jMSDurableSubscriberRuntimeTable=jMSDurableSubscriberRuntimeTable, serverClientCertProxyEnabled=serverClientCertProxyEnabled, jmsBridgeDestinationUserName=jmsBridgeDestinationUserName, adminConsoleEntry=adminConsoleEntry, wtcRemoteTuxDomLocalAccessPoint=wtcRemoteTuxDomLocalAccessPoint, connectorConnectionRuntimeConnectionFactoryClassName=connectorConnectionRuntimeConnectionFactoryClassName, virtualHostTable=virtualHostTable, domainLibraryDeploymentOrder=domainLibraryDeploymentOrder, serverDebugDebugDiagnosticsModule=serverDebugDebugDiagnosticsModule, wseeV2RuntimeName=wseeV2RuntimeName, executeQueueQueueLength=executeQueueQueueLength, wldfFileArchiveRuntimeRecordSeekCount=wldfFileArchiveRuntimeRecordSeekCount, webAppComponentApplication=webAppComponentApplication, workManagerRuntimeModuleName=workManagerRuntimeModuleName, webServiceRequestBufferingQueueName=webServiceRequestBufferingQueueName, serverDebugDebugDRSQueues=serverDebugDebugDRSQueues, jtaMigratableTargetStrictOwnershipCheck=jtaMigratableTargetStrictOwnershipCheck, wldfDataRetirementByAgeName=wldfDataRetirementByAgeName, wtctBridgeGlobalDeliveryModeOverride=wtctBridgeGlobalDeliveryModeOverride, webServerLogFileTimeSpan=webServerLogFileTimeSpan, executeQueueRuntimeEntry=executeQueueRuntimeEntry, springRuntimeType=springRuntimeType, wseeClientOperationRuntimeName=wseeClientOperationRuntimeName, wldfFileArchiveRuntimeRecordSeekTime=wldfFileArchiveRuntimeRecordSeekTime, wlssnmpAgentDeploymentLocalizedKeyCacheInvalidationInterval=wlssnmpAgentDeploymentLocalizedKeyCacheInvalidationInterval, securityConfigurationExcludedDomainNames=securityConfigurationExcludedDomainNames, jdbcOracleDataSourceRuntimeCurrCapacityHighCount=jdbcOracleDataSourceRuntimeCurrCapacityHighCount, xmlRegistryType=xmlRegistryType, wlecConnectionServiceRuntimeIndex=wlecConnectionServiceRuntimeIndex, jMSDurableSubscriberRuntimeMessagesMovedCurrentCount=jMSDurableSubscriberRuntimeMessagesMovedCurrentCount, wlecConnectionRuntimeType=wlecConnectionRuntimeType, wtcImportLocalAccessPoint=wtcImportLocalAccessPoint, wlssnmpAgentDeploymentDebugLevel=wlssnmpAgentDeploymentDebugLevel, jtaRuntimeType=jtaRuntimeType, jmsConsumerRuntimeDurable=jmsConsumerRuntimeDurable, connectorConnectionPoolRuntimeNumUnavailableHighCount=connectorConnectionPoolRuntimeNumUnavailableHighCount, jrockitRuntimeIncremental=jrockitRuntimeIncremental, connectorServiceRuntimeConnectionPoolsTotalCount=connectorServiceRuntimeConnectionPoolsTotalCount, jmsServerTable=jmsServerTable, jmsServerDeploymentOrder=jmsServerDeploymentOrder, serverIndex=serverIndex, wlssnmpGaugeMonitorTable=wlssnmpGaugeMonitorTable, wlssnmpStringMonitorTable=wlssnmpStringMonitorTable, statefulEJBRuntimeIndex=statefulEJBRuntimeIndex, webServiceReliabilityObjectName=webServiceReliabilityObjectName, jmsSessionRuntimeParent=jmsSessionRuntimeParent, serverDebugDebugSecurityRoleMap=serverDebugDebugSecurityRoleMap, fileStoreIndex=fileStoreIndex, springBeanDefinitionRuntimeLazyInit=springBeanDefinitionRuntimeLazyInit, foreignJNDIProviderName=foreignJNDIProviderName, entityCacheRuntimeAvgPercentTransient=entityCacheRuntimeAvgPercentTransient, xmlRegistryWhenToCache=xmlRegistryWhenToCache, wanreplicationRuntimeParent=wanreplicationRuntimeParent, serverAdministrationProtocol=serverAdministrationProtocol, jmsConnectionRuntimeSessionsTotalCount=jmsConnectionRuntimeSessionsTotalCount)
